import telebot
from telebot import types
import json
import time
import datetime
import threading
import os
import subprocess
import signal
import sys

TOKEN = '8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY'
ADMIN_USERNAME = '@Gl1ch555'
ADMIN_ID = 8320218178
CARD_NUMBER = '2204320690808227'
CARD_HOLDER = 'Makarov Pavel Alexandrovich (Ozon Bank)'

SUBSCRIPTION_PERIODS = {
    '1_month': {'price': 50, 'days': 30},
    '2_months': {'price': 90, 'days': 60},
    '3_months': {'price': 120, 'days': 90}
}

REFERRAL_BONUS_NEW_USER = 50
REFERRAL_BONUS_REFERRER = 25
REFERRAL_BONUS_DAYS = 7

STARS_TO_RUB = 1.5

bot = telebot.TeleBot(TOKEN)

MAINTENANCE_MODE = False

def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

def generate_payment_id():
    return str(int(time.time() * 100000))

def get_available_config(period):
    if period not in configs_db:
        return None
    for config in configs_db[period]:
        if not config.get('used', False):
            return config
    return None

def mark_config_used(period, config_link):
    if period not in configs_db:
        return False
    for config in configs_db[period]:
        if config['link'] == config_link:
            config['used'] = True
            save_data('configs.json', configs_db)
            return True
    return False

def get_subscription_days_left(user_id):
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    if not subscription_end:
        return 0
    end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
    now = datetime.datetime.now()
    if end_date <= now:
        return 0
    days_left = (end_date - now).days
    return max(0, days_left)

def admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_manage_configs"),
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_confirm_payments"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_manage_user_configs"),
        types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    )
    return markup

def manage_configs_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_add_config"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete_config"),
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_configs"),
        types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_reset_configs"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def choose_period_keyboard(action, back_callback="admin_manage_configs"):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for period_key, period_data in SUBSCRIPTION_PERIODS.items():
        markup.add(types.InlineKeyboardButton(f"{period_data['days']} –¥–Ω–µ–π", callback_data=f"{action}_{period_key}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=back_callback))
    return markup

def confirm_payments_keyboard(payment_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
    )
    return markup

def user_configs_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_user_configs"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user_config"),
        types.InlineKeyboardButton("–ü–µ—Ä–µ–≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_reissue_config"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def users_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_active_users"),
        types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users"),
        types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_edit_user"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def user_action_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{user_id}"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{user_id}"),
        types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data=f"admin_view_user_configs_{user_id}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")
    )
    return markup

def main_menu_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN üöÄ", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="my_account"),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª", callback_data="support"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ü§ù", callback_data="referral_system")
    )
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†Ô∏è", callback_data="admin_panel"))
    return markup

def buy_vpn_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for period_key, period_data in SUBSCRIPTION_PERIODS.items():
        markup.add(types.InlineKeyboardButton(f"{period_data['days']} –¥–Ω–µ–π ({period_data['price']} ‚ÇΩ)", callback_data=f"choose_period_{period_key}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup

def payment_methods_keyboard(period_callback_data, amount, user_balance, partial_payment_done=False):
    stars_amount = int(amount / STARS_TO_RUB)
    markup = types.InlineKeyboardMarkup(row_width=1)

    if not partial_payment_done:
        needed_amount_for_balance = max(0, amount - user_balance)
        if needed_amount_for_balance == 0:
            markup.add(types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ)", callback_data=f"pay_balance_{period_callback_data}"))
        else:
            markup.add(types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({user_balance} ‚ÇΩ) + –¥–æ–ø–ª–∞—Ç–∏—Ç—å {needed_amount_for_balance} ‚ÇΩ", callback_data=f"pay_balance_partial_{period_callback_data}_{amount}"))

    markup.add(
        types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({amount} ‚ÇΩ)", callback_data=f"pay_card_{period_callback_data}_{amount}"),
        types.InlineKeyboardButton(f"‚≠ê –û–ø–ª–∞—Ç–∞ Telegram Stars ({stars_amount} Stars)", callback_data=f"pay_stars_{period_callback_data}_{amount}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="buy_vpn")
    )
    return markup

def my_account_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="my_configs"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def my_configs_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    
    if subscription_end:
        end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        if end_date > datetime.datetime.now():
            markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 30 –¥–Ω–µ–π", callback_data="get_config_1_month"))
            markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 60 –¥–Ω–µ–π", callback_data="get_config_2_months"))
            markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 90 –¥–Ω–µ–π", callback_data="get_config_3_month"))
        else:
            markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞", callback_data="buy_vpn"))
    else:
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞", callback_data="buy_vpn"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_account"))
    return markup

def send_config_to_user(user_id, period, username, first_name):
    config = get_available_config(period)
    if not config:
        return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
    
    mark_config_used(period, config['link'])
    
    config_name = f"{first_name} ({username}) - {SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π"
    
    if 'used_configs' not in users_db[str(user_id)]:
        users_db[str(user_id)]['used_configs'] = []
    
    used_config = {
        'config_name': config['name'],
        'config_link': config['link'],
        'config_code': config['code'],
        'period': period,
        'issue_date': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'user_name': f"{first_name} (@{username})"
    }
    
    users_db[str(user_id)]['used_configs'].append(used_config)
    save_data('users.json', users_db)
    
    try:
        bot.send_message(user_id, f"üîê **–í–∞—à VPN –∫–æ–Ω—Ñ–∏–≥**\n\n"
                                 f"üë§ **–ò–º—è:** {config_name}\n"
                                 f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π\n"
                                 f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config['link']}\n\n"
                                 f"üíæ _–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_",
                         parse_mode='Markdown')
        return True, config
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username if message.from_user.username else 'N/A'
    first_name = message.from_user.first_name if message.from_user.first_name else 'N/A'

    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in users_db:
        referred_by_id = None
        if len(message.text.split()) > 1:
            try:
                potential_referrer_id = message.text.split()[1]
                if potential_referrer_id in users_db and potential_referrer_id != user_id:
                    referred_by_id = potential_referrer_id
                    
                    users_db[potential_referrer_id]['referrals_count'] = users_db[potential_referrer_id].get('referrals_count', 0) + 1
                    users_db[potential_referrer_id]['balance'] = users_db[potential_referrer_id].get('balance', 0) + REFERRAL_BONUS_REFERRER
                    
                    current_end = users_db[potential_referrer_id].get('subscription_end')
                    if current_end:
                        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                    else:
                        current_end = datetime.datetime.now()
                    
                    new_end = current_end + datetime.timedelta(days=REFERRAL_BONUS_DAYS)
                    users_db[potential_referrer_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                    
                    bot.send_message(potential_referrer_id, 
                                     f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                                     f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")

                    save_data('users.json', users_db)
            except ValueError:
                pass

        users_db[user_id] = {
            'balance': REFERRAL_BONUS_NEW_USER,
            'subscription_end': None,
            'referred_by': referred_by_id,
            'username': username,
            'first_name': first_name,
            'referrals_count': 0,
            'used_configs': []
        }
        save_data('users.json', users_db)
        
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n\nüéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: {REFERRAL_BONUS_NEW_USER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!"
        if referred_by_id:
            welcome_text += f"\nü§ù –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
        
        bot.send_message(message.chat.id, welcome_text,
                         reply_markup=main_menu_keyboard(message.from_user.id))
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ VPN Bot!",
                         reply_markup=main_menu_keyboard(message.from_user.id))

@bot.message_handler(commands=['maintenance_on'])
def maintenance_on(message):
    global MAINTENANCE_MODE
    if str(message.from_user.id) == str(ADMIN_ID):
        MAINTENANCE_MODE = True
        bot.send_message(ADMIN_ID, "‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù. –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['maintenance_off'])
def maintenance_off(message):
    global MAINTENANCE_MODE
    if str(message.from_user.id) == str(ADMIN_ID):
        MAINTENANCE_MODE = False
        bot.send_message(ADMIN_ID, "‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù. –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)

    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if call.data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))
    
    elif call.data == "buy_vpn":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=buy_vpn_keyboard())
    
    elif call.data.startswith("choose_period_"):
        period_data_key = call.data.replace("choose_period_", "")
        amount = SUBSCRIPTION_PERIODS[period_data_key]['price']
        
        user_balance = users_db.get(user_id, {}).get('balance', 0)
        days_left = get_subscription_days_left(user_id)
        
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π.\n"
        message_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
        message_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
        
        if days_left > 0:
            message_text += f"üìÖ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ: {days_left} –¥–Ω–µ–π\n"
        
        message_text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        bot.edit_message_text(message_text, 
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id,
                              reply_markup=payment_methods_keyboard(period_data_key, amount, user_balance))

    elif call.data.startswith("pay_balance_partial_"):
        parts = call.data.split('_')
        period_data_key = parts[3] + '_' + parts[4]
        original_amount = int(parts[5])

        user_info = users_db.get(user_id, {})
        user_balance = user_info.get('balance', 0)

        if user_balance > 0:
            amount_to_pay_from_balance = min(user_balance, original_amount)
            users_db[user_id]['balance'] = user_balance - amount_to_pay_from_balance
            save_data('users.json', users_db)

            remaining_amount = original_amount - amount_to_pay_from_balance

            bot.edit_message_text(f"üí≥ –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞: {amount_to_pay_from_balance} ‚ÇΩ. "
                                  f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {users_db[user_id]['balance']} ‚ÇΩ.\n"
                                  f"–ö –¥–æ–ø–ª–∞—Ç–µ: {remaining_amount} ‚ÇΩ.\n\n"
                                  f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–ø–ª–∞—Ç—ã:",
                                  chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id,
                                  reply_markup=payment_methods_keyboard(period_data_key, remaining_amount, 0, partial_payment_done=True))
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã.")

    elif call.data.startswith("pay_balance_"):
        period_data_key = call.data.replace("pay_balance_", "")
        amount = SUBSCRIPTION_PERIODS[period_data_key]['price']
        
        user_info = users_db.get(user_id, {})
        user_balance = user_info.get('balance', 0)
        
        if user_balance >= amount:
            users_db[user_id]['balance'] = user_balance - amount
            
            current_end = user_info.get('subscription_end')
            if current_end:
                current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
            else:
                current_end = datetime.datetime.now()

            add_days = SUBSCRIPTION_PERIODS[period_data_key]['days']
            
            new_end = current_end + datetime.timedelta(days=add_days)
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)

            success, result = send_config_to_user(user_id, period_data_key, 
                                                user_info.get('username', 'user'), 
                                                user_info.get('first_name', 'User'))
            
            if success:
                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                      f"üí≥ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {amount} ‚ÇΩ\n"
                                      f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {users_db[user_id]['balance']} ‚ÇΩ\n"
                                      f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                      f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                      chat_id=call.message.chat.id, 
                                      message_id=call.message.message_id)
            else:
                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                      f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}",
                                      chat_id=call.message.chat.id, 
                                      message_id=call.message.message_id)
        else:
            needed_amount = amount - user_balance
            bot.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                                  f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
                                  f"üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} ‚ÇΩ\n"
                                  f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {needed_amount} ‚ÇΩ\n"
                                  f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                                  chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id,
                                  reply_markup=payment_methods_keyboard(period_data_key, amount, user_balance))

    elif call.data.startswith("pay_card_"):
        parts = call.data.split('_')
        period_data_key = parts[2] + '_' + parts[3]
        amount = int(parts[4])
        
        payment_id = generate_payment_id()
        payments_db[payment_id] = {
            'user_id': user_id,
            'amount': amount,
            'status': 'pending',
            'screenshot_id': None,
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'period': period_data_key,
            'method': 'card',
            'chat_message_id': call.message.message_id
        }
        save_data('payments.json', payments_db)

        bot.edit_message_text(f"–î–ª—è –æ–ø–ª–∞—Ç—ã {amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π:"
                              f"\n\n1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`"
                              f"\n–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`"
                              f"\n\n2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
                              f"\n\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É."
                              f"\n**–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.**",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown')
        
        user_info = users_db.get(user_id, {})
        username_str = user_info.get('username', 'N/A')
        bot.send_message(ADMIN_ID, 
                         f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} ‚ÇΩ –æ—Ç @{username_str} (ID: {user_id}) –∑–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π. "
                         f"–û–∂–∏–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç.\n"
                         f"–ü–ª–∞—Ç–µ–∂ ID: `{payment_id}`", parse_mode='Markdown', reply_markup=admin_keyboard())

    elif call.data.startswith("pay_stars_"):
        parts = call.data.split('_')
        period_data_key = parts[2] + '_' + parts[3]
        amount = int(parts[4])
        
        stars_amount = int(amount / STARS_TO_RUB)
        
        try:
            prices = [types.LabeledPrice(label=f"VPN –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π", amount=stars_amount)]
            
            bot.send_invoice(
                chat_id=call.message.chat.id,
                title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π",
                description=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π",
                provider_token='',
                currency='XTR',
                prices=prices,
                invoice_payload=f'vpn_subscription_{period_data_key}_{user_id}_{amount}'
            )
        except Exception as e:
            bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == "my_account":
        user_info = users_db.get(user_id, {})
        subscription_end = user_info.get('subscription_end')
        balance = user_info.get('balance', 0)
        days_left = get_subscription_days_left(user_id)

        status_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        if days_left > 0:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π (–¥–æ {end_date.strftime('%d.%m.%Y')})"

        bot.edit_message_text(f"üë§ **–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
                              f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** {status_text}\n"
                              f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} ‚ÇΩ\n"
                              f"üë® **–í–∞—à–µ –∏–º—è:** {user_info.get('first_name', 'N/A')}\n"
                              f"üì± **Username:** @{user_info.get('username', 'N/A')}\n"
                              f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** {user_info.get('referrals_count', 0)}\n\n",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown',
                              reply_markup=my_account_keyboard())

    elif call.data == "my_configs":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=my_configs_keyboard(user_id))

    elif call.data.startswith("get_config_"):
        period_data_key = call.data.replace("get_config_", "")
        user_info = users_db.get(user_id, {})
        
        days_left = get_subscription_days_left(user_id)
        if days_left <= 0:
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            return
        
        success, result = send_config_to_user(user_id, period_data_key, 
                                            user_info.get('username', 'user'), 
                                            user_info.get('first_name', 'User'))
        
        if success:
            bot.send_message(call.message.chat.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.")
        else:
            bot.send_message(call.message.chat.id, f"‚ùå {result}")

    elif call.data == "support":
        bot.edit_message_text(f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME}.\n"
                              f"–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))

    elif call.data == "referral_system":
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        user_info = users_db.get(user_id, {})
        referrals_count = user_info.get('referrals_count', 0)
        balance = user_info.get('balance', 0)

        bot.edit_message_text(f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
                              f"üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                              f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                              f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏\n"
                              f"‚Ä¢ –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:\n"
                              f"  üéÅ **–ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é** –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_NEW_USER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üí∞ **–í–∞–º** –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üìÖ **–í–∞–º** –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                              f"üí∞ **–í–∞—à–∏ –±–æ–Ω—É—Å—ã:**\n"
                              f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals_count}\n"
                              f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referrals_count * REFERRAL_BONUS_REFERRER} ‚ÇΩ\n"
                              f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n\n"
                              f"üìé **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
                              f"`{referral_link}`\n\n"
                              f"üí∏ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏!",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown', reply_markup=main_menu_keyboard(user_id))

    elif call.data == "admin_panel":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=main_menu_keyboard(user_id))

    elif call.data == "admin_manage_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_show_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n\n"
            for period, configs_list in configs_db.items():
                message_text += f"**{SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π:**\n"
                if configs_list:
                    available_count = sum(1 for config in configs_list if not config.get('used', False))
                    message_text += f"  –í—Å–µ–≥–æ: {len(configs_list)}, –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
                    for i, config in enumerate(configs_list):
                        status = "‚úÖ" if not config.get('used', False) else "‚ùå"
                        message_text += f"  {i+1}. {status} {config['name']} - `{config['link']}`\n"
                else:
                    message_text += "  (–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤)\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_reset_configs":
        if str(user_id) == str(ADMIN_ID):
            reset_count = 0
            for period in configs_db:
                for config in configs_db[period]:
                    if config.get('used', False):
                        config['used'] = False
                        reset_count += 1
            save_data('configs.json', configs_db)
            bot.edit_message_text(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {reset_count} –∫–æ–Ω—Ñ–∏–≥–æ–≤.", chat_id=call.message.chat.id, message_id=call.message.message_id,
                           reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_add_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞:", 
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=choose_period_keyboard("add_config"))
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("add_config_"):
        if str(user_id) == str(ADMIN_ID):
            period = call.data.replace("add_config_", "")
            if period not in SUBSCRIPTION_PERIODS:
                bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=manage_configs_keyboard())
                return
            bot.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π\n\n"
                                 f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                                 f"–ò–º–µ–Ω–∞ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞.",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_add_configs_bulk, period)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_delete_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ ID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 1` –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ 30 –¥–Ω–µ–π, ID –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1).",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=manage_configs_keyboard())
            bot.register_next_step_handler(call.message, process_delete_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_confirm_payments":
        if str(user_id) == str(ADMIN_ID):
            pending_payments = {pid: p_data for pid, p_data in payments_db.items() if p_data['status'] == 'pending' and p_data['screenshot_id']}
            if not pending_payments:
                bot.edit_message_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=admin_keyboard())
                return
            
            for payment_id, p_data in pending_payments.items():
                user_payment_info = users_db.get(p_data['user_id'])
                username_str = user_payment_info.get('username', 'N/A') if user_payment_info else 'N/A'
                
                bot.send_photo(ADMIN_ID, p_data['screenshot_id'], 
                               caption=f"–ü–ª–∞—Ç–µ–∂ ID: `{payment_id}`\n"
                                       f"–û—Ç: @{username_str} (ID: {p_data['user_id']})\n"
                                       f"–°—É–º–º–∞: {p_data['amount']} ‚ÇΩ\n"
                                       f"–ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS[p_data['period']]['days']} –¥–Ω–µ–π\n"
                                       f"–í—Ä–µ–º—è: {p_data['timestamp']}",
                               parse_mode='Markdown', reply_markup=confirm_payments_keyboard(payment_id))
            
            bot.send_message(ADMIN_ID, "üëÜ –≠—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_confirm_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_confirm_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'confirmed'
                
                target_user_id = payments_db[payment_id]['user_id']
                period_data_key = payments_db[payment_id]['period']
                amount = payments_db[payment_id]['amount']
                
                if target_user_id in users_db:
                    current_end = users_db[target_user_id].get('subscription_end')
                    if current_end:
                        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                    else:
                        current_end = datetime.datetime.now()

                    add_days = SUBSCRIPTION_PERIODS[period_data_key]['days']
                    
                    new_end = current_end + datetime.timedelta(days=add_days)
                    users_db[target_user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                    save_data('users.json', users_db)

                    user_info = users_db[target_user_id]
                    success, result = send_config_to_user(target_user_id, period_data_key, 
                                                        user_info.get('username', 'user'), 
                                                        user_info.get('first_name', 'User'))
                    
                    if success:
                        bot.send_message(target_user_id, 
                                         f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                         f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                         f"–ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                         reply_markup=main_menu_keyboard(target_user_id))
                    else:
                        bot.send_message(target_user_id, 
                                         f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                         f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}")
                
                save_data('payments.json', payments_db)
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                         caption=f"{call.message.caption}\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                         reply_markup=None, parse_mode='Markdown')
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_reject_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_reject_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'rejected'
                save_data('payments.json', payments_db)
                
                target_user_id = payments_db[payment_id]['user_id']
                bot.send_message(target_user_id, 
                                 f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ (ID: `{payment_id}`) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ({ADMIN_USERNAME}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.", parse_mode='Markdown',
                                 reply_markup=main_menu_keyboard(target_user_id))
                
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                         caption=f"{call.message.caption}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                         reply_markup=None, parse_mode='Markdown')
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_manage_users":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", 
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=users_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_active_users":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π):**\n\n"
            active_count = 0
            
            for uid, u_data in users_db.items():
                if u_data.get('subscription_end'):
                    sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                    if sub_end > datetime.datetime.now():
                        active_count += 1
                        referred_by = "–ù–µ—Ç"
                        if u_data.get('referred_by'):
                            referrer = users_db.get(u_data['referred_by'], {})
                            referred_by = f"@{referrer.get('username', 'N/A')} (ID: {u_data['referred_by']})"
                        
                        message_text += f"üë§ **{u_data.get('first_name', 'N/A')}** (@{u_data.get('username', 'N/A')})\n"
                        message_text += f"üÜî ID: `{uid}`\n"
                        message_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {u_data.get('balance', 0)} ‚ÇΩ\n"
                        message_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end.strftime('%d.%m.%Y %H:%M')}\n"
                        message_text += f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {u_data.get('referrals_count', 0)}\n"
                        message_text += f"üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referred_by}\n"
                        message_text += f"‚ö° –î–µ–π—Å—Ç–≤–∏—è: /manage_{uid}\n\n"
            
            if active_count == 0:
                message_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id, 
                                  parse_mode='Markdown', reply_markup=users_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_all_users":
        if str(user_id) == str(ADMIN_ID):
            message_text = f"**–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users_db)}):**\n\n"
            
            for i, (uid, u_data) in enumerate(users_db.items(), 1):
                sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                if u_data.get('subscription_end'):
                    sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                    if sub_end > datetime.datetime.now():
                        sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y')}"
                    else:
                        sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
                
                message_text += f"{i}. **{u_data.get('first_name', 'N/A')}** (@{u_data.get('username', 'N/A')})\n"
                message_text += f"   üÜî: `{uid}` | {sub_status}\n"
                message_text += f"   üí∞: {u_data.get('balance', 0)} ‚ÇΩ | ü§ù: {u_data.get('referrals_count', 0)}\n"
                message_text += f"   ‚ö° /manage_{uid}\n\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=users_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_search_user":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_search_user)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_edit_user":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_edit_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_edit_balance_"):
        if str(user_id) == str(ADMIN_ID):
            target_user_id = call.data.replace("admin_edit_balance_", "")
            bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:", chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_edit_balance, target_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_edit_subscription_"):
        if str(user_id) == str(ADMIN_ID):
            target_user_id = call.data.replace("admin_edit_subscription_", "")
            bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):", chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_edit_subscription, target_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_view_user_configs_"):
        if str(user_id) == str(ADMIN_ID):
            target_user_id = call.data.replace("admin_view_user_configs_", "")
            user_info = users_db.get(target_user_id, {})
            used_configs = user_info.get('used_configs', [])
            
            if used_configs:
                message_text = f"**–ö–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.get('first_name', 'N/A')} (@{user_info.get('username', 'N/A')}):**\n\n"
                for i, config in enumerate(used_configs, 1):
                    message_text += f"{i}. **{config['config_name']}**\n"
                    message_text += f"   –ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS[config['period']]['days']} –¥–Ω–µ–π\n"
                    message_text += f"   –í—ã–¥–∞–Ω: {config['issue_date']}\n"
                    message_text += f"   –°—Å—ã–ª–∫–∞: {config['config_link']}\n\n"
            else:
                message_text = "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤."
            
            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown', reply_markup=user_action_keyboard(target_user_id))
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_manage_user_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=user_configs_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_show_user_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–í—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n\n"
            config_count = 0
            
            for uid, user_data in users_db.items():
                used_configs = user_data.get('used_configs', [])
                if used_configs:
                    message_text += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_data.get('first_name', 'N/A')} (@{user_data.get('username', 'N/A')}) ID: `{uid}`\n"
                    for i, config in enumerate(used_configs, 1):
                        config_count += 1
                        message_text += f"  {i}. {config['config_name']} ({SUBSCRIPTION_PERIODS[config['period']]['days']} –¥–Ω–µ–π)\n"
                        message_text += f"     –°—Å—ã–ª–∫–∞: {config['config_link']}\n"
                        message_text += f"     –í—ã–¥–∞–Ω: {config['issue_date']}\n\n"
            
            if config_count == 0:
                message_text = "‚ùå –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤."
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=user_configs_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_delete_user_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123456789 1`, –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1):",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_delete_user_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_reissue_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞:",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_reissue_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_broadcast":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_broadcast_message)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@bot.message_handler(commands=['manage'])
def handle_manage_command(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        parts = message.text.split('_')
        if len(parts) < 2:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /manage_USER_ID")
            return

        user_id = parts[1]
        if user_id in users_db:
            user_info = users_db[user_id]
            sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            if user_info.get('subscription_end'):
                sub_end = datetime.datetime.strptime(user_info['subscription_end'], '%Y-%m-%d %H:%M:%S')
                if sub_end > datetime.datetime.now():
                    sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')}"
                else:
                    sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            
            message_text = f"üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:**\n\n"
            message_text += f"**–ò–º—è:** {user_info.get('first_name', 'N/A')}\n"
            message_text += f"**Username:** @{user_info.get('username', 'N/A')}\n"
            message_text += f"**ID:** `{user_id}`\n"
            message_text += f"**–ë–∞–ª–∞–Ω—Å:** {user_info.get('balance', 0)} ‚ÇΩ\n"
            message_text += f"**–ü–æ–¥–ø–∏—Å–∫–∞:** {sub_status}\n"
            message_text += f"**–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:** {user_info.get('referrals_count', 0)}\n"
            message_text += f"**–ö–æ–Ω—Ñ–∏–≥–æ–≤ –≤—ã–¥–∞–Ω–æ:** {len(user_info.get('used_configs', []))}\n"
            
            bot.send_message(message.chat.id, message_text, 
                           reply_markup=user_action_keyboard(user_id),
                           parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /manage_USER_ID")

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    user_id = str(message.from_user.id)
    payment_info = message.successful_payment
    
    payload_parts = payment_info.invoice_payload.split('_')
    if len(payload_parts) >= 5:
        period_data_key = payload_parts[2] + '_' + payload_parts[3]
        original_amount_rub = int(payload_parts[4])
        
        payment_id = generate_payment_id()
        payments_db[payment_id] = {
            'user_id': user_id,
            'amount': original_amount_rub,
            'status': 'confirmed',
            'screenshot_id': None,
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'period': period_data_key,
            'method': 'stars'
        }
        save_data('payments.json', payments_db)
        
        if user_id in users_db:
            current_end = users_db[user_id].get('subscription_end')
            if current_end:
                current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
            else:
                current_end = datetime.datetime.now()

            add_days = SUBSCRIPTION_PERIODS[period_data_key]['days']
            
            new_end = current_end + datetime.timedelta(days=add_days)
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)

            user_info = users_db[user_id]
            success, result = send_config_to_user(user_id, period_data_key, 
                                                user_info.get('username', 'user'), 
                                                user_info.get('first_name', 'User'))
            
            if success:
                bot.send_message(user_id, 
                                 f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                 f"‚≠ê –û–ø–ª–∞—á–µ–Ω–æ: {payment_info.total_amount} Stars\n"
                                 f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                 f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                 reply_markup=main_menu_keyboard(user_id))
            else:
                bot.send_message(user_id, 
                                 f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                 f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}")
        
        bot.send_message(ADMIN_ID, 
                         f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars: {payment_info.total_amount} Stars\n"
                         f"–ù–∞ —Å—É–º–º—É: {original_amount_rub} ‚ÇΩ\n"
                         f"–û—Ç: @{message.from_user.username} (ID: {user_id})\n"
                         f"–ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π")

@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.from_user.id)
    
    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    pending_payment_id = None
    for pid, p_data in payments_db.items():
        if p_data['user_id'] == user_id and p_data['status'] == 'pending' and p_data['screenshot_id'] is None and p_data['method'] == 'card':
            pending_payment_id = pid
            break
    
    if pending_payment_id:
        payments_db[pending_payment_id]['screenshot_id'] = message.photo[-1].file_id
        save_data('payments.json', payments_db)
        
        bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
                                         "–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.")
        
        user_info = users_db.get(user_id, {})
        username_str = user_info.get('username', 'N/A')
        
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, 
                       caption=f"‚ùóÔ∏è –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ ID: `{pending_payment_id}`\n"
                               f"–û—Ç: @{username_str} (ID: {user_id})\n"
                               f"–°—É–º–º–∞: {payments_db[pending_payment_id]['amount']} ‚ÇΩ\n"
                               f"–ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS[payments_db[pending_payment_id]['period']]['days']} –¥–Ω–µ–π",
                       parse_mode='Markdown', reply_markup=confirm_payments_keyboard(pending_payment_id))
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞. –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞—Ä—Ç–æ–π?")

def process_add_configs_bulk(message, period_key):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    if period_key not in configs_db:
        configs_db[period_key] = []
    
    links = message.text.strip().split('\n')
    added_count = 0
    
    for link in links:
        link = link.strip()
        if link and (link.startswith('http://') or link.startswith('https://')):
            if any(config['link'] == link for config in configs_db[period_key]):
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ —Å —Å—Å—ã–ª–∫–æ–π `{link}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—â–µ–Ω.", parse_mode='Markdown')
                continue
            
            username = message.from_user.username if message.from_user.username else 'admin'
            config_name = f"{username}_{len(configs_db[period_key]) + 1}"
            
            config_data = {
                'name': config_name,
                'code': f"{username}_{len(configs_db[period_key]) + 1}",
                'link': link,
                'added_by': username,
                'used': False
            }
            
            configs_db[period_key].append(config_data)
            added_count += 1
    
    save_data('configs.json', configs_db)
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {SUBSCRIPTION_PERIODS[period_key]['days']} –¥–Ω–µ–π.", 
                     reply_markup=manage_configs_keyboard())

def process_delete_config(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        parts = message.text.strip().split()
        period_key = parts[0]
        config_id = int(parts[1]) - 1
        
        if period_key in SUBSCRIPTION_PERIODS and period_key in configs_db and 0 <= config_id < len(configs_db[period_key]):
            deleted_config = configs_db[period_key].pop(config_id)
            save_data('configs.json', configs_db)
            bot.send_message(message.chat.id, f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ '{deleted_config['name']}' —É–¥–∞–ª–µ–Ω –∏–∑ –ø–µ—Ä–∏–æ–¥–∞ {SUBSCRIPTION_PERIODS[period_key]['days']} –¥–Ω–µ–π.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ ID –∫–æ–Ω—Ñ–∏–≥–∞.")
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ø–µ—Ä–∏–æ–¥ ID` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 1`)", parse_mode='Markdown')

def process_search_user(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    search_term = message.text.strip()
    found_users = []
    
    if search_term.startswith('@'):
        search_term = search_term[1:]
    
    for uid, user_data in users_db.items():
        if (search_term.lower() in user_data.get('username', '').lower() or 
            search_term == uid or
            search_term.lower() in user_data.get('first_name', '').lower()):
            found_users.append((uid, user_data))
    
    if found_users:
        message_text = f"**–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_users)}**\n\n"
        for uid, user_data in found_users:
            sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            if user_data.get('subscription_end'):
                sub_end = datetime.datetime.strptime(user_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                if sub_end > datetime.datetime.now():
                    sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y')}"
                else:
                    sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            
            message_text += f"üë§ **{user_data.get('first_name', 'N/A')}** (@{user_data.get('username', 'N/A')})\n"
            message_text += f"üÜî ID: `{uid}`\n"
            message_text += f"üìä {sub_status} | üí∞ {user_data.get('balance', 0)} ‚ÇΩ\n"
            message_text += f"‚ö° /manage_{uid}\n\n"
        
        bot.send_message(message.chat.id, message_text, parse_mode='Markdown', reply_markup=users_management_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=users_management_keyboard())

def process_edit_user_id(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    target_user_id = message.text.strip()
    if target_user_id in users_db:
        user_info = users_db[target_user_id]
        sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
        if user_info.get('subscription_end'):
            sub_end = datetime.datetime.strptime(user_info['subscription_end'], '%Y-%m-%d %H:%M:%S')
            if sub_end > datetime.datetime.now():
                sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')}"
            else:
                sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
        
        message_text = f"üë§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
        message_text += f"**–ò–º—è:** {user_info.get('first_name', 'N/A')}\n"
        message_text += f"**Username:** @{user_info.get('username', 'N/A')}\n"
        message_text += f"**ID:** `{target_user_id}`\n"
        message_text += f"**–ë–∞–ª–∞–Ω—Å:** {user_info.get('balance', 0)} ‚ÇΩ\n"
        message_text += f"**–ü–æ–¥–ø–∏—Å–∫–∞:** {sub_status}\n"
        
        bot.send_message(message.chat.id, message_text, 
                       reply_markup=user_action_keyboard(target_user_id),
                       parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=users_management_keyboard())

def process_edit_balance(message, target_user_id):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        new_balance = int(message.text.strip())
        old_balance = users_db[target_user_id].get('balance', 0)
        users_db[target_user_id]['balance'] = new_balance
        save_data('users.json', users_db)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑–º–µ–Ω–µ–Ω:\n"
                        f"–° {old_balance} ‚ÇΩ –Ω–∞ {new_balance} ‚ÇΩ", reply_markup=user_action_keyboard(target_user_id))
        
        bot.send_message(target_user_id, 
                        f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚ÇΩ", reply_markup=main_menu_keyboard(target_user_id))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=user_action_keyboard(target_user_id))

def process_edit_subscription(message, target_user_id):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    new_subscription = message.text.strip()
    if new_subscription.lower() == '–Ω–µ—Ç':
        users_db[target_user_id]['subscription_end'] = None
        save_data('users.json', users_db)
        
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=user_action_keyboard(target_user_id))
        bot.send_message(target_user_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=main_menu_keyboard(target_user_id))
    else:
        try:
            new_end = datetime.datetime.strptime(new_subscription, '%d.%m.%Y %H:%M')
            users_db[target_user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)
            
            bot.send_message(message.chat.id, 
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}.", reply_markup=user_action_keyboard(target_user_id))
            bot.send_message(target_user_id, 
                            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.strftime('%d.%m.%Y %H:%M')}", reply_markup=main_menu_keyboard(target_user_id))
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", reply_markup=user_action_keyboard(target_user_id))

def process_delete_user_config(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        parts = message.text.strip().split()
        user_id = parts[0]
        config_index = int(parts[1]) - 1
        
        if user_id in users_db:
            used_configs = users_db[user_id].get('used_configs', [])
            if 0 <= config_index < len(used_configs):
                deleted_config = used_configs.pop(config_index)
                users_db[user_id]['used_configs'] = used_configs
                save_data('users.json', users_db)
                
                bot.send_message(message.chat.id, 
                                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω:\n"
                                f"–ò–º—è: {deleted_config['config_name']}\n"
                                f"–ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS[deleted_config['period']]['days']} –¥–Ω–µ–π", reply_markup=user_configs_management_keyboard())
                
                bot.send_message(user_id, 
                                f"‚ùå –í–∞—à –∫–æ–Ω—Ñ–∏–≥ '{deleted_config['config_name']}' –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=main_menu_keyboard(user_id))
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞.", reply_markup=user_configs_management_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=user_configs_management_keyboard())
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä_–∫–æ–Ω—Ñ–∏–≥–∞`", parse_mode='Markdown', reply_markup=user_configs_management_keyboard())

def process_reissue_config(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        user_id = message.text.strip()
        if user_id in users_db:
            user_info = users_db[user_id]
            bot.send_message(message.chat.id, 
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('first_name', 'N/A')} (@{user_info.get('username', 'N/A')})\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (1_month, 2_months, 3_months):", reply_markup=choose_period_keyboard("reissue_config", back_callback="admin_manage_user_configs"))
            bot.register_next_step_handler(message, process_reissue_period, user_id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=user_configs_management_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=user_configs_management_keyboard())

def process_reissue_period(message, user_id):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    period_key = message.text.strip()
    if period_key in SUBSCRIPTION_PERIODS:
        user_info = users_db[user_id]
        success, result = send_config_to_user(user_id, period_key, 
                                            user_info.get('username', 'user'), 
                                            user_info.get('first_name', 'User'))
        
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", reply_markup=user_configs_management_keyboard())
            bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ã–¥–∞–ª –≤–∞–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –ø–µ—Ä–∏–æ–¥ {SUBSCRIPTION_PERIODS[period_key]['days']} –¥–Ω–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.", reply_markup=main_menu_keyboard(user_id))
        else:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–¥–∞—á–µ: {result}", reply_markup=user_configs_management_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1_month, 2_months, 3_months", reply_markup=user_configs_management_keyboard())

def process_broadcast_message(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    broadcast_text = message.text
    sent_count = 0
    failed_count = 0
    
    bot.send_message(message.chat.id, "üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for uid in users_db.keys():
        try:
            bot.send_message(uid, f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{broadcast_text}", parse_mode='Markdown')
            sent_count += 1
            time.sleep(0.1)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            failed_count += 1
    
    bot.send_message(message.chat.id, 
                    f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                    f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed_count}",
                    reply_markup=admin_keyboard())

def signal_handler(signum, frame):
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    bot.stop_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        if ADMIN_ID == 8320218178:
            print("–í–Ω–∏–º–∞–Ω–∏–µ: ADMIN_ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –≤ —Ñ–∞–π–ª–µ.")
        bot.polling(none_stop=True, interval=0, timeout=60)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemd.")
