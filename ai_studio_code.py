import telebot
from telebot import types
import json
import time
import datetime
import threading
import os
import signal
import sys
import math

class Config:
    TOKEN = '8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY'
    ADMIN_USERNAME = '@Gl1ch555'
    ADMIN_ID = 8320218178
    CARD_NUMBER = '2204320690808227'
    CARD_HOLDER = 'Makarov Pavel Alexandrovich (Ozon Bank)'

    PRICES = {
        '1_month': 50,
        '2_months': 90,
        '3_months': 120
    }

    PERIOD_TO_DAYS = {
        '1_month': 30,
        '2_months': 60,
        '3_months': 90
    }

    REFERRAL_BONUS_NEW_USER = 50
    REFERRAL_BONUS_REFERRER = 25
    REFERRAL_BONUS_DAYS = 7

    STARS_TO_RUB = 1.5
    BROADCAST_DELAY_SEC = 0.5

DB_LOCK = threading.Lock()

bot = telebot.TeleBot(Config.TOKEN)

def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ {filename}: {e}")

users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

def get_price_data(period):
    return Config.PRICES.get(period, 0), Config.PERIOD_TO_DAYS.get(period, 0)

def is_admin(user_id):
    return str(user_id) == str(Config.ADMIN_ID)

def admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏"),
        types.KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        types.KeyboardButton("üí∞ –ü–ª–∞—Ç–µ–∂–∏")
    )
    return markup

def user_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üíé –ë–∞–ª–∞–Ω—Å"),
        types.KeyboardButton("üåê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏"),
        types.KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        types.KeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
        types.KeyboardButton("üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    return markup

def back_to_admin_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))
    return markup

def get_subscription_days_left(user_id):
    with DB_LOCK:
        user_data = users_db.get(str(user_id))
        if not user_data or not user_data.get('subscription_end'):
            return 0

        end_date_str = user_data['subscription_end']
        try:
            end_date = datetime.datetime.strptime(end_date_str, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            return 0

        now = datetime.datetime.now()
        if end_date <= now:
            return 0

        return (end_date - now).days

def add_subscription_time(user_id, days):
    with DB_LOCK:
        user_id_str = str(user_id)
        if user_id_str not in users_db:
            return

        user_data = users_db[user_id_str]
        current_end_str = user_data.get('subscription_end')

        now = datetime.datetime.now()
        
        if current_end_str:
            try:
                current_end = datetime.datetime.strptime(current_end_str, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                current_end = now
        else:
            current_end = now

        if current_end <= now:
            new_end = now + datetime.timedelta(days=days)
        else:
            new_end = current_end + datetime.timedelta(days=days)

        user_data['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
        save_data('users.json', users_db)

def send_config_to_user(chat_id, user_id, period):
    period_key = period
    
    with DB_LOCK:
        if not configs_db.get(period_key):
            bot.send_message(chat_id, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        config_url = configs_db[period_key].pop(0)
        
        user_data = users_db.get(str(user_id))
        if user_data:
            user_data['config_url'] = config_url
            user_data['config_period'] = period_key
            save_data('users.json', users_db)

        save_data('configs.json', configs_db)
    
    bot.send_message(chat_id, 
                     f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ **{period.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                     f"üîë **–í–∞—à –∫–æ–Ω—Ñ–∏–≥:** {config_url}\n\n"
                     "üí° –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
                     parse_mode='Markdown')

def get_config_period_display(period):
    if period == '1_month': return "1 –º–µ—Å—è—Ü"
    if period == '2_months': return "2 –º–µ—Å—è—Ü–∞"
    if period == '3_months': return "3 –º–µ—Å—è—Ü–∞"
    return period

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = str(message.chat.id)
    referrer_id = None
    
    if len(message.text.split()) > 1:
        try:
            referrer_id = str(int(message.text.split()[1]))
        except ValueError:
            pass
        
    with DB_LOCK:
        if user_id not in users_db:
            users_db[user_id] = {
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'balance': 0,
                'subscription_end': None,
                'referrer_id': None,
                'referral_count': 0,
                'config_url': None,
                'config_period': None,
                'is_banned': False
            }
            
            if referrer_id and referrer_id != user_id and referrer_id in users_db:
                users_db[user_id]['referrer_id'] = referrer_id
                
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
                users_db[referrer_id]['referral_count'] += 1
                users_db[referrer_id]['balance'] += Config.REFERRAL_BONUS_REFERRER
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É (–Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
                add_subscription_time(user_id, Config.REFERRAL_BONUS_DAYS)
                
                bot.send_message(referrer_id, f"üéÅ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {Config.REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.")
                bot.send_message(message.chat.id, 
                                 f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: {Config.REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.", 
                                 reply_markup=user_keyboard())
                save_data('users.json', users_db)
                return
            
            save_data('users.json', users_db)

    bot.send_message(message.chat.id, 
                     "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN-–∫–æ–Ω—Ñ–∏–≥–æ–≤.", 
                     reply_markup=user_keyboard())

@bot.message_handler(func=lambda message: message.text in ["üíé –ë–∞–ª–∞–Ω—Å", "üåê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞"])
def handle_user_menu(message):
    user_id = str(message.chat.id)
    
    with DB_LOCK:
        user_data = users_db.get(user_id)
        if not user_data:
            start_message(message)
            return
        
        if user_data.get('is_banned'):
            bot.send_message(user_id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return

    if message.text == "üíé –ë–∞–ª–∞–Ω—Å":
        with DB_LOCK:
            balance = users_db[user_id]['balance']
        bot.send_message(user_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{balance} ‚ÇΩ**", parse_mode='Markdown')

    elif message.text == "üåê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏":
        days_left = get_subscription_days_left(user_id)
        with DB_LOCK:
            config_url = users_db[user_id].get('config_url')
            config_period = users_db[user_id].get('config_period')

        if days_left > 0:
            markup = types.InlineKeyboardMarkup()
            
            if config_url:
                period_display = get_config_period_display(config_period)
                markup.add(types.InlineKeyboardButton(f"üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ ({period_display})", callback_data="show_my_config"))
                markup.add(types.InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å (—É–¥–∞–ª–∏—Ç—å) —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥", callback_data="reset_my_config"))
                bot.send_message(user_id, 
                                 f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.\n"
                                 "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å.", 
                                 reply_markup=markup)
            else:
                markup.add(types.InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_new_config"))
                bot.send_message(user_id, 
                                 f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.\n"
                                 "–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", 
                                 reply_markup=markup)
        else:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=buy_keyboard())

    elif message.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=buy_keyboard())

    elif message.text == "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
        with DB_LOCK:
            referral_count = users_db[user_id].get('referral_count', 0)
        
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        
        bot.send_message(user_id, 
                         f"ü§ù **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n`{referral_link}`\n\n"
                         f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{referral_count}**\n"
                         f"üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ **{Config.REFERRAL_BONUS_REFERRER} ‚ÇΩ** –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.", 
                         parse_mode='Markdown')

    elif message.text == "üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        bot.send_message(user_id, f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {Config.ADMIN_USERNAME}")

@bot.message_handler(commands=['admin'])
def admin_panel_command(message):
    if is_admin(message.chat.id):
        bot.send_message(message.chat.id, "üîê **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**", reply_markup=admin_keyboard(), parse_mode='Markdown')

def buy_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for period, price in Config.PRICES.items():
        markup.add(types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –Ω–∞ {get_config_period_display(period)} ({price} ‚ÇΩ)", callback_data=f"choose_period_{period}"))
    return markup

def payment_methods_keyboard(period, amount, user_balance):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    markup.add(types.InlineKeyboardButton(f"‚≠êÔ∏è –û–ø–ª–∞—Ç–∞ Stars (–ü—Ä–∏–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", callback_data=f"pay_stars_{period}"))
    
    needed_amount = max(0, amount - user_balance)
    
    if user_balance >= amount:
        markup.add(types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ)", callback_data=f"pay_balance_{period}"))
    else:
        markup.add(types.InlineKeyboardButton(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. (–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {needed_amount} ‚ÇΩ)", callback_data="no_funds_alert"))
    
    markup.add(types.InlineKeyboardButton(f"üí∞ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({amount} ‚ÇΩ)", callback_data=f"pay_card_{period}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_subscription_menu"))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.message.chat.id)
    call_data = call.data
    
    if call_data == "admin_menu":
        if is_admin(call.message.chat.id):
            bot.edit_message_text("üîê **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**", call.message.chat.id, call.message.message_id, reply_markup=admin_keyboard(), parse_mode='Markdown')
            bot.answer_callback_query(call.id)
            return
        
    if not is_admin(call.message.chat.id) and call_data.startswith('admin_'):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if call_data.startswith("choose_period_"):
        period_data = call_data.split("_")[2]
        amount, _ = get_price_data(period_data)
        
        with DB_LOCK:
            user_balance = users_db.get(user_id, {}).get('balance', 0)
        
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ **{get_config_period_display(period_data)}** –∑–∞ **{amount} ‚ÇΩ**.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
                              call.message.chat.id, 
                              call.message.message_id, 
                              reply_markup=payment_methods_keyboard(period_data, amount, user_balance),
                              parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        
    elif call_data == "buy_subscription_menu":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", call.message.chat.id, call.message.message_id, reply_markup=buy_keyboard())
        bot.answer_callback_query(call.id)

    elif call_data == "no_funds_alert":
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")

    elif call_data.startswith("pay_balance_"):
        period_data = call_data.split("_")[2]
        amount, days = get_price_data(period_data)
        
        with DB_LOCK:
            user_data = users_db.get(user_id)
            if not user_data:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–∂–º–∏—Ç–µ /start.")
                return

            user_balance = user_data.get('balance', 0)

            if user_balance < amount:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
                return

            if not configs_db.get(period_data) or not configs_db.get(period_data):
                bot.answer_callback_query(call.id, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                return

            user_data['balance'] -= amount
            save_data('users.json', users_db)

        add_subscription_time(user_id, days)
        send_config_to_user(call.message.chat.id, user_id, period_data)

        bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)

    elif call_data.startswith("pay_card_"):
        period_data = call_data.split("_")[2]
        amount, _ = get_price_data(period_data)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{period_data}_{amount}"))
        
        bot.edit_message_text(f"üí≥ **–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π**\n\n"
                              f"–°—É–º–º–∞: **{amount} ‚ÇΩ**\n"
                              f"–ö–∞—Ä—Ç–∞: `{Config.CARD_NUMBER}`\n"
                              f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{Config.CARD_HOLDER}`\n\n"
                              f"**–í–Ω–∏–º–∞–Ω–∏–µ!** –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.", 
                              call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif call_data.startswith("paid_"):
        _, period, amount = call_data.split("_")
        amount = int(amount)
        
        with DB_LOCK:
            payment_id = str(len(payments_db) + 1)
            payments_db[payment_id] = {
                'user_id': user_id,
                'period': period,
                'amount': amount,
                'status': 'pending',
                'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'screenshot_id': None
            }
            save_data('payments.json', payments_db)

        msg = bot.send_message(call.message.chat.id, 
                         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.")
        bot.register_next_step_handler(msg, process_screenshot, payment_id)
        bot.answer_callback_query(call.id)

    elif call_data.startswith("pay_stars_"):
        period_data = call_data.split("_")[2]
        amount, _ = get_price_data(period_data)
        
        stars_amount = math.ceil(amount / Config.STARS_TO_RUB)
        
        bot.answer_callback_query(call.id, 
                                  f"–û–ø–ª–∞—Ç–∞ Stars —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è {stars_amount} Stars.", 
                                  show_alert=True)
    
    elif call_data == "get_new_config":
        days_left = get_subscription_days_left(user_id)
        if days_left <= 0:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        with DB_LOCK:
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π (3 –º–µ—Å—è—Ü–∞ > 2 –º–µ—Å—è—Ü–∞ > 1 –º–µ—Å—è—Ü)
            active_period = None
            max_days = 0
            for period, days in Config.PERIOD_TO_DAYS.items():
                if days <= days_left and days > max_days:
                    active_period = period
                    max_days = days
            
            if not active_period:
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return

        send_config_to_user(call.message.chat.id, user_id, active_period)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.")

    elif call_data == "show_my_config":
        with DB_LOCK:
            config_url = users_db.get(user_id, {}).get('config_url')
        
        if config_url:
            bot.send_message(call.message.chat.id, f"üîë **–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥:**\n`{config_url}`", parse_mode='Markdown')
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ.")

    elif call_data == "reset_my_config":
        with DB_LOCK:
            user_data = users_db.get(user_id)
            if user_data and user_data.get('config_url'):
                user_data['config_url'] = None
                user_data['config_period'] = None
                save_data('users.json', users_db)
                bot.answer_callback_query(call.id, "‚úÖ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π.")
                bot.edit_message_text("‚úÖ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π.", call.message.chat.id, call.message.message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥", callback_data="get_new_config")))
            else:
                bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞.")

    elif call_data == "admin_manage_configs":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_add_config"))
        keyboard.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete_config"))
        keyboard.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_configs_status"))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        bot.edit_message_text("‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif call_data == "admin_configs_status":
        with DB_LOCK:
            status_text = "üìä **–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥–æ–≤:**\n\n"
            total = 0
            for period, configs in configs_db.items():
                count = len(configs)
                status_text += f"**{get_config_period_display(period)}**: {count} —à—Ç.\n"
                total += count
            status_text += f"\n**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ**: {total} —à—Ç."
        
        bot.edit_message_text(status_text, call.message.chat.id, call.message.message_id, reply_markup=back_to_admin_keyboard(), parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif call_data == "admin_add_config":
        msg = bot.send_message(call.message.chat.id, 
                               "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤**\n\n"
                               "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
                               "**–§–æ—Ä–º–∞—Ç:** `[–ø–µ—Ä–∏–æ–¥]`\n`[—Å—Å—ã–ª–∫–∞1]`\n`[—Å—Å—ã–ª–∫–∞2]`\n\n"
                               "**–ü—Ä–∏–º–µ—Ä:**\n`1_month`\n`https://vpn.link/1`\n`https://vpn.link/2`",
                               parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_add_config)
        bot.answer_callback_query(call.id)

    elif call_data == "admin_delete_config":
        msg = bot.send_message(call.message.chat.id, 
                               "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞**\n\n"
                               "–í–≤–µ–¥–∏—Ç–µ **–ø–µ—Ä–∏–æ–¥** –∏ **—Å—Å—ã–ª–∫—É** –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
                               "**–§–æ—Ä–º–∞—Ç:** `[–ø–µ—Ä–∏–æ–¥] [—Å—Å—ã–ª–∫–∞]`\n\n"
                               "**–ü—Ä–∏–º–µ—Ä:** `1_month https://vpn.link/1`",
                               parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_delete_config)
        bot.answer_callback_query(call.id)

    elif call_data == "admin_manage_users":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üîé –ù–∞–π—Ç–∏/–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"))
        keyboard.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_ban_user"))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        bot.edit_message_text("üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    
    elif call_data.startswith("admin_confirm_") or call_data.startswith("admin_reject_"):
        action, payment_id = call_data.split("_")[1:3]
        
        with DB_LOCK:
            payment = payments_db.get(payment_id)
            if not payment:
                bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if payment['status'] != 'pending':
                bot.answer_callback_query(call.id, f"‚ùå –ü–ª–∞—Ç–µ–∂ —É–∂–µ {payment['status']}.")
                return

            user_id_p = payment['user_id']
            period = payment['period']
            amount, days = get_price_data(period)
            
            if action == 'confirm':
                payment['status'] = 'confirmed'
                add_subscription_time(user_id_p, days)
                save_data('payments.json', payments_db)
                
                send_config_to_user(user_id_p, user_id_p, period)
                
                bot.send_message(user_id_p, f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ ({amount} ‚ÇΩ) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ **{get_config_period_display(period)}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", parse_mode='Markdown')
                bot.edit_message_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ #{payment_id} **–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω**.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_p} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.", call.message.chat.id, call.message.message_id)

            elif action == 'reject':
                payment['status'] = 'rejected'
                save_data('payments.json', payments_db)
                bot.send_message(user_id_p, f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ ({amount} ‚ÇΩ) –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.", parse_mode='Markdown')
                bot.edit_message_text(f"‚ùå –ü–ª–∞—Ç–µ–∂ #{payment_id} **–æ—Ç–∫–ª–æ–Ω–µ–Ω**.", call.message.chat.id, call.message.message_id)
                
        bot.answer_callback_query(call.id)

def process_screenshot(message, payment_id):
    if not message.photo:
        msg = bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(msg, process_screenshot, payment_id)
        return

    screenshot_id = message.photo[-1].file_id

    with DB_LOCK:
        payment = payments_db.get(payment_id)
        if not payment or payment['status'] != 'pending':
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è.")
            return

        payment['screenshot_id'] = screenshot_id
        save_data('payments.json', payments_db)

    amount = payment['amount']
    user_id = payment['user_id']
    period = payment['period']
    
    confirm_keyboard = types.InlineKeyboardMarkup(row_width=2)
    confirm_keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
    )
    
    bot.send_photo(Config.ADMIN_ID, 
                   screenshot_id, 
                   caption=f"üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É!**\n\n"
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
                           f"–ü–µ—Ä–∏–æ–¥: **{get_config_period_display(period)}**\n"
                           f"–°—É–º–º–∞: **{amount} ‚ÇΩ**\n",
                   parse_mode='Markdown', 
                   reply_markup=confirm_keyboard)
    
    bot.send_message(message.chat.id, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

def process_add_config(message):
    if not is_admin(message.chat.id): return
    
    parts = message.text.split('\n')
    if len(parts) < 2:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, process_add_config)
        return

    period = parts[0].strip()
    config_urls = [url.strip() for url in parts[1:] if url.strip()]
    
    if period not in Config.PRICES:
        msg = bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(Config.PRICES.keys())}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, process_add_config)
        return

    added_count = 0
    duplicate_count = 0
    
    with DB_LOCK:
        if period not in configs_db:
            configs_db[period] = []

        existing_urls = set(configs_db[period])
        
        for url in config_urls:
            if url not in existing_urls:
                configs_db[period].append(url)
                existing_urls.add(url)
                added_count += 1
            else:
                duplicate_count += 1
        
        save_data('configs.json', configs_db)
    
    bot.send_message(message.chat.id, 
                     f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤:**\n"
                     f"–ü–µ—Ä–∏–æ–¥: **{get_config_period_display(period)}**\n"
                     f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count} —à—Ç.\n"
                     f"üö´ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count} —à—Ç.", 
                     parse_mode='Markdown',
                     reply_markup=back_to_admin_keyboard())

def process_delete_config(message):
    if not is_admin(message.chat.id): return
    
    parts = message.text.strip().split(maxsplit=1)
    
    if len(parts) != 2:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ `[–ø–µ—Ä–∏–æ–¥] [—Å—Å—ã–ª–∫–∞]`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, process_delete_config)
        return

    period, url_to_delete = parts
    
    if period not in Config.PRICES:
        msg = bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(Config.PRICES.keys())}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, process_delete_config)
        return

    with DB_LOCK:
        if period not in configs_db or url_to_delete not in configs_db[period]:
            bot.send_message(message.chat.id, f"‚ùå –ö–æ–Ω—Ñ–∏–≥ `{url_to_delete}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ **{get_config_period_display(period)}**.", parse_mode='Markdown', reply_markup=back_to_admin_keyboard())
            return

        configs_db[period].remove(url_to_delete)
        save_data('configs.json', configs_db)
    
    bot.send_message(message.chat.id, f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ `{url_to_delete}` –Ω–∞ **{get_config_period_display(period)}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode='Markdown', reply_markup=back_to_admin_keyboard())

@bot.message_handler(func=lambda message: message.text in ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üí∞ –ü–ª–∞—Ç–µ–∂–∏", "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"] and is_admin(message.chat.id))
def handle_admin_menu(message):
    chat_id = message.chat.id
    
    if message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        with DB_LOCK:
            total_users = len(users_db)
            active_subs = sum(1 for uid in users_db if get_subscription_days_left(uid) > 0)
            total_balance = sum(user.get('balance', 0) for user in users_db.values())
            pending_payments = sum(1 for p in payments_db.values() if p['status'] == 'pending')
        
        bot.send_message(chat_id, 
                         f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                         f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
                         f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: **{active_subs}**\n"
                         f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_balance} ‚ÇΩ**\n"
                         f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: **{pending_payments}**",
                         parse_mode='Markdown')

    elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        msg = bot.send_message(chat_id, "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        bot.register_next_step_handler(msg, process_broadcast_text)

    elif message.text == "üí∞ –ü–ª–∞—Ç–µ–∂–∏":
        with DB_LOCK:
            pending_payments = [p for p in payments_db.values() if p['status'] == 'pending']
        
        if not pending_payments:
            bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        for p in pending_payments:
            payment_id = [k for k, v in payments_db.items() if v == p][0]
            user_id_p = p['user_id']
            period = p['period']
            amount = p['amount']
            screenshot_id = p['screenshot_id']

            confirm_keyboard = types.InlineKeyboardMarkup(row_width=2)
            confirm_keyboard.add(
                types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
            )
            
            caption = (f"üîî **–û–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ #{payment_id}**\n\n"
                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id_p}`\n"
                       f"–ü–µ—Ä–∏–æ–¥: **{get_config_period_display(period)}**\n"
                       f"–°—É–º–º–∞: **{amount} ‚ÇΩ**\n"
                       f"–°–∫—Ä–∏–Ω—à–æ—Ç: {'‚úÖ –ï—Å—Ç—å' if screenshot_id else '‚ùå –ù–µ—Ç'}")
            
            if screenshot_id:
                bot.send_photo(chat_id, screenshot_id, caption=caption, parse_mode='Markdown', reply_markup=confirm_keyboard)
            else:
                bot.send_message(chat_id, caption, parse_mode='Markdown', reply_markup=confirm_keyboard)

    elif message.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üîé –ù–∞–π—Ç–∏/–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"))
        keyboard.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_ban_user"))
        bot.send_message(chat_id, "üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**", reply_markup=keyboard, parse_mode='Markdown')

def process_broadcast_text(message):
    if not is_admin(message.chat.id): return
    
    broadcast_text = message.text
    sent_count = 0
    failed_count = 0
    
    bot.send_message(message.chat.id, "üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for uid in list(users_db.keys()):
        try:
            bot.send_message(uid, f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{broadcast_text}", parse_mode='Markdown')
            sent_count += 1
            time.sleep(Config.BROADCAST_DELAY_SEC)
        except Exception as e:
            failed_count += 1
            
    bot.send_message(message.chat.id, 
                    f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                    f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed_count}",
                    reply_markup=admin_keyboard())

@bot.message_handler(commands=['manage'])
def handle_manage_command(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/manage [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`.")
        return
        
    try:
        user_id_target = parts[1]
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    display_user_info(message.chat.id, user_id_target)

def display_user_info(admin_chat_id, target_id):
    with DB_LOCK:
        user_data = users_db.get(target_id)

    if not user_data:
        bot.send_message(admin_chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='Markdown')
        return

    days_left = get_subscription_days_left(target_id)
    sub_end = user_data.get('subscription_end') or '–ù–µ—Ç'
    
    info_text = (f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {target_id}**\n\n"
                 f"–ò–º—è: **{user_data.get('first_name', 'N/A')}**\n"
                 f"Username: **@{user_data.get('username', 'N/A')}**\n"
                 f"–ë–∞–ª–∞–Ω—Å: **{user_data.get('balance', 0)} ‚ÇΩ**\n"
                 f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: **{sub_end}** ({days_left} –¥–Ω–µ–π)\n"
                 f"–ö–æ–Ω—Ñ–∏–≥: **{'‚úÖ –ï—Å—Ç—å' if user_data.get('config_url') else '‚ùå –ù–µ—Ç'}**\n"
                 f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: **{'–î–∞' if user_data.get('is_banned') else '–ù–µ—Ç'}**")

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{target_id}"))
    markup.add(types.InlineKeyboardButton("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_sub_{target_id}"))
    markup.add(types.InlineKeyboardButton(f"{'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if user_data.get('is_banned') else 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}", callback_data=f"admin_toggle_ban_{target_id}"))

    bot.send_message(admin_chat_id, info_text, reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_edit_balance_') or call.data.startswith('admin_edit_sub_') or call.data.startswith('admin_toggle_ban_'))
def handle_admin_edit_callbacks(call):
    if not is_admin(call.message.chat.id): return
    
    parts = call.data.split('_')
    action = parts[2]
    target_id = parts[3]
    
    if action == 'balance':
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{target_id}** (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_edit_balance, target_id)
    
    elif action == 'sub':
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è **–¥–æ–±–∞–≤–ª–µ–Ω–∏—è** –∫ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{target_id}** (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_edit_subscription, target_id)

    elif action == 'ban':
        with DB_LOCK:
            user_data = users_db.get(target_id)
            if not user_data:
                bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            is_banned = user_data.get('is_banned', False)
            user_data['is_banned'] = not is_banned
            save_data('users.json', users_db)
            
            status_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if not is_banned else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} {status_text}.")
            bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{target_id}** —É—Å–ø–µ—à–Ω–æ **{status_text}**.", parse_mode='Markdown')
            display_user_info(call.message.chat.id, target_id)
            bot.send_message(target_id, f"üîî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª **{status_text}** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='Markdown')

def process_edit_balance(message, target_id):
    if not is_admin(message.chat.id): return
    
    try:
        new_balance = int(message.text.strip())
        if new_balance < 0:
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, process_edit_balance, target_id)
        return

    with DB_LOCK:
        if target_id not in users_db:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        users_db[target_id]['balance'] = new_balance
        save_data('users.json', users_db)
    
    bot.send_message(message.chat.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{target_id}** –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{new_balance} ‚ÇΩ**.", parse_mode='Markdown')
    display_user_info(message.chat.id, target_id)
    bot.send_message(target_id, f"üîî –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{new_balance} ‚ÇΩ**.", parse_mode='Markdown')

def process_edit_subscription(message, target_id):
    if not is_admin(message.chat.id): return
    
    try:
        add_days = int(message.text.strip())
        if add_days < 1:
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, process_edit_subscription, target_id)
        return

    add_subscription_time(target_id, add_days)
    
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{target_id}** –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ **{add_days}** –¥–Ω–µ–π.", parse_mode='Markdown')
    display_user_info(message.chat.id, target_id)
    bot.send_message(target_id, f"üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ **{add_days}** –¥–Ω–µ–π.", parse_mode='Markdown')

def signal_handler(signum, frame):
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    bot.stop_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        if Config.ADMIN_ID == 8320218178:
            print("–í–Ω–∏–º–∞–Ω–∏–µ: ADMIN_ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –≤ —Ñ–∞–π–ª–µ.")
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
