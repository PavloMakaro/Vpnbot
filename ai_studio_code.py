import telebot
from telebot import types
import logging
import json
import time
import os

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
# –ù–û–í–´–ô –¢–û–ö–ï–ù
BOT_TOKEN = "8217097426:AAEXU3BJ55Bkx-cfOEtRTxkPaOYC1zvRfO8" 
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à ID)
ADMIN_ID = 8320218178 
# –í–∞—à –Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_USERNAME = "@Gl1ch555"
# –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (Ozon Bank Makarov Pavel Alexandrovich)
CARD_NUMBER = "2204320690808227"
# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
CARD_HOLDER_INFO = "Ozon Bank, –ú–∞–∫–∞—Ä–æ–≤ –ü–∞–≤–µ–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"
# –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
VPN_SERVER_NAME = "X-Ray Server (–ì–µ—Ä–º–∞–Ω–∏—è)"
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–Ω—Ñ–∏–≥–∏)
DB_FILE = "db.json"
# –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
PRICES = {
    "1_month": {"price": 50, "days": 30, "duration": 30 * 24 * 3600},
    "2_months": {"price": 90, "days": 60, "duration": 60 * 24 * 3600},
    "3_months": {"price": 120, "days": 90, "duration": 90 * 24 * 3600},
}
# –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
REFERRAL_BONUS_AMOUNT = 25  # —Ä—É–±–ª–∏
REFERRAL_BONUS_DAYS = 7  # –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(BOT_TOKEN)

# --- –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° DB ---
def load_db():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"users": {}, "configs": {}, "pending_payments": {}}
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ DB. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω.")
        return {"users": {}, "configs": {}, "pending_payments": {}}

def save_db(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    db = load_db()
    user_id_str = str(user_id)
    if user_id_str not in db["users"]:
        db["users"][user_id_str] = {
            "subscription_end": 0,
            "referral_code": user_id_str,
            "referred_by": None,
            "balance": 0,
            "referrals_count": 0,
            "last_config_type": None, 
            "username": None
        }
        if user_id == ADMIN_ID:
             db["users"][user_id_str]["username"] = SUPPORT_USERNAME.strip('@')
        save_db(db)
    return db["users"][user_id_str]

def update_user(user_id, **kwargs):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = load_db()
    user_id_str = str(user_id)
    if user_id_str not in db["users"]:
        get_user(user_id)
    db["users"][user_id_str].update(kwargs)
    save_db(db)

def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (True/False)"""
    user = get_user(user_id)
    return user["subscription_end"] > time.time()

def add_subscription(user_id, duration_seconds):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = get_user(user_id)
    current_end = user["subscription_end"]
    
    start_time = max(time.time(), current_end)
    new_end = start_time + duration_seconds
    
    update_user(user_id, subscription_end=new_end)
    return new_end

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Reply)"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üöÄ –ö—É–ø–∏—Ç—å VPN", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    keyboard.row("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    return keyboard

def get_admin_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Reply)"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚úÖ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
    keyboard.row("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏")
    keyboard.row("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
    return keyboard

def get_buy_options_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ (Inline)"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key, data in PRICES.items():
        text = f"{data['days']} –¥–Ω–µ–π - {data['price']} ‚ÇΩ"
        keyboard.add(types.InlineKeyboardButton(text, callback_data=f"buy_{key}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def get_profile_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (Inline)"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if check_subscription(user_id):
        keyboard.add(types.InlineKeyboardButton("üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def get_admin_config_menu_keyboard():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ (Inline)"""
    db = load_db()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for key, data in PRICES.items():
        days = data['days']
        status = "‚úÖ –ï—Å—Ç—å" if key in db["configs"] else "‚ùå –ù–µ—Ç"
        text = f"{status} –ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {days} –¥–Ω–µ–π"
        keyboard.add(types.InlineKeyboardButton(text, callback_data=f"admin_cfg_edit_{key}"))
        
    keyboard.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu"))
    return keyboard


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô (–°–¢–ï–ü–´ –î–õ–Ø TELEBOT) ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username
    if username:
        update_user(user_id, username=username)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if message.text.startswith('/start '):
        referred_by_id = message.text.split(' ')[1]
        
        user = get_user(user_id)
        if user["referred_by"] is None and referred_by_id != str(user_id):
            referrer = get_user(referred_by_id)
            if referrer:
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                new_balance = referrer["balance"] + REFERRAL_BONUS_AMOUNT
                new_end_time = add_subscription(referred_by_id, REFERRAL_BONUS_DAYS * 24 * 3600)
                new_referrals = referrer["referrals_count"] + 1
                
                update_user(referred_by_id, 
                            balance=new_balance,
                            referrals_count=new_referrals)
                
                update_user(user_id, referred_by=referred_by_id)
                
                bot.send_message(
                    referred_by_id,
                    f"üéâ **–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or user_id} "
                    f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{REFERRAL_BONUS_AMOUNT} ‚ÇΩ** –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ **{REFERRAL_BONUS_DAYS} –¥–Ω–µ–π** –ø–æ–¥–ø–∏—Å–∫–∏ "
                    f"(–¥–æ {time.strftime('%d.%m.%Y', time.localtime(new_end_time))})!",
                    parse_mode="Markdown"
                )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üëã **–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!**\n"
        f"–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN ({VPN_SERVER_NAME}).\n"
        f"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    
    bot.send_message(user_id, text, reply_markup=get_main_keyboard(), parse_mode="Markdown")

@bot.message_handler(commands=['admin'])
def admin_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω–∫—É!**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="Markdown"
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ (Reply-–∫–Ω–æ–ø–∫–∏) ---

@bot.message_handler(func=lambda message: message.text == "üöÄ –ö—É–ø–∏—Ç—å VPN")
def buy_vpn_menu(message):
    """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ VPN"""
    text = (
        "üí∞ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:**\n"
        f"–°–µ—Ä–≤–µ—Ä: **{VPN_SERVER_NAME}**"
    )
    bot.send_message(message.chat.id, text, reply_markup=get_buy_options_keyboard(), parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
def personal_account(message):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = get_user(user_id)
    
    is_active = check_subscription(user_id)
    status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    end_date_text = "‚Äî"
    if is_active:
        end_date_text = time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(user["subscription_end"]))
        
    text = (
        "üë§ **–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n"
        f"**–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** {status_text}\n"
        f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:** {end_date_text}\n"
        f"**–í–∞—à –±–∞–ª–∞–Ω—Å (—Ä—É–±):** {user['balance']} ‚ÇΩ\n"
        "\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    
    bot.send_message(message.chat.id, text, reply_markup=get_profile_keyboard(user_id), parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support_info(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    text = (
        "üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
        f"–ù–∏–∫: **{SUPPORT_USERNAME}**"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
def referral_system(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    user = get_user(message.from_user.id)
    
    referral_link = f"https://t.me/{bot.get_me().username}?start={user['referral_code']}"
    
    text = (
        "üéÅ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
        f"  - **{REFERRAL_BONUS_AMOUNT} ‚ÇΩ** –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
        f"  - **{REFERRAL_BONUS_DAYS} –¥–Ω–µ–π** –ø–æ–¥–ø–∏—Å–∫–∏\n"
        f"\n"
        f"**–í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:** {user['referrals_count']} —á–µ–ª.\n"
        f"**–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:** `{referral_link}`"
    )
    
    bot.send_message(message.chat.id, text, reply_markup=get_profile_keyboard(message.from_user.id), parse_mode="Markdown")

# –ê–¥–º–∏–Ω–∫–∞: –í—ã—Ö–æ–¥
@bot.message_handler(func=lambda message: message.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏" and message.from_user.id == ADMIN_ID)
def exit_admin(message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    bot.send_message(message.chat.id, "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.", reply_markup=get_main_keyboard())

# –ê–¥–º–∏–Ω–∫–∞: –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏" and message.from_user.id == ADMIN_ID)
def admin_pending_payments(message):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º –ø–ª–∞—Ç–µ–∂–æ–º"""
    db = load_db()
    pending_payments = db["pending_payments"]
    
    if not pending_payments:
        return bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        
    text = "‚è≥ **–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∏:**\n"
    for payment_id, data in pending_payments.items():
        user_id = data['user_id']
        username = data.get('username', 'N/A')
        plan_key = data['plan_key']
        
        text += (
            f"\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n"
            f"–û—Ç: @{username} (ID: `{user_id}`)\n"
            f"–û–∂–∏–¥–∞–µ—Ç: {PRICES.get(plan_key, {}).get('days', '?')} –¥–Ω–µ–π –∑–∞ {PRICES.get(plan_key, {}).get('price', '?')} ‚ÇΩ\n"
            f"(–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã—à–µ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏)"
        )
        
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# –ê–¥–º–∏–Ω–∫–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
@bot.message_handler(func=lambda message: message.text == "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏" and message.from_user.id == ADMIN_ID)
def admin_config_menu(message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏"""
    bot.send_message(
        message.chat.id,
        "üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:",
        reply_markup=get_admin_config_menu_keyboard(),
        parse_mode="Markdown"
    )

# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –ü–†–û–¶–ï–°–°–ê –û–ü–õ–ê–¢–´ –ò –ö–û–ù–§–ò–ì–û–í (TELEBOT) ---

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def process_buy_callback(call):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
    plan_key = call.data.split('_')[1]
    
    if plan_key not in PRICES:
        return bot.answer_callback_query(call.id, "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    plan_data = PRICES[plan_key]
    price = plan_data['price']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ –±–∞–∑–µ
    update_user(call.from_user.id, last_config_type=plan_key)
    
    text = (
        f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {plan_data['days']} –¥–Ω–µ–π ({price} ‚ÇΩ)**\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É **{price} ‚ÇΩ** –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n"
        f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** `{CARD_NUMBER}`\n"
        f"**–ë–∞–Ω–∫/–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** `{CARD_HOLDER_INFO}`\n"
        "\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ!** –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ —á–∞—Ç.\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥."
    )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª, –≥–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"wait_scr_{plan_key}"))
    keyboard.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('wait_scr_'))
def process_paid_and_waiting(call):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    plan_key = call.data.split('_')[2]
    
    msg = bot.edit_message_text("üñºÔ∏è **–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.**\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –∫–∞–∫ *–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ* –∏–ª–∏ *—Ñ–∞–π–ª*.", 
                                call.message.chat.id, call.message.message_id, parse_mode="Markdown")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –Ω–∞ –ø—Ä–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è plan_key
    bot.register_next_step_handler(msg, process_screenshot, plan_key=plan_key)
    bot.answer_callback_query(call.id)

def process_screenshot(message, plan_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É"""
    user_id = message.from_user.id
    price = PRICES[plan_key]['price']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if message.content_type not in ['photo', 'document']:
        msg = bot.send_message(user_id, "‚ùå –≠—Ç–æ –Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª.")
        return bot.register_next_step_handler(msg, process_screenshot, plan_key=plan_key)

    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    
    if not file_id:
        msg = bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return bot.register_next_step_handler(msg, process_screenshot, plan_key=plan_key)
        
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    payment_id = f"{user_id}_{int(time.time())}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ
    db = load_db()
    db["pending_payments"][payment_id] = {
        "user_id": user_id,
        "username": message.from_user.username,
        "plan_key": plan_key,
        "file_id": file_id,
        "file_type": file_type
    }
    save_db(db)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    admin_text = (
        f"üîî **–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ!** (ID: `{payment_id}`)\n"
        f"**–û—Ç:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} (ID: `{user_id}`)\n"
        f"**–¢–∞—Ä–∏—Ñ:** {PRICES[plan_key]['days']} –¥–Ω–µ–π\n"
        f"**–°—É–º–º–∞:** {price} ‚ÇΩ"
    )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{payment_id}")
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    if file_type == "photo":
        bot.send_photo(ADMIN_ID, file_id, caption=admin_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        bot.send_document(ADMIN_ID, file_id, caption=admin_text, reply_markup=keyboard, parse_mode="Markdown")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(user_id,
        "‚úÖ **–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!**\n"
        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5-10 –º–∏–Ω—É—Ç)."
    )

@bot.callback_query_handler(func=lambda call: call.data == 'get_config')
def process_get_config(call):
    """–í—ã–¥–∞—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    user_id = call.from_user.id
    user = get_user(user_id)
    
    if not check_subscription(user_id):
        return bot.answer_callback_query(call.id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ.", show_alert=True)
        
    config_key = user['last_config_type']
    db = load_db()
    
    if not config_key or config_key not in db["configs"]:
        return bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∫–æ–Ω—Ñ–∏–≥–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        
    config_data = db["configs"][config_key]
    
    text = (
        f"üîë **–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ ({PRICES[config_key]['days']} –¥–Ω–µ–π)**\n"
        f"**–°–µ—Ä–≤–µ—Ä:** {VPN_SERVER_NAME}\n"
        f"\n"
        f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config_data['link']}\n"
        f"üìã **–ö–æ–¥ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è):** `{config_data['code']}`\n"
        f"\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:**\n"
        f"{config_data['description']}\n"
        f"\n"
        f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:** {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(user['subscription_end']))}"
    )
    
    bot.send_message(user_id, text, parse_mode="Markdown")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def process_main_menu(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–≤–∏—Å—è—â–∏—Ö" –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    send_welcome(call.message)
    bot.answer_callback_query(call.id)


# --- –ê–î–ú–ò–ù–ö–ê: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACKS (TELEBOT) ---

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_confirm_') and call.from_user.id == ADMIN_ID)
def admin_confirm_payment(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    payment_id = call.data.split('_')[2]
        
    db = load_db()
    payment_data = db["pending_payments"].pop(payment_id, None)
    
    if not payment_data:
        bot.edit_message_caption(call.message.chat.id, call.message.message_id, 
                                 caption=call.message.caption + "\n\n**‚ö†Ô∏è –ü–õ–ê–¢–ï–ñ –£–ñ–ï –ë–´–õ –û–ë–†–ê–ë–û–¢–ê–ù.**", 
                                 reply_markup=None, parse_mode="Markdown")
        return bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    user_id = payment_data['user_id']
    plan_key = payment_data['plan_key']
    
    # 1. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    duration = PRICES[plan_key]["duration"]
    new_end_time = add_subscription(user_id, duration)
    
    # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
    save_db(db)
    
    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ª–æ–≥–∏–∫–∞ —Ç–∞ –∂–µ, —á—Ç–æ –≤ get_config)
    config_data = db["configs"].get(plan_key)
    if config_data:
        config_text = (
            f"üéâ **–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ **{PRICES[plan_key]['days']} –¥–Ω–µ–π** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"\n"
            f"üîë **–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ ({PRICES[plan_key]['days']} –¥–Ω–µ–π)**\n"
            f"**–°–µ—Ä–≤–µ—Ä:** {VPN_SERVER_NAME}\n"
            f"\n"
            f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config_data['link']}\n"
            f"üìã **–ö–æ–¥ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è):** `{config_data['code']}`\n"
            f"\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:**\n"
            f"{config_data['description']}\n"
            f"\n"
            f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:** {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(new_end_time))}"
        )
        try:
            bot.send_message(user_id, config_text, parse_mode="Markdown")
        except telebot.apihelper.ApiTelegramException:
             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
             bot.send_message(ADMIN_ID, f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    bot.edit_message_caption(call.message.chat.id, call.message.message_id, 
                             caption=call.message.caption + "\n\n**‚úÖ –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù –∏ –ö–û–ù–§–ò–ì –í–´–î–ê–ù.**",
                             reply_markup=None,
                             parse_mode="Markdown")
    bot.answer_callback_query(call.id, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_decline_') and call.from_user.id == ADMIN_ID)
def admin_decline_payment(call):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    payment_id = call.data.split('_')[2]
    
    db = load_db()
    payment_data = db["pending_payments"].pop(payment_id, None)
    save_db(db)
    
    if not payment_data:
        bot.edit_message_caption(call.message.chat.id, call.message.message_id, 
                                 caption=call.message.caption + "\n\n**‚ö†Ô∏è –ü–õ–ê–¢–ï–ñ –£–ñ–ï –ë–´–õ –û–ë–†–ê–ë–û–¢–ê–ù.**", 
                                 reply_markup=None, parse_mode="Markdown")
        return bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        
    user_id = payment_data['user_id']
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.send_message(
            user_id,
            "‚ùå **–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.**\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –Ω–µ—á–µ—Ç–∫–∏–º, –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: **{SUPPORT_USERNAME}**",
            parse_mode="Markdown"
        )
    except telebot.apihelper.ApiTelegramException:
         logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    bot.edit_message_caption(call.message.chat.id, call.message.message_id, 
                             caption=call.message.caption + "\n\n**‚ùå –ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù.**",
                             reply_markup=None,
                             parse_mode="Markdown")
    bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

# --- –ê–î–ú–ò–ù–ö–ê: –ö–û–ù–§–ò–ì–ò (TELEBOT) ---

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_cfg_edit_') and call.from_user.id == ADMIN_ID)
def admin_cfg_start_edit(call):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
    config_key = call.data.split('_')[-1]
    plan_data = PRICES[config_key]
    
    msg = bot.edit_message_text(
        f"üîó **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ {plan_data['days']} –¥–Ω–µ–π**\n"
        "–®–∞–≥ 1/3: **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ VPN-–∫–æ–Ω—Ñ–∏–≥** (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É).",
        call.message.chat.id, call.message.message_id
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    bot.register_next_step_handler(msg, admin_cfg_get_link, config_key=config_key)
    bot.answer_callback_query(call.id)

def admin_cfg_get_link(message, config_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥"""
    config_link = message.text
    
    msg = bot.send_message(message.chat.id, 
        "üìã –®–∞–≥ 2/3: **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥–∞** (QR-–∫–æ–¥ –∏–ª–∏ –∫–ª—é—á). "
        "–ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `–ù–ï–¢`."
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
    bot.register_next_step_handler(msg, admin_cfg_get_code, config_key=config_key, config_link=config_link)

def admin_cfg_get_code(message, config_key, config_link):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–Ω—Ñ–∏–≥–∞"""
    code = message.text.upper()
    config_code = "‚Äî" if code == "–ù–ï–¢" else code
    
    msg = bot.send_message(message.chat.id, 
        "üìù –®–∞–≥ 3/3: **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞.** "
        "–≠—Ç–æ –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    bot.register_next_step_handler(msg, admin_cfg_save, config_key=config_key, config_link=config_link, config_code=config_code)

def admin_cfg_save(message, config_key, config_link, config_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞"""
    config_description = message.text
    
    db = load_db()
    db["configs"][config_key] = {
        "link": config_link,
        "code": config_code,
        "description": config_description,
    }
    save_db(db)
    
    plan_data = PRICES[config_key]
    bot.send_message(
        message.chat.id,
        f"‚úÖ **–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {plan_data['days']} –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n"
        f"**–°—Å—ã–ª–∫–∞:** {config_link}\n"
        f"**–ö–æ–¥:** {config_code}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {config_description}",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="Markdown"
    )

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DB –∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞
    load_db() 
    
    # –í telebot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling
    try:
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

