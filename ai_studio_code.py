import telebot
from telebot import types
import json
import time
import datetime
import threading
import os
import subprocess
import signal
import sys

# === –¢–û–ö–ï–ù–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
TOKEN = '8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY'
ADMIN_USERNAME = '@Gl1ch555'
ADMIN_ID = 8320218178  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID!

# === –ÆKASSA ===
PROVIDER_TOKEN = "390540012:LIVE:80557"  # –∏–∑ BotFather –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ÆKassa Live
CURRENCY = "RUB"

SUBSCRIPTION_PERIODS = {
    '1_month': {'price': 50, 'days': 30},
    '2_months': {'price': 90, 'days': 60},
    '3_months': {'price': 120, 'days': 90}
}

REFERRAL_BONUS_NEW_USER = 50
REFERRAL_BONUS_REFERRER = 25
REFERRAL_BONUS_DAYS = 7

bot = telebot.TeleBot(TOKEN)
MAINTENANCE_MODE = False

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def generate_payment_id():
    return str(int(time.time() * 100000))

def get_available_config(period):
    if period not in configs_db:
        return None
    for config in configs_db[period]:
        if not config.get('used', False):
            return config
    return None

def mark_config_used(period, config_link):
    if period not in configs_db:
        return False
    for config in configs_db[period]:
        if config['link'] == config_link:
            config['used'] = True
            save_data('configs.json', configs_db)
            return True
    return False

def get_subscription_days_left(user_id):
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    if not subscription_end:
        return 0
    end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
    now = datetime.datetime.now()
    if end_date <= now:
        return 0
    days_left = (end_date - now).days
    return max(0, days_left)

# === –ß–ï–ö –î–õ–Ø 54-–§–ó ===
def get_provider_data(amount_rub: float, description: str = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN"):
    return json.dumps({
        "receipt": {
            "items": [
                {
                    "description": description[:128],
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount_rub:.2f}",
                        "currency": CURRENCY
                    },
                    "vat_code": 1  # –¥–ª—è —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã—Ö
                }
            ]
        }
    })

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_manage_configs"),
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_confirm_payments"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_manage_user_configs"),
        types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="main_menu")
    )
    return markup

def manage_configs_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_add_config"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete_config"),
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_configs"),
        types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_reset_configs"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    )
    return markup

def choose_period_keyboard(action, back_callback="admin_manage_configs"):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for period_key, period_data in SUBSCRIPTION_PERIODS.items():
        markup.add(types.InlineKeyboardButton(f"{period_data['days']} –¥–Ω–µ–π", callback_data=f"{action}_{period_key}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=back_callback))
    return markup

def confirm_payments_keyboard(payment_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
    )
    return markup

def user_configs_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_user_configs"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user_config"),
        types.InlineKeyboardButton("–ü–µ—Ä–µ–≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_reissue_config_start"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    )
    return markup

def users_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_active_users"),
        types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users"),
        types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_edit_user_start"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    )
    return markup

def user_action_keyboard(target_user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{target_user_id}"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{target_user_id}"),
        types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data=f"admin_view_user_configs_{target_user_id}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")
    )
    return markup

def main_menu_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN üöÄ", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="my_account"),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª", callback_data="support"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ü§ù", callback_data="referral_system")
    )
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†Ô∏è", callback_data="admin_panel"))
    return markup

def buy_vpn_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for period_key, period_data in SUBSCRIPTION_PERIODS.items():
        markup.add(types.InlineKeyboardButton(f"{period_data['days']} –¥–Ω–µ–π ({period_data['price']} ‚ÇΩ)", callback_data=f"choose_period_{period_key}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup

def payment_methods_keyboard(period_key, amount, user_balance):
    markup = types.InlineKeyboardMarkup(row_width=1)
    if user_balance >= amount:
        markup.add(types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ)", callback_data=f"pay_balance_{period_key}"))
    else:
        markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", callback_data=f"pay_yookassa_{period_key}_{amount}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="buy_vpn"))
    return markup

def my_account_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="my_configs"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def my_configs_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    has_active_subscription = False
    if subscription_end:
        end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        if end_date > datetime.datetime.now():
            has_active_subscription = True
    if has_active_subscription:
        markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 30 –¥–Ω–µ–π", callback_data="get_config_1_month"))
        markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 60 –¥–Ω–µ–π", callback_data="get_config_2_months"))
        markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 90 –¥–Ω–µ–π", callback_data="get_config_3_months"))
    else:
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞", callback_data="buy_vpn"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_account"))
    return markup

# === –í–´–î–ê–ß–ê –ö–û–ù–§–ò–ì–ê ===
def send_config_to_user(user_id, period, username, first_name):
    config = get_available_config(period)
    if not config:
        return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
    mark_config_used(period, config['link'])
    config_name = f"{first_name} ({username}) - {SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π"
    if 'used_configs' not in users_db[str(user_id)]:
        users_db[str(user_id)]['used_configs'] = []
    used_config = {
        'config_name': config['name'],
        'config_link': config['link'],
        'config_code': config['code'],
        'period': period,
        'issue_date': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'user_name': f"{first_name} (@{username})"
    }
    users_db[str(user_id)]['used_configs'].append(used_config)
    save_data('users.json', users_db)
    try:
        bot.send_message(user_id, f"üîê **–í–∞—à VPN –∫–æ–Ω—Ñ–∏–≥**\n"
                                 f"üë§ **–ò–º—è:** {config_name}\n"
                                 f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π\n"
                                 f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config['link']}\n"
                                 f"üíæ _–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_",
                         parse_mode='Markdown')
        return True, config
    except Exception as e:
        print(f"Error sending config to user {user_id}: {e}")
        return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}"

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username if message.from_user.username else 'N/A'
    first_name = message.from_user.first_name if message.from_user.first_name else 'N/A'
    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.send_message(message.chat.id, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    if user_id not in users_db:
        referred_by_id = None
        if len(message.text.split()) > 1:
            try:
                potential_referrer_id = message.text.split()[1]
                if potential_referrer_id.isdigit() and potential_referrer_id in users_db and potential_referrer_id != user_id:
                    referred_by_id = potential_referrer_id
                    users_db[potential_referrer_id]['referrals_count'] = users_db[potential_referrer_id].get('referrals_count', 0) + 1
                    users_db[potential_referrer_id]['balance'] = users_db[potential_referrer_id].get('balance', 0) + REFERRAL_BONUS_REFERRER
                    current_end = users_db[potential_referrer_id].get('subscription_end')
                    if current_end:
                        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                    else:
                        current_end = datetime.datetime.now()
                    new_end = current_end + datetime.timedelta(days=REFERRAL_BONUS_DAYS)
                    users_db[potential_referrer_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                    bot.send_message(potential_referrer_id,
                                     f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                                     f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")
                    save_data('users.json', users_db)
            except ValueError:
                pass
        users_db[user_id] = {
            'balance': REFERRAL_BONUS_NEW_USER,
            'subscription_end': None,
            'referred_by': referred_by_id,
            'username': username,
            'first_name': first_name,
            'referrals_count': 0,
            'used_configs': []
        }
        save_data('users.json', users_db)
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\nüéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: {REFERRAL_BONUS_NEW_USER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!"
        if referred_by_id:
            welcome_text += f"\nü§ù –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
        bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu_keyboard(message.from_user.id))
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ VPN Bot!", reply_markup=main_menu_keyboard(message.from_user.id))

@bot.message_handler(commands=['maintenance_on'])
def maintenance_on(message):
    global MAINTENANCE_MODE
    if str(message.from_user.id) == str(ADMIN_ID):
        MAINTENANCE_MODE = True
        bot.send_message(ADMIN_ID, "‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù. –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['maintenance_off'])
def maintenance_off(message):
    global MAINTENANCE_MODE
    if str(message.from_user.id) == str(ADMIN_ID):
        MAINTENANCE_MODE = False
        bot.send_message(ADMIN_ID, "‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù. –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if call.data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))
    elif call.data == "buy_vpn":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=buy_vpn_keyboard())
    elif call.data.startswith("choose_period_"):
        period_data_key = call.data.replace("choose_period_", "")
        amount = SUBSCRIPTION_PERIODS[period_data_key]['price']
        user_balance = users_db.get(user_id, {}).get('balance', 0)
        days_left = get_subscription_days_left(user_id)
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π.\n"
        message_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
        message_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
        if days_left > 0:
            message_text += f"üìÖ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ: {days_left} –¥–Ω–µ–π\n"
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        bot.edit_message_text(message_text,
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=payment_methods_keyboard(period_data_key, amount, user_balance))
    elif call.data.startswith("pay_balance_"):
        period_data_key = call.data.replace("pay_balance_", "")
        amount = SUBSCRIPTION_PERIODS[period_data_key]['price']
        user_info = users_db.get(user_id, {})
        user_balance = user_info.get('balance', 0)
        if user_balance >= amount:
            users_db[user_id]['balance'] = user_balance - amount
            current_end = user_info.get('subscription_end')
            if current_end:
                current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
            else:
                current_end = datetime.datetime.now()
            add_days = SUBSCRIPTION_PERIODS[period_data_key]['days']
            new_end = current_end + datetime.timedelta(days=add_days)
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)
            success, result = send_config_to_user(user_id, period_data_key,
                                                user_info.get('username', 'user'),
                                                user_info.get('first_name', 'User'))
            if success:
                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                      f"üí≥ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {amount} ‚ÇΩ\n"
                                      f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {users_db[user_id]['balance']} ‚ÇΩ\n"
                                      f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                      f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                      chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
            else:
                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                      f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}",
                                      chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
        else:
            needed_amount = amount - user_balance
            bot.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                                  f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
                                  f"üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} ‚ÇΩ\n"
                                  f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {needed_amount} ‚ÇΩ\n"
                                  f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –ÆKassa.",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=payment_methods_keyboard(period_data_key, amount, user_balance))

    elif call.data.startswith("pay_yookassa_"):
        parts = call.data.split('_')
        period_key = parts[2] + '_' + parts[3]
        amount = int(parts[4])

        if amount != SUBSCRIPTION_PERIODS[period_key]['price']:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!", show_alert=True)
            return

        prices = [types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_PERIODS[period_key]['days']} –¥–Ω–µ–π", amount=amount * 100)]
        provider_data = get_provider_data(amount)

        bot.send_invoice(
            chat_id=call.message.chat.id,
            title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            description=f"VPN –Ω–∞ {SUBSCRIPTION_PERIODS[period_key]['days']} –¥–Ω–µ–π",
            invoice_payload=f"vpn_{period_key}_{amount}",
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices,
            need_phone_number=True,
            send_phone_number_to_provider=True,
            provider_data=provider_data,
            start_parameter="vpn_payment"
        )
        bot.answer_callback_query(call.id)

    elif call.data == "my_account":
        user_info = users_db.get(user_id, {})
        subscription_end = user_info.get('subscription_end')
        balance = user_info.get('balance', 0)
        days_left = get_subscription_days_left(user_id)
        status_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        if days_left > 0:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π (–¥–æ {end_date.strftime('%d.%m.%Y')})"
        bot.edit_message_text(f"üë§ **–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n"
                              f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** {status_text}\n"
                              f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} ‚ÇΩ\n"
                              f"üë® **–í–∞—à–µ –∏–º—è:** {user_info.get('first_name', 'N/A')}\n"
                              f"üì± **Username:** @{user_info.get('username', 'N/A')}\n"
                              f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** {user_info.get('referrals_count', 0)}\n",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown',
                              reply_markup=my_account_keyboard())
    elif call.data == "my_configs":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞):\n"
                              "‚ùï_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥' "
                              "–≤—ã–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ._",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown',
                              reply_markup=my_configs_keyboard(user_id))
    elif call.data.startswith("get_config_"):
        period_data_key = call.data.replace("get_config_", "")
        user_info = users_db.get(user_id, {})
        days_left = get_subscription_days_left(user_id)
        if days_left <= 0:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞):\n"
                              "‚ùï_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥' "
                              "–≤—ã–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ._",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown',
                              reply_markup=my_configs_keyboard(user_id))
            return
        success, result = send_config_to_user(user_id, period_data_key,
                                            user_info.get('username', 'user'),
                                            user_info.get('first_name', 'User'))
        if success:
            bot.answer_callback_query(call.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
        else:
            bot.answer_callback_query(call.id, f"‚ùå {result}", show_alert=True)
    elif call.data == "support":
        bot.edit_message_text(f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME}.\n"
                              f"–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))
    elif call.data == "referral_system":
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        user_info = users_db.get(user_id, {})
        referrals_count = user_info.get('referrals_count', 0)
        balance = user_info.get('balance', 0)
        bot.edit_message_text(f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n"
                              f"üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                              f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                              f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏\n"
                              f"‚Ä¢ –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:\n"
                              f"  üéÅ **–ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é** –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_NEW_USER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üí∞ **–í–∞–º** –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üìÖ **–í–∞–º** –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ\n"
                              f"üí∞ **–í–∞—à–∏ –±–æ–Ω—É—Å—ã:**\n"
                              f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals_count}\n"
                              f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referrals_count * REFERRAL_BONUS_REFERRER} ‚ÇΩ\n"
                              f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
                              f"üìé **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
                              f"`{referral_link}`\n"
                              f"üí∏ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏!",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown', reply_markup=main_menu_keyboard(user_id))
    # --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
    elif call.data == "admin_panel":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=main_menu_keyboard(user_id))
    elif call.data == "admin_manage_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data == "admin_show_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n"
            for period, configs_list in configs_db.items():
                message_text += f"**{SUBSCRIPTION_PERIODS.get(period, {}).get('days', period)} –¥–Ω–µ–π:**\n"
                if configs_list:
                    available_count = sum(1 for config in configs_list if not config.get('used', False))
                    message_text += f"  –í—Å–µ–≥–æ: {len(configs_list)}, –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
                    for i, config in enumerate(configs_list):
                        status = "‚úÖ" if not config.get('used', False) else "‚ùå"
                        message_text += f"  {i+1}. {status} {config['name']} - `{config['link']}`\n"
                else:
                    message_text += "  (–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤)\n"
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data == "admin_reset_configs":
        if str(user_id) == str(ADMIN_ID):
            reset_count = 0
            for period in configs_db:
                for config in configs_db[period]:
                    if config.get('used', False):
                        config['used'] = False
                        reset_count += 1
            save_data('configs.json', configs_db)
            bot.edit_message_text(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {reset_count} –∫–æ–Ω—Ñ–∏–≥–æ–≤.", chat_id=call.message.chat.id, message_id=call.message.message_id,
                           reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data == "admin_add_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞:",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=choose_period_keyboard("add_config"))
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data.startswith("add_config_"):
        if str(user_id) == str(ADMIN_ID):
            period = call.data.replace("add_config_", "")
            if period not in SUBSCRIPTION_PERIODS:
                bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=manage_configs_keyboard())
                return
            bot.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {SUBSCRIPTION_PERIODS[period]['days']} –¥–Ω–µ–π\n"
                                 f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                                 f"–ò–º–µ–Ω–∞ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞.",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_add_configs_bulk, period)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data == "admin_delete_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ ID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 1` –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ 30 –¥–Ω–µ–π, ID –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1).",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=manage_configs_keyboard())
            bot.register_next_step_handler(call.message, process_delete_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data == "admin_confirm_payments":
        if str(user_id) == str(ADMIN_ID):
            pending_payments = {pid: p_data for pid, p_data in payments_db.items() if p_data['status'] == 'pending' and p_data.get('screenshot_id')}
            if not pending_payments:
                bot.edit_message_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=admin_keyboard())
                return
            for payment_id, p_data in pending_payments.items():
                user_payment_info = users_db.get(p_data['user_id'])
                username_str = user_payment_info.get('username', 'N/A') if user_payment_info else 'N/A'
                bot.send_photo(ADMIN_ID, p_data['screenshot_id'],
                               caption=f"–ü–ª–∞—Ç–µ–∂ ID: `{payment_id}`\n"
                                       f"–û—Ç: @{username_str} (ID: {p_data['user_id']})\n"
                                       f"–°—É–º–º–∞: {p_data['amount']} ‚ÇΩ\n"
                                       f"–ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS.get(p_data['period'], {}).get('days', p_data['period'])} –¥–Ω–µ–π\n"
                                       f"–í—Ä–µ–º—è: {p_data['timestamp']}",
                               parse_mode='Markdown', reply_markup=confirm_payments_keyboard(payment_id))
            bot.send_message(ADMIN_ID, "üëÜ –≠—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data.startswith("admin_confirm_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_confirm_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'confirmed'
                target_user_id = payments_db[payment_id]['user_id']
                period_data_key = payments_db[payment_id]['period']
                amount = payments_db[payment_id]['amount']
                if target_user_id in users_db:
                    current_end = users_db[target_user_id].get('subscription_end')
                    if current_end:
                        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                    else:
                        current_end = datetime.datetime.now()
                    add_days = SUBSCRIPTION_PERIODS[period_data_key]['days']
                    new_end = current_end + datetime.timedelta(days=add_days)
                    users_db[target_user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                    save_data('users.json', users_db)
                    user_info = users_db[target_user_id]
                    success, result = send_config_to_user(target_user_id, period_data_key,
                                                        user_info.get('username', 'user'),
                                                        user_info.get('first_name', 'User'))
                    if success:
                        bot.send_message(target_user_id,
                                         f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                         f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                         f"–ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                         reply_markup=main_menu_keyboard(target_user_id))
                    else:
                        bot.send_message(target_user_id,
                                         f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                         f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}",
                                         reply_markup=main_menu_keyboard(target_user_id))
                save_data('payments.json', payments_db)
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                         caption=f"{call.message.caption}\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                         reply_markup=None, parse_mode='Markdown')
            else:
                bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif call.data.startswith("admin_reject_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_reject_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'rejected'
                save_data('payments.json', payments_db)
                target_user_id = payments_db[payment_id]['user_id']
                bot.send_message(target_user_id,
                                 f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ (ID: `{payment_id}`) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ({ADMIN_USERNAME}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.", parse_mode='Markdown',
                                 reply_markup=main_menu_keyboard(target_user_id))
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                         caption=f"{call.message.caption}\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                         reply_markup=None, parse_mode='Markdown')
            else:
                bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    # [–°—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ elif –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: admin_manage_users, admin_active_users –∏ —Ç.–¥.]
    # ‚Üí –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞, —è –æ–ø—É—Å–∫–∞—é –∏—Ö ‚Äî –æ–Ω–∏ **–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π**.
    # –í–µ—Å—å –∫–æ–¥ –Ω–∏–∂–µ (–∞–¥–º–∏–Ω–∫–∞, —Ä–∞—Å—Å—ã–ª–∫–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–ø.) –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.
    # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ: —É–¥–∞–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å pay_card –∏ pay_stars, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å.

    # –ü—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–¥–º–∏–Ω–∫—É
    elif call.data == "admin_manage_users":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=users_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # [–û—Å—Ç–∞–ª—å–Ω—ã–µ elif ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

# === PRE-CHECKOUT –ò –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–ï–ñ ===
@bot.pre_checkout_query_handler(func=lambda query: True)
def handle_pre_checkout(query):
    bot.answer_pre_checkout_query(query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    user_id = str(message.from_user.id)
    payment = message.successful_payment
    payload = payment.invoice_payload  # "vpn_1_month_50"

    try:
        _, period_key, amount_str = payload.split('_')
        amount = int(amount_str)
        days = SUBSCRIPTION_PERIODS[period_key]['days']
    except Exception as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ payload: {payload} –æ—Ç {user_id}")
        return

    current_end = users_db.get(user_id, {}).get('subscription_end')
    if current_end:
        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
    else:
        current_end = datetime.datetime.now()
    new_end = current_end + datetime.timedelta(days=days)
    users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
    save_data('users.json', users_db)

    user_info = users_db[user_id]
    success, result = send_config_to_user(user_id, period_key, user_info.get('username', 'user'), user_info.get('first_name', 'User'))

    payment_id = generate_payment_id()
    payments_db[payment_id] = {
        'user_id': user_id,
        'amount': amount,
        'status': 'confirmed',
        'method': 'yookassa',
        'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'period': period_key
    }
    save_data('payments.json', payments_db)

    if success:
        bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"–°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ!",
            reply_markup=main_menu_keyboard(user_id)
        )
    else:
        bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –≤—ã–¥–∞–Ω: {result}\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ {ADMIN_USERNAME}",
            reply_markup=main_menu_keyboard(user_id)
        )

    bot.send_message(
        ADMIN_ID,
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_info.get('username', 'N/A')} (ID: {user_id})\n"
        f"–°—É–º–º–∞: {amount} ‚ÇΩ\n"
        f"–ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π"
    )

# === –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
# [–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏: process_add_configs_bulk, process_delete_config, process_search_user –∏ —Ç.–¥. ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ]

# === GRACEFUL SHUTDOWN ===
def signal_handler(signum, frame):
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    bot.stop_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    if ADMIN_ID == 8320218178:
        print("–í–Ω–∏–º–∞–Ω–∏–µ: ADMIN_ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –≤ —Ñ–∞–π–ª–µ.")
    bot.polling(none_stop=True, interval=0, timeout=60)
