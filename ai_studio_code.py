import logging
import json
import time
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY"
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à ID)
ADMIN_ID = 8320218178 
# –í–∞—à –Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_USERNAME = "@Gl1ch555"
# –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (Ozon Bank Makarov Pavel Alexandrovich)
CARD_NUMBER = "2204320690808227"
# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
CARD_HOLDER_INFO = "Ozon Bank, –ú–∞–∫–∞—Ä–æ–≤ –ü–∞–≤–µ–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"
# –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
VPN_SERVER_NAME = "X-Ray Server (–ì–µ—Ä–º–∞–Ω–∏—è)"
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–Ω—Ñ–∏–≥–∏)
DB_FILE = "db.json"
# –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
PRICES = {
    "1_month": {"price": 50, "days": 30, "duration": 30 * 24 * 3600},
    "2_months": {"price": 90, "days": 60, "duration": 60 * 24 * 3600},
    "3_months": {"price": 120, "days": 90, "duration": 90 * 24 * 3600},
}
# –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
REFERRAL_BONUS_AMOUNT = 25  # —Ä—É–±–ª–∏
REFERRAL_BONUS_DAYS = 7  # –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- FSM (Finite State Machine) –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
class Payment(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    waiting_for_screenshot = State()
    waiting_for_admin_confirmation = State()
    
class AdminConfig(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    waiting_for_config_link = State()
    waiting_for_config_code = State()
    waiting_for_config_desc = State()
    waiting_for_config_action = State() # –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫–æ–Ω—Ñ–∏–≥ –¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º

# --- –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° DB ---
def load_db():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": {}, "configs": {}}
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ DB. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω.")
        return {"users": {}, "configs": {}}

def save_db(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    db = load_db()
    user_id_str = str(user_id)
    if user_id_str not in db["users"]:
        db["users"][user_id_str] = {
            "subscription_end": 0,
            "referral_code": user_id_str,
            "referred_by": None,
            "balance": 0,
            "payment_pending": False,
            "referrals_count": 0,
            "last_config_type": None, # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        }
        save_db(db)
    return db["users"][user_id_str]

def update_user(user_id, **kwargs):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = load_db()
    user_id_str = str(user_id)
    if user_id_str not in db["users"]:
        get_user(user_id) # –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
    db["users"][user_id_str].update(kwargs)
    save_db(db)

def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (True/False)"""
    user = get_user(user_id)
    return user["subscription_end"] > time.time()

def add_subscription(user_id, duration_seconds):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = get_user(user_id)
    current_end = user["subscription_end"]
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ü—É, –∏–Ω–∞—á–µ –∫ —Ç–µ–∫—É—â–µ–º—É –º–æ–º–µ–Ω—Ç—É
    start_time = max(time.time(), current_end)
    new_end = start_time + duration_seconds
    
    update_user(user_id, subscription_end=new_end)
    return new_end

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Reply)"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üöÄ –ö—É–ø–∏—Ç—å VPN", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    keyboard.row("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    return keyboard

def get_buy_options_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ (Inline)"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key, data in PRICES.items():
        text = f"{data['days']} –¥–Ω–µ–π - {data['price']} ‚ÇΩ"
        keyboard.add(types.InlineKeyboardButton(text, callback_data=f"buy_{key}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def get_profile_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (Inline)"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if check_subscription(user_id):
        keyboard.add(types.InlineKeyboardButton("üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config"))
        
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def get_referral_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (Inline)"""
    user = get_user(user_id)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    referral_link = f"https://t.me/{bot.me.username}?start={user['referral_code']}"
    keyboard.add(types.InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", url=referral_link))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def get_admin_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Reply)"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚úÖ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
    keyboard.row("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏")
    keyboard.row("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
    return keyboard

def get_admin_config_menu_keyboard():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ (Inline)"""
    db = load_db()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
    for key, data in PRICES.items():
        days = data['days']
        status = "‚úÖ –ï—Å—Ç—å" if key in db["configs"] else "‚ùå –ù–µ—Ç"
        text = f"{status} –ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {days} –¥–Ω–µ–π"
        keyboard.add(types.InlineKeyboardButton(text, callback_data=f"admin_cfg_edit_{key}"))
        
    keyboard.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu"))
    return keyboard


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if message.get_args():
        referred_by_id = message.get_args()
        
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏ –Ω–µ —Å–∞–º —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª
        user = get_user(user_id)
        if user["referred_by"] is None and referred_by_id != str(user_id):
            referrer = get_user(referred_by_id)
            if referrer:
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                update_user(referred_by_id, 
                            balance=referrer["balance"] + REFERRAL_BONUS_AMOUNT,
                            subscription_end=add_subscription(referred_by_id, REFERRAL_BONUS_DAYS * 24 * 3600),
                            referrals_count=referrer["referrals_count"] + 1)
                
                # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
                update_user(user_id, referred_by=referred_by_id)
                
                await bot.send_message(
                    referred_by_id,
                    f"üéâ **–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} "
                    f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{REFERRAL_BONUS_AMOUNT} ‚ÇΩ** –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ **{REFERRAL_BONUS_DAYS} –¥–Ω–µ–π** –ø–æ–¥–ø–∏—Å–∫–∏!",
                    parse_mode="Markdown"
                )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üëã **–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!**\n"
        f"–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN ({VPN_SERVER_NAME}).\n"
        f"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    
    await message.answer(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")

@dp.message_handler(commands=['admin'], state='*')
async def admin_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
    await message.answer(
        "‚öôÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω–∫—É!**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_keyboard(),
        parse_mode="Markdown"
    )

@dp.message_handler(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", user_id=ADMIN_ID, state='*')
async def exit_admin(message: types.Message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.", reply_markup=get_main_keyboard())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ (Reply-–∫–Ω–æ–ø–∫–∏) ---

@dp.message_handler(text="üöÄ –ö—É–ø–∏—Ç—å VPN", state='*')
async def buy_vpn_menu(message: types.Message):
    """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ VPN"""
    text = (
        "üí∞ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:**\n"
        f"–°–µ—Ä–≤–µ—Ä: **{VPN_SERVER_NAME}**"
    )
    await message.answer(text, reply_markup=get_buy_options_keyboard(), parse_mode="Markdown")

@dp.message_handler(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", state='*')
async def personal_account(message: types.Message):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = get_user(user_id)
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_active = check_subscription(user_id)
    status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_date_text = "‚Äî"
    if is_active:
        end_date_text = time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(user["subscription_end"]))
        
    text = (
        "üë§ **–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n"
        f"**–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** {status_text}\n"
        f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:** {end_date_text}\n"
        f"**–í–∞—à –±–∞–ª–∞–Ω—Å (—Ä—É–±):** {user['balance']} ‚ÇΩ\n"
        "\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    
    await message.answer(text, reply_markup=get_profile_keyboard(user_id), parse_mode="Markdown")

@dp.message_handler(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state='*')
async def support_info(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    text = (
        "üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
        f"–ù–∏–∫: **{SUPPORT_USERNAME}**"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message_handler(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", state='*')
async def referral_system(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    user = get_user(message.from_user.id)
    
    text = (
        "üéÅ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
        f"  - **{REFERRAL_BONUS_AMOUNT} ‚ÇΩ** –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
        f"  - **{REFERRAL_BONUS_DAYS} –¥–Ω–µ–π** –ø–æ–¥–ø–∏—Å–∫–∏\n"
        f"\n"
        f"**–í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:** {user['referrals_count']} —á–µ–ª.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:"
    )
    
    await message.answer(text, reply_markup=get_referral_keyboard(message.from_user.id), parse_mode="Markdown")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE-–ö–ù–û–ü–û–ö (CALLBACKS) ---

@dp.callback_query_handler(lambda c: c.data == 'main_menu', state='*')
async def process_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.finish()
    await callback_query.message.delete()
    await send_welcome(callback_query.message)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('buy_'), state='*')
async def process_buy_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏"""
    plan_key = callback_query.data.split('_')[1]
    
    if plan_key not in PRICES:
        return await callback_query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    plan_data = PRICES[plan_key]
    price = plan_data['price']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    update_user(callback_query.from_user.id, last_config_type=plan_key)
    await state.update_data(plan_key=plan_key, price=price)
    
    text = (
        f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {plan_data['days']} –¥–Ω–µ–π ({price} ‚ÇΩ)**\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É **{price} ‚ÇΩ** –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n"
        f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** `{CARD_NUMBER}`\n"
        f"**–ë–∞–Ω–∫/–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** `{CARD_HOLDER_INFO}`\n"
        "\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ!** –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ —á–∞—Ç.\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥."
    )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª, –∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="paid_and_waiting"))
    keyboard.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu"))
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'paid_and_waiting', state='*')
async def process_paid_and_waiting(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    await Payment.waiting_for_screenshot.set()
    await callback_query.message.edit_text("üñºÔ∏è **–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.**\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –∫–∞–∫ *–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ* –∏–ª–∏ *—Ñ–∞–π–ª*.")
    await callback_query.answer()

@dp.message_handler(content_types=['photo', 'document'], state=Payment.waiting_for_screenshot)
async def process_screenshot(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É"""
    user_id = message.from_user.id
    user_data = await state.get_data()
    plan_key = user_data.get('plan_key')
    price = user_data.get('price')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ (–¥–ª—è —Ñ–æ—Ç–æ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ - —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç)
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    
    if not file_id:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    # –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π
    update_user(user_id, payment_pending=True)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    admin_text = (
        f"üîî **–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ!**\n"
        f"**–û—Ç:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} (ID: `{user_id}`)\n"
        f"**–¢–∞—Ä–∏—Ñ:** {PRICES[plan_key]['days']} –¥–Ω–µ–π\n"
        f"**–°—É–º–º–∞:** {price} ‚ÇΩ\n"
        f"**–°–∫—Ä–∏–Ω—à–æ—Ç:**"
    )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user_id}_{plan_key}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user_id}")
    )
    
    await bot.send_message(ADMIN_ID, admin_text, parse_mode="Markdown")
    await bot.send_photo(ADMIN_ID, file_id, reply_markup=keyboard)
    
    await message.answer(
        "‚úÖ **–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!**\n"
        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5-10 –º–∏–Ω—É—Ç)."
    )
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'get_config', state='*')
async def process_get_config(callback_query: types.CallbackQuery):
    """–í—ã–¥–∞—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    
    if not check_subscription(user_id):
        await callback_query.answer("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ.", show_alert=True)
        return
        
    config_key = user['last_config_type']
    db = load_db()
    
    if not config_key or config_key not in db["configs"]:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∫–æ–Ω—Ñ–∏–≥–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        return
        
    config_data = db["configs"][config_key]
    
    text = (
        f"üîë **–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ ({PRICES[config_key]['days']} –¥–Ω–µ–π)**\n"
        f"**–°–µ—Ä–≤–µ—Ä:** {VPN_SERVER_NAME}\n"
        f"\n"
        f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config_data['link']}\n"
        f"üìã **–ö–æ–¥ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è):** `{config_data['code']}`\n"
        f"\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:**\n"
        f"{config_data['description']}\n"
        f"\n"
        f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:** {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(user['subscription_end']))}"
    )
    
    await callback_query.message.answer(text, parse_mode="Markdown")
    await callback_query.answer()

# --- –ê–î–ú–ò–ù–ö–ê: –ü–õ–ê–¢–ï–ñ–ò ---

@dp.message_handler(text="‚úÖ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", user_id=ADMIN_ID, state='*')
async def admin_pending_payments(message: types.Message):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º –ø–ª–∞—Ç–µ–∂–æ–º"""
    db = load_db()
    pending_users = [
        uid for uid, udata in db["users"].items() if udata.get("payment_pending")
    ]
    
    if not pending_users:
        return await message.answer("‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        
    text = "‚è≥ **–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∏:**\n"
    for uid in pending_users:
        user = db["users"][uid]
        text += (
            f"\n"
            f"ID: `{uid}`\n"
            f"–ù–∏–∫: @{user.get('username', 'N/A')}\n"
            f"–û–∂–∏–¥–∞–µ—Ç: –ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {PRICES.get(user.get('last_config_type', 'N/A'), {}).get('days', '?')} –¥–Ω–µ–π\n"
            f"(–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã—à–µ –≤ —á–∞—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å)"
        )
        
    await message.answer(text, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data.startswith('admin_confirm_'), user_id=ADMIN_ID, state='*')
async def admin_confirm_payment(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        _, _, user_id, plan_key = callback_query.data.split('_')
        user_id = int(user_id)
    except ValueError:
        return await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö callback'–∞.", show_alert=True)
        
    db = load_db()
    if str(user_id) not in db["users"]:
        return await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        
    user = db["users"][str(user_id)]
    if not user.get("payment_pending"):
        await callback_query.message.edit_reply_markup(None)
        return await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        
    # 1. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    duration = PRICES[plan_key]["duration"]
    new_end_time = add_subscription(user_id, duration)
    
    # 2. –û–±–Ω—É–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    update_user(user_id, payment_pending=False)
    
    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    config_data = db["configs"].get(plan_key)
    if config_data:
        config_text = (
            f"üéâ **–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ **{PRICES[plan_key]['days']} –¥–Ω–µ–π** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"\n"
            f"üîë **–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ ({PRICES[plan_key]['days']} –¥–Ω–µ–π)**\n"
            f"**–°–µ—Ä–≤–µ—Ä:** {VPN_SERVER_NAME}\n"
            f"\n"
            f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config_data['link']}\n"
            f"üìã **–ö–æ–¥ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è):** `{config_data['code']}`\n"
            f"\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:**\n"
            f"{config_data['description']}\n"
            f"\n"
            f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:** {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(new_end_time))}"
        )
        await bot.send_message(user_id, config_text, parse_mode="Markdown")
    else:
        await bot.send_message(user_id, 
                               f"üéâ **–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!** –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ **{PRICES[plan_key]['days']} –¥–Ω–µ–π** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                               f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∞–¥–º–∏–Ω–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
                               parse_mode="Markdown")
        
    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    await callback_query.message.edit_caption(
        callback_query.message.caption + "\n\n**‚úÖ –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù –∏ –ö–û–ù–§–ò–ì –í–´–î–ê–ù.**",
        reply_markup=None,
        parse_mode="Markdown"
    )
    await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.callback_query_handler(lambda c: c.data.startswith('admin_decline_'), user_id=ADMIN_ID, state='*')
async def admin_decline_payment(callback_query: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        _, _, user_id = callback_query.data.split('_')
        user_id = int(user_id)
    except ValueError:
        return await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö callback'–∞.", show_alert=True)
        
    user = get_user(user_id)
    if not user.get("payment_pending"):
        await callback_query.message.edit_reply_markup(None)
        return await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        
    # –û–±–Ω—É–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    update_user(user_id, payment_pending=False)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        "‚ùå **–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.**\n"
        "–í–æ–∑–º–æ–∂–Ω–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –Ω–µ—á–µ—Ç–∫–∏–º, –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: **{SUPPORT_USERNAME}**",
        parse_mode="Markdown"
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    await callback_query.message.edit_caption(
        callback_query.message.caption + "\n\n**‚ùå –ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù.**",
        reply_markup=None,
        parse_mode="Markdown"
    )
    await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

# --- –ê–î–ú–ò–ù–ö–ê: –ö–û–ù–§–ò–ì–ò ---

@dp.message_handler(text="üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", user_id=ADMIN_ID, state='*')
async def admin_config_menu(message: types.Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏"""
    await message.answer(
        "üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:",
        reply_markup=get_admin_config_menu_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data.startswith('admin_cfg_edit_'), user_id=ADMIN_ID, state='*')
async def admin_cfg_start_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
    config_key = callback_query.data.split('_')[-1]
    
    if config_key not in PRICES:
        return await callback_query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        
    plan_data = PRICES[config_key]
    
    await state.update_data(current_config_key=config_key)
    
    await AdminConfig.waiting_for_config_link.set()
    await callback_query.message.edit_text(
        f"üîó **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ {plan_data['days']} –¥–Ω–µ–π**\n"
        "–®–∞–≥ 1/3: **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ VPN-–∫–æ–Ω—Ñ–∏–≥** (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É)."
    )
    await callback_query.answer()

@dp.message_handler(state=AdminConfig.waiting_for_config_link)
async def admin_cfg_get_link(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥"""
    await state.update_data(config_link=message.text)
    await AdminConfig.waiting_for_config_code.set()
    await message.answer(
        "üìã –®–∞–≥ 2/3: **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥–∞** (QR-–∫–æ–¥ –∏–ª–∏ –∫–ª—é—á). "
        "–ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `–ù–ï–¢`."
    )

@dp.message_handler(state=AdminConfig.waiting_for_config_code)
async def admin_cfg_get_code(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–Ω—Ñ–∏–≥–∞"""
    code = message.text.upper()
    await state.update_data(config_code="‚Äî" if code == "–ù–ï–¢" else code)
    await AdminConfig.waiting_for_config_desc.set()
    await message.answer(
        "üìù –®–∞–≥ 3/3: **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞.** "
        "–≠—Ç–æ –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )

@dp.message_handler(state=AdminConfig.waiting_for_config_desc)
async def admin_cfg_get_desc(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞"""
    data = await state.get_data()
    config_key = data['current_config_key']
    
    db = load_db()
    db["configs"][config_key] = {
        "link": data['config_link'],
        "code": data['config_code'],
        "description": message.text,
    }
    save_db(db)
    
    await state.finish()
    
    plan_data = PRICES[config_key]
    await message.answer(
        f"‚úÖ **–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {plan_data['days']} –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n"
        f"**–°—Å—ã–ª–∫–∞:** {data['config_link']}\n"
        f"**–ö–æ–¥:** {data['config_code']}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {message.text}",
        reply_markup=get_admin_main_keyboard()
    )


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º db.json, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    load_db() 
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—É username –≤ –±–∞–∑–µ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π)
    try:
        admin_info = get_user(ADMIN_ID)
        if admin_info.get('username') != SUPPORT_USERNAME.strip('@'):
            update_user(ADMIN_ID, username=SUPPORT_USERNAME.strip('@'))
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å username –∞–¥–º–∏–Ω–∞: {e}")
        
    executor.start_polling(dp, skip_updates=True)
