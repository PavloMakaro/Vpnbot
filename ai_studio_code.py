# -*- coding: utf-8 -*-
import telebot
from telebot import types
import json
import time
import datetime
import threading
import os
import subprocess
import signal
import sys

TOKEN = '8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY'
ADMIN_USERNAME = '@Gl1ch555'
ADMIN_ID = 8320218178  # –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
CARD_NUMBER = '2204320690808227'
CARD_HOLDER = 'Makarov Pavel Alexandrovich (Ozon Bank)'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
SUBSCRIPTION_PERIODS = {
    '1_month': {'price': 50, 'days': 30},
    '2_months': {'price': 90, 'days': 60},
    '3_months': {'price': 120, 'days': 90}
}

# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
PRICE_MONTH = SUBSCRIPTION_PERIODS['1_month']['price']
PRICE_2_MONTHS = SUBSCRIPTION_PERIODS['2_months']['price']
PRICE_3_MONTHS = SUBSCRIPTION_PERIODS['3_months']['price']
STARS_TO_RUB = 1 # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ, —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ
REFERRAL_BONUS_NEW_USER = 50
REFERRAL_BONUS_REFERRER = 25
MAINTENANCE_MODE = False # –ü—Ä–∏–º–µ—Ä, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON ---
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ---
users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

# –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è –Ω–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
# –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏
configs_db = {
    '1_month': [],
    '2_months': [],
    '3_months': []
}

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö ---

def get_subscription_days_left(user_id):
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    if subscription_end:
        try:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            now = datetime.datetime.now()
            if end_date > now:
                return (end_date - now).days
            else:
                return 0
        except ValueError:
            return 0
    return 0

def main_menu_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫
    # markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="my_account"))
    # markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN", callback_data="buy_vpn"))
    # markup.add(types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_program"))
    # markup.add(types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=ADMIN_USERNAME))
    return markup

def buy_vpn_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"1 –º–µ—Å—è—Ü ({PRICE_MONTH} ‚ÇΩ)", callback_data="choose_period_1_month"),
        types.InlineKeyboardButton(f"2 –º–µ—Å—è—Ü–∞ ({PRICE_2_MONTHS} ‚ÇΩ)", callback_data="choose_period_2_months"),
        types.InlineKeyboardButton(f"3 –º–µ—Å—è—Ü–∞ ({PRICE_3_MONTHS} ‚ÇΩ)", callback_data="choose_period_3_months"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def payment_methods_keyboard(period_callback_data, amount, user_balance):
    stars_amount = int(amount / STARS_TO_RUB)
    markup = types.InlineKeyboardMarkup(row_width=1)
    needed_amount = max(0, amount - user_balance)

    if needed_amount == 0:
        # –í—Å—è —Å—É–º–º–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å–æ–º
        markup.add(
            types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ)", callback_data=f"pay_balance_{period_callback_data}")
        )
    else:
        # –¢—Ä–µ–±—É–µ—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∏–ª–∏ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
        if user_balance > 0:
            # –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞, –ø–æ—Ç–æ–º –∫–∞—Ä—Ç–æ–π
            markup.add(
                types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ + –∫–∞—Ä—Ç–∞ ({user_balance} ‚ÇΩ + {needed_amount} ‚ÇΩ)", callback_data=f"pay_balance_partial_{period_callback_data}_{amount}")
            )
        # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
        markup.add(
            types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({amount} ‚ÇΩ)", callback_data=f"pay_card_{period_callback_data}_{amount}"),
            types.InlineKeyboardButton(f"ü™ô –û–ø–ª–∞—Ç–∞ Stars ({stars_amount} XTR)", callback_data=f"pay_stars_{period_callback_data}_{amount}")
        )
    markup.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="buy_vpn")
    )
    return markup

def my_configs_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    days_left = get_subscription_days_left(user_id)
    if days_left > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
        for period_key in SUBSCRIPTION_PERIODS.keys():
            display_period = SUBSCRIPTION_PERIODS[period_key]['days']
            markup.add(
                types.InlineKeyboardButton(f"–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {display_period} –¥–Ω–µ–π", callback_data=f"get_config_{period_key}")
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        markup.add(
            types.InlineKeyboardButton("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", callback_data="noop")
        )
    markup.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_account")
    )
    return markup

def get_available_config(period):
    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã configs_db
    configs = configs_db.get(period, [])
    for config in configs:
        if not config.get('used', False): # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ–ª–µ 'used'
            return config
    return None

def mark_config_used(period, config_link):
    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã configs_db
    for config in configs_db.get(period, []):
        if config.get('link') == config_link:
            config['used'] = True
            save_data('configs.json', configs_db) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            return True
    return False

def send_config_to_user(user_id, period, username, first_name):
    config = get_available_config(period)
    if not config:
        return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"

    mark_config_used(period, config['link'])
    config_name = f"{first_name} ({username}) - {period.replace('_', ' ')}"
    issue_date = datetime.datetime.now().strftime('%d.%m.%Y %H:%M')

    if 'used_configs' not in users_db[str(user_id)]:
        users_db[str(user_id)]['used_configs'] = []

    used_config = {
        'config_name': config['name'],
        'config_link': config['link'],
        'config_code': config['code'],
        'period': period,
        'issue_date': issue_date
    }
    users_db[str(user_id)]['used_configs'].append(used_config)
    save_data('users.json', users_db)

    try:
        bot.send_message(
            user_id,
            f"üîê –í–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period.replace('_', ' ')}:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}\n"
            f"–°—Å—ã–ª–∫–∞: {config['link']}\n"
            f"–ö–æ–¥: {config['code']}\n"
            f"–í—ã–¥–∞–Ω: {issue_date}",
            parse_mode='Markdown'
        )
        return True, "–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    except Exception as e:
        return False, str(e)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    if user_id not in users_db:
        users_db[user_id] = {
            'first_name': message.from_user.first_name,
            'username': message.from_user.username,
            'balance': 0,
            'subscription_end': None,
            'used_configs': [],
            'referrals_count': 0,
            'referred_by': None
        }
        save_data('users.json', users_db)

    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.reply_to(message, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu_keyboard(user_id))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)

    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫—É–ø–∫–∞ VPN -
    if call.data == "main_menu":
        bot.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=main_menu_keyboard(user_id)
        )
    elif call.data == "buy_vpn":
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=buy_vpn_keyboard()
        )
    elif call.data.startswith("choose_period_"):
        period_data_key = call.data.replace("choose_period_", "")
        amount = SUBSCRIPTION_PERIODS[period_data_key]['price']
        user_balance = users_db.get(user_id, {}).get('balance', 0)

        bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π.\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {amount} ‚ÇΩ\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=payment_methods_keyboard(period_data_key, amount, user_balance)
        )
    elif call.data.startswith("pay_card_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: pay_card_{period}_{amount}
        parts = call.data.split('_')
        if len(parts) < 4:
            bot.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return
        period_data_key = parts[2]
        amount_str = parts[3]
        try:
            amount = int(amount_str)
        except ValueError:
            bot.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return

        bot.edit_message_text(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã {amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π:\n"
            f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`\n"
            f"–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
            f"2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='Markdown'
        )
    elif call.data.startswith("pay_stars_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: pay_stars_{period}_{amount}
        parts = call.data.split('_')
        if len(parts) < 4:
            bot.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return
        period_data_key = parts[2]
        amount_str = parts[3]
        try:
            amount = int(amount_str)
        except ValueError:
            bot.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return

        stars_amount = int(amount / STARS_TO_RUB)
        try:
            prices = [types.LabeledPrice(label=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π", amount=stars_amount)]
            bot.send_invoice(
                chat_id=call.message.chat.id,
                title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π",
                description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π",
                provider_token='',  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Stars (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
                currency='XTR',  # –í–∞–ª—é—Ç–∞ Telegram Stars
                prices=prices,
                start_parameter=f'vpn_subscription_{period_data_key}',
                invoice_payload=f'stars_payment_{period_data_key}_{amount}'
            )
        except Exception as e:
            bot.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=payment_methods_keyboard(period_data_key, amount, users_db.get(user_id, {}).get('balance', 0))
            )
            return # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è
    elif call.data.startswith("pay_balance_"):
        period_data_key = call.data.replace("pay_balance_", "")
        amount = SUBSCRIPTION_PERIODS[period_data_key]['price']
        user_balance = users_db.get(user_id, {}).get('balance', 0)

        if user_balance >= amount:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            users_db[user_id]['balance'] = user_balance - amount
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            current_end = users_db[user_id].get('subscription_end')
            now = datetime.datetime.now()
            if current_end:
                try:
                    current_end_dt = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    current_end_dt = now
            else:
                current_end_dt = now
            new_end = current_end_dt + datetime.timedelta(days=SUBSCRIPTION_PERIODS[period_data_key]['days'])
            if current_end_dt < now: # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                new_end = now + datetime.timedelta(days=SUBSCRIPTION_PERIODS[period_data_key]['days'])
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
            success, result = send_config_to_user(user_id, period_data_key, call.from_user.username or 'user', call.from_user.first_name or 'User')

            if success:
                bot.edit_message_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                    f"üí≥ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {amount} ‚ÇΩ\n"
                    f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {users_db[user_id].get('balance', 0)} ‚ÇΩ\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                bot.edit_message_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
        else:
            bot.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", chat_id=call.message.chat.id, message_id=call.message.message_id)
    elif call.data.startswith("pay_balance_partial_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: pay_balance_partial_{period}_{total_amount}
        parts = call.data.split('_')
        if len(parts) < 4:
            bot.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return
        period_data_key = parts[3]
        total_amount_str = parts[4]
        try:
            total_amount = int(total_amount_str)
        except ValueError:
            bot.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            return

        user_balance = users_db.get(user_id, {}).get('balance', 0)
        needed_amount = max(0, total_amount - user_balance)

        if needed_amount > 0:
            # –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
            users_db[user_id]['balance'] = 0
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—É–º–º—ã
            save_data('users.json', users_db)

            # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—É–º–º—ã –∫–∞—Ä—Ç–æ–π
            bot.edit_message_text(
                f"–° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {user_balance} ‚ÇΩ.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å: {needed_amount} ‚ÇΩ.\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã {needed_amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π:\n"
                f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {needed_amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`\n"
                f"–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
                f"2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        else:
            # –í—Å—è —Å—É–º–º–∞ –ø–æ–∫—Ä—ã—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –Ω–æ –≤–æ–∑–º–æ–∂–µ–Ω –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å > total_amount)
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            users_db[user_id]['balance'] = user_balance - total_amount
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            current_end = users_db[user_id].get('subscription_end')
            now = datetime.datetime.now()
            if current_end:
                try:
                    current_end_dt = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    current_end_dt = now
            else:
                current_end_dt = now
            new_end = current_end_dt + datetime.timedelta(days=SUBSCRIPTION_PERIODS[period_data_key]['days'])
            if current_end_dt < now:
                new_end = now + datetime.timedelta(days=SUBSCRIPTION_PERIODS[period_data_key]['days'])
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
            success, result = send_config_to_user(user_id, period_data_key, call.from_user.username or 'user', call.from_user.first_name or 'User')

            if success:
                bot.edit_message_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                    f"üí≥ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {total_amount} ‚ÇΩ\n"
                    f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {users_db[user_id].get('balance', 0)} ‚ÇΩ\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                bot.edit_message_text(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )

    elif call.data == "my_configs":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        user_info = users_db.get(user_id, {})
        used_configs = user_info.get('used_configs', [])
        if used_configs:
            message_text = f"üîê **–í–∞—à–∏ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n"
            config_count = 0
            for i, config in enumerate(used_configs, 1): # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—á–µ—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                config_count += 1
                message_text += f" {i}. {config['config_name']} ({config['period']})\n"
                message_text += f" –°—Å—ã–ª–∫–∞: {config['config_link']}\n"
                message_text += f" –í—ã–¥–∞–Ω: {config['issue_date']}\n"
            if config_count == 0:
                message_text = "‚ùå –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤."
            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
        else:
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤.", reply_markup=my_configs_keyboard(user_id))

    elif call.data.startswith("get_config_"):
        period_data_key = call.data.replace("get_config_", "")
        if period_data_key in SUBSCRIPTION_PERIODS:
            username = call.from_user.username or 'user'
            first_name = call.from_user.first_name or 'User'
            success, result = send_config_to_user(user_id, period_data_key, username, first_name)
            if success:
                bot.answer_callback_query(call.id, f"–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            else:
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.")

    # --- –ê–¥–º–∏–Ω–∫–∞ ---
    elif call.data == "admin_panel":
        if user_id == str(ADMIN_ID):
            # –ü—Ä–∏–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            admin_markup = types.InlineKeyboardMarkup(row_width=1)
            admin_markup.add(
                types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_active_users"),
                types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users"),
                types.InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
                types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
            )
            bot.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=admin_markup)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_active_users":
        if user_id == str(ADMIN_ID):
            message_text = "**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π):**\n"
            active_users_list = []
            for uid, u_data in users_db.items():
                if u_data.get('subscription_end'):
                    try:
                        sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                        if sub_end > datetime.datetime.now():
                            active_users_list.append((uid, u_data))
                    except ValueError:
                        pass # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã

            if not active_users_list:
                message_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            else:
                for uid, u_data in active_users_list:
                    referred_by = "–ù–µ—Ç"
                    if u_data.get('referred_by'):
                        referrer = users_db.get(u_data['referred_by'], {})
                        referred_by = f"@{referrer.get('username', 'N/A')} (ID: `{u_data['referred_by']}`)"
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')}"
                    message_text += f"üë§ **{u_data.get('first_name', 'N/A')}** (@{u_data.get('username', 'N/A')})\n"
                    message_text += f" üÜî: `{uid}`| {sub_status}\n"
                    message_text += f" üí∞: {u_data.get('balance', 0)} ‚ÇΩ| ü§ù: {u_data.get('referrals_count', 0)}\n"
                    message_text += f" üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referred_by}\n"
                    message_text += f" ‚ö° /manage_{uid}\n" # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_all_users":
        if user_id == str(ADMIN_ID):
            message_text = f"**–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users_db)}):**\n"
            user_entries = []
            for uid, u_data in users_db.items():
                sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                if u_data.get('subscription_end'):
                    try:
                        sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                        if sub_end > datetime.datetime.now():
                            sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')}"
                        else:
                            sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
                    except ValueError:
                        sub_status = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_entries.append(
                    f"üë§ **{u_data.get('first_name', 'N/A')}** (@{u_data.get('username', 'N/A')})\n"
                    f" üÜî: `{uid}`| {sub_status}\n"
                    f" üí∞: {u_data.get('balance', 0)} ‚ÇΩ| ü§ù: {u_data.get('referrals_count', 0)}\n"
                    f" ‚ö° /manage_{uid}\n"
                )

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            current_chunk = []
            for i, entry in enumerate(user_entries):
                current_chunk.append(entry)
                if (i + 1) % 10 == 0 or (i + 1) == len(user_entries):
                    chunk_text = message_text + "".join(current_chunk)
                    bot.send_message(call.message.chat.id, chunk_text, parse_mode='Markdown')
                    current_chunk = [] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∞–Ω–∫
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_search_user":
        if user_id == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            # current_admin_action_data[user_id] = {'action': 'search_user'}
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_broadcast":
        if user_id == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
            # current_admin_action_data[user_id] = {'action': 'broadcast'}
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ---
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.from_user.id)

    if MAINTENANCE_MODE and user_id != str(ADMIN_ID):
        bot.reply_to(message, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É
    caption = message.caption if message.caption else ""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç "—Ä—É–±" –∏–ª–∏ "‚ÇΩ" –∏ —Ü–∏—Ñ—Ä—ã
    import re
    amount_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:‚ÇΩ|—Ä—É–±)', caption, re.IGNORECASE)
    if not amount_match:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        bot.reply_to(message, "‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π.")
        return

    amount_paid = float(amount_match.group(1))
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∫ "–æ–∂–∏–¥–∞—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    payment_id = f"card_{user_id}_{int(time.time())}"
    payments_db[payment_id] = {
        'user_id': user_id,
        'amount': amount_paid,
        'status': 'pending',
        'timestamp': time.time(),
        'photo_id': message.photo[-1].file_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    }
    save_data('payments.json', payments_db)

    bot.reply_to(message, f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –Ω–∞ {amount_paid} ‚ÇΩ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /manage_USER_ID) ---
@bot.message_handler(func=lambda message: message.text.startswith('/manage_') or (str(message.from_user.id) == str(ADMIN_ID) and current_admin_action_data.get(str(message.from_user.id))))
def handle_admin_commands(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è
    admin_user_id = str(message.from_user.id)
    current_action = current_admin_action_data.get(admin_user_id)

    if current_action:
        action_type = current_action.get('action')
        if action_type == 'search_user':
            search_query = message.text.strip()
            found_users = []
            for uid, user_data in users_db.items():
                if (search_query == uid or
                    search_query.lstrip('@') == user_data.get('username', '') or
                    search_query.lower() in user_data.get('first_name', '').lower()):
                    found_users.append((uid, user_data))

            if found_users:
                message_text = f"**–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_users)}**\n"
                for uid, user_data in found_users:
                    sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                    if user_data.get('subscription_end'):
                        try:
                            sub_end = datetime.datetime.strptime(user_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                            if sub_end > datetime.datetime.now():
                                sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y')}"
                            else:
                                sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
                        except ValueError:
                            sub_status = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
                    message_text += f"üë§ **{user_data.get('first_name', 'N/A')}** (@{user_data.get('username', 'N/A')})\n"
                    message_text += f"üÜî ID: `{uid}`\n"
                    message_text += f"üìä {sub_status}| üí∞ {user_data.get('balance', 0)} ‚ÇΩ\n"
                    message_text += f"‚ö° `/manage_{uid}`\n"
                bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_admin_action_data.pop(admin_user_id, None)

        elif action_type == 'broadcast':
            broadcast_text = message.text
            sent_count = 0
            failed_count = 0
            bot.send_message(message.chat.id, "üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

            for uid in users_db.keys():
                try:
                    bot.send_message(uid, f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n{broadcast_text}", parse_mode='Markdown')
                    sent_count += 1
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ Telegram
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                    failed_count += 1

            bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –û—à–∏–±–æ–∫: {failed_count}")
            current_admin_action_data.pop(admin_user_id, None)

        elif action_type == 'edit_user_balance' or action_type == 'edit_user_subscription':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
            target_user_id = current_action.get('target_user_id')
            if not target_user_id or target_user_id not in users_db:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏.")
                current_admin_action_data.pop(admin_user_id, None)
                return

            if action_type == 'edit_user_balance':
                try:
                    new_balance = int(message.text.strip())
                    users_db[target_user_id]['balance'] = new_balance
                    save_data('users.json', users_db)
                    bot.send_message(message.chat.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_balance} ‚ÇΩ.")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        bot.send_message(target_user_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚ÇΩ.")
                    except:
                        pass # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                except ValueError:
                    bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞.")
            elif action_type == 'edit_user_subscription':
                new_subscription = message.text.strip()
                if new_subscription.lower() == '–Ω–µ—Ç':
                    users_db[target_user_id]['subscription_end'] = None
                    save_data('users.json', users_db)
                    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–¥–∞–ª–µ–Ω–∞.")
                    try:
                        bot.send_message(target_user_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                    except:
                        pass
                else:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'YYYY-MM-DD HH:MM:SS' –∏–ª–∏ 'DD.MM.YYYY'
                        parsed_date = None
                        for fmt in ('%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%d.%m.%Y'):
                            try:
                                parsed_date = datetime.datetime.strptime(new_subscription, fmt)
                                break
                            except ValueError:
                                continue
                        if parsed_date:
                            users_db[target_user_id]['subscription_end'] = parsed_date.strftime('%Y-%m-%d %H:%M:%S')
                            save_data('users.json', users_db)
                            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {parsed_date.strftime('%d.%m.%Y %H:%M')}.")
                            try:
                                bot.send_message(target_user_id, f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–æ {parsed_date.strftime('%d.%m.%Y %H:%M')}.")
                            except:
                                pass
                        else:
                            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                    except ValueError:
                        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM:SS –∏–ª–∏ DD.MM.YYYY.")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_admin_action_data.pop(admin_user_id, None)

    elif message.text.startswith('/manage_'):
        # –ö–æ–º–∞–Ω–¥–∞ /manage_USER_ID
        try:
            parts = message.text.split('_')
            if len(parts) < 2:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/manage_USER_ID`", parse_mode='Markdown')
                return
            target_user_id = parts[1]

            if target_user_id in users_db:
                user_info = users_db[target_user_id]
                sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                if user_info.get('subscription_end'):
                    try:
                        sub_end = datetime.datetime.strptime(user_info['subscription_end'], '%Y-%m-%d %H:%M:%S')
                        if sub_end > datetime.datetime.now():
                            sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')}"
                        else:
                            sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
                    except ValueError:
                        sub_status = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"

                message_text = f"üë§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"
                message_text += f"**–ò–º—è:** {user_info.get('first_name', 'N/A')}\n"
                message_text += f"**Username:** @{user_info.get('username', 'N/A')}\n"
                message_text += f"**ID:** `{target_user_id}`\n"
                message_text += f"**–ë–∞–ª–∞–Ω—Å:** {user_info.get('balance', 0)} ‚ÇΩ\n"
                message_text += f"**–ü–æ–¥–ø–∏—Å–∫–∞:** {sub_status}\n"

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                user_action_markup = types.InlineKeyboardMarkup(row_width=1)
                user_action_markup.add(
                    types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{target_user_id}"),
                    types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{target_user_id}"),
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel")
                )

                bot.send_message(message.chat.id, message_text, reply_markup=user_action_markup, parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
current_admin_action_data = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_edit_balance_') or call.data.startswith('admin_edit_subscription_'))
def handle_admin_edit_actions(call):
    user_id = str(call.from_user.id)
    if user_id != str(ADMIN_ID):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if call.data.startswith('admin_edit_balance_'):
        target_user_id = call.data.replace('admin_edit_balance_', '')
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:")
        current_admin_action_data[user_id] = {'action': 'edit_user_balance', 'target_user_id': target_user_id}
    elif call.data.startswith('admin_edit_subscription_'):
        target_user_id = call.data.replace('admin_edit_subscription_', '')
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS –∏–ª–∏ DD.MM.YYYY, –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        current_admin_action_data[user_id] = {'action': 'edit_user_subscription', 'target_user_id': target_user_id}

    bot.answer_callback_query(call.id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars ---
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    try:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre_checkout_query: {e}")

@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    user_id = str(message.from_user.id)
    payment_info = message.successful_payment
    # invoice_payload –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'stars_payment_{period}_{amount}'
    payload = payment_info.invoice_payload
    if payload.startswith('stars_payment_'):
        parts = payload.split('_')
        if len(parts) >= 4 and parts[0] == 'stars_payment':
            period_data_key = parts[2]
            original_amount_rub_str = parts[3]
            try:
                original_amount_rub = int(original_amount_rub_str)
            except ValueError:
                print(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –≤ payload: {payload}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ Stars —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
            current_end = users_db[user_id].get('subscription_end')
            now = datetime.datetime.now()
            if current_end:
                try:
                    current_end_dt = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    current_end_dt = now
            else:
                current_end_dt = now
            new_end = current_end_dt + datetime.timedelta(days=SUBSCRIPTION_PERIODS[period_data_key]['days'])
            if current_end_dt < now: # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                new_end = now + datetime.timedelta(days=SUBSCRIPTION_PERIODS[period_data_key]['days'])
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
            success, result = send_config_to_user(user_id, period_data_key, message.from_user.username or 'user', message.from_user.first_name or 'User')

            if success:
                 bot.send_message(message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                                 f"ü™ô –°–ø–∏—Å–∞–Ω–æ: {payment_info.total_amount} {payment_info.currency}\n"
                                                 f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                                 f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.")
            else:
                 bot.send_message(message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                                 f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            bot.send_message(ADMIN_ID, f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars: {payment_info.total_amount} {payment_info.currency}\n"
                                     f"–ù–∞ —Å—É–º–º—É: {original_amount_rub} ‚ÇΩ\n"
                                     f"–û—Ç: @{message.from_user.username} (ID: `{user_id}`)\n"
                                     f"–ü–µ—Ä–∏–æ–¥: {SUBSCRIPTION_PERIODS[period_data_key]['days']} –¥–Ω–µ–π",
                                     parse_mode='Markdown')
        else:
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {payload}")
    else:
        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ Stars, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ —á–µ—Ä–µ–∑ Stars: {payload}")
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–ª–∞—Ç—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram Stars –∏–ª–∏ –∫–∞—Ä—Ç—É.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
print("="*80 + "")
print("–í–ù–ò–ú–ê–ù–ò–ï: ADMIN_ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ '8320218178' –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π Telegram ID –≤ –∫–æ–¥–µ.")
print("–ë–µ–∑ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
print("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram.")
print("="*80 + "")

try:
    bot.polling(none_stop=True, interval=0, timeout=60)
except KeyboardInterrupt:
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    print("–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ systemd.")
