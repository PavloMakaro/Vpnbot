import telebot
from telebot import types
import json
import time
import datetime
import threading
import os
import subprocess
import signal
import sys

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
TOKEN = '8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY'
ADMIN_USERNAME = '@Gl1ch555'
ADMIN_ID = 8320218178 # –í–∞—à ID, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏
CARD_NUMBER = '2204320690808227'
CARD_HOLDER = 'Makarov Pavel Alexandrovich (Ozon Bank)'

PRICE_MONTH = 50
PRICE_2_MONTHS = 90 # –°–æ —Å–∫–∏–¥–∫–æ–π
PRICE_3_MONTHS = 120 # –°–æ —Å–∫–∏–¥–∫–æ–π

REFERRAL_BONUS_NEW_USER = 50 # –†—É–±–ª–µ–π –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
REFERRAL_BONUS_REFERRER = 25 # –†—É–±–ª–µ–π —Ç–æ–º—É –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
REFERRAL_BONUS_DAYS = 7 # –î–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

# –ö—É—Ä—Å Stars (1 –∑–≤–µ–∑–¥–∞ = 1.5 —Ä—É–±–ª—è)
STARS_TO_RUB = 1.5

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = telebot.TeleBot(TOKEN)

# --- –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ü–†–û–°–¢–û–ô JSON) ---
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

# --- –û–ß–ò–°–¢–ö–ê –ö–û–ù–§–ò–ì–û–í –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–£–°–ö–ï ---
def reset_configs():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    configs_db.clear()
    configs_db['1_month'] = []
    configs_db['2_months'] = []
    configs_db['3_months'] = []
    save_data('configs.json', configs_db)
    print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –æ—á–∏—â–µ–Ω—ã!")

# –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if not configs_db:
    reset_configs()

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
# users_db: { user_id: { 'balance': 0, 'subscription_end': None, 'referred_by': None, 'username': '...', 'first_name': '...', 'referrals_count': 0, 'used_configs': [] } }
# configs_db: { '1_month': [ { 'name': 'Germany 1', 'image': 'url_to_image', 'code': 'config_code', 'link': 'link_to_config', 'added_by': 'admin_username', 'used': False }, ... ], '2_months': [], '3_months': [] }
# payments_db: { payment_id: { 'user_id': ..., 'amount': ..., 'status': 'pending/confirmed/rejected', 'screenshot_id': ..., 'timestamp': ..., 'period': ... } }

# --- –ì–ï–ù–ï–†–ê–¢–û–† –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û ID –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ---
def generate_payment_id():
    return str(int(time.time() * 100000))

# --- –§–£–ù–ö–¶–ò–ò ---
def get_available_config(period):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
    if period not in configs_db or not configs_db[period]:
        return None
    
    for config in configs_db[period]:
        if not config.get('used', False):
            return config
    return None

def mark_config_used(period, config_link):
    """–ü–æ–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
    if period not in configs_db:
        return False
    
    for config in configs_db[period]:
        if config['link'] == config_link:
            config['used'] = True
            save_data('configs.json', configs_db)
            return True
    return False

def get_subscription_days_left(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    
    if not subscription_end:
        return 0
    
    end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
    now = datetime.datetime.now()
    
    if end_date <= now:
        return 0
    
    days_left = (end_date - now).days
    return max(0, days_left)

# --- –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò ---
def admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_manage_configs"),
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_confirm_payments"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_manage_user_configs"),
        types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_clear_all_configs"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    )
    return markup

def manage_configs_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_add_config"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete_config"),
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_configs"),
        types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data="admin_reset_configs"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def choose_period_keyboard(action):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"{action}_1_month"),
        types.InlineKeyboardButton("2 –º–µ—Å—è—Ü–∞", callback_data=f"{action}_2_months"),
        types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data=f"{action}_3_months"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_manage_configs")
    )
    return markup

def confirm_payments_keyboard(payment_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
    )
    return markup

def user_configs_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_user_configs"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user_config"),
        types.InlineKeyboardButton("–ü–µ—Ä–µ–≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_reissue_config"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def users_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_active_users"),
        types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users"),
        types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_edit_user"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def user_action_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{user_id}"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{user_id}"),
        types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data=f"admin_view_user_configs_{user_id}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_manage_users")
    )
    return markup

# --- –§–£–ù–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def main_menu_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN üöÄ", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="my_account"),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª", callback_data="support"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ü§ù", callback_data="referral_system")
    )
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†Ô∏è", callback_data="admin_panel"))
    return markup

def buy_vpn_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"1 –º–µ—Å—è—Ü ({PRICE_MONTH} ‚ÇΩ)", callback_data="choose_period_1_month"),
        types.InlineKeyboardButton(f"2 –º–µ—Å—è—Ü–∞ ({PRICE_2_MONTHS} ‚ÇΩ)", callback_data="choose_period_2_months"),
        types.InlineKeyboardButton(f"3 –º–µ—Å—è—Ü–∞ ({PRICE_3_MONTHS} ‚ÇΩ)", callback_data="choose_period_3_months"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def payment_methods_keyboard(period_callback_data, amount, user_balance, user_id):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Stars (1 –∑–≤–µ–∑–¥–∞ = 1.5 —Ä—É–±–ª—è)
    stars_amount = int(amount / STARS_TO_RUB)
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ï—Å–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É —Å –±–∞–ª–∞–Ω—Å–∞
    if user_balance > 0:
        needed_amount = max(0, amount - user_balance)
        if needed_amount == 0:
            markup.add(types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ)", callback_data=f"pay_balance_{period_callback_data}"))
        else:
            markup.add(types.InlineKeyboardButton(f"üí≥ –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ({user_balance} ‚ÇΩ –∏–∑ {amount} ‚ÇΩ)", callback_data=f"pay_partial_{period_callback_data}"))
    
    markup.add(
        types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({amount} ‚ÇΩ)", callback_data=f"pay_card_{period_callback_data}"),
        types.InlineKeyboardButton(f"‚≠ê –û–ø–ª–∞—Ç–∞ Telegram Stars ({stars_amount} Stars)", callback_data=f"pay_stars_{period_callback_data}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="buy_vpn")
    )
    return markup

def partial_payment_keyboard(period_data, user_balance, amount):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    needed_amount = amount - user_balance
    stars_amount = int(needed_amount / STARS_TO_RUB)
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"üí≥ –î–æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π ({needed_amount} ‚ÇΩ)", callback_data=f"pay_card_partial_{period_data}"),
        types.InlineKeyboardButton(f"‚≠ê –î–æ–ø–ª–∞—Ç–∏—Ç—å Stars ({stars_amount} Stars)", callback_data=f"pay_stars_partial_{period_data}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"choose_period_{period_data}")
    )
    return markup

def my_account_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="my_configs"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def my_configs_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    
    if subscription_end:
        end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        if end_date > datetime.datetime.now():
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            markup.add(types.InlineKeyboardButton("–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ 1 –º–µ—Å—è—Ü", callback_data="get_config_1_month"))
            markup.add(types.InlineKeyboardButton("–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ 2 –º–µ—Å—è—Ü–∞", callback_data="get_config_2_months"))
            markup.add(types.InlineKeyboardButton("–ö–æ–Ω—Ñ–∏–≥ –Ω–∞ 3 –º–µ—Å—è—Ü–∞", callback_data="get_config_3_months"))
    
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_account"))
    return markup

# --- –§–£–ù–ö–¶–ò–Ø –í–´–î–ê–ß–ò –ö–û–ù–§–ò–ì–ê ---
def send_config_to_user(user_id, period, username, first_name):
    """–í—ã–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ"""
    config = get_available_config(period)
    if not config:
        return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    mark_config_used(period, config['link'])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞
    config_name = f"{first_name} ({username}) - {period.replace('_', ' ')}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ñ–∏–≥–µ
    if 'used_configs' not in users_db[str(user_id)]:
        users_db[str(user_id)]['used_configs'] = []
    
    used_config = {
        'config_name': config['name'],
        'config_link': config['link'],
        'config_code': config['code'],
        'period': period,
        'issue_date': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'user_name': f"{first_name} (@{username})"
    }
    
    users_db[str(user_id)]['used_configs'].append(used_config)
    save_data('users.json', users_db)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(user_id, f"üîê **–í–∞—à VPN –∫–æ–Ω—Ñ–∏–≥**\n\n"
                                 f"üë§ **–ò–º—è:** {config_name}\n"
                                 f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {period.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                                 f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {config['link']}\n\n"
                                 f"üíæ _–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_",
                         parse_mode='Markdown')
        return True, config
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username if message.from_user.username else 'N/A'
    first_name = message.from_user.first_name if message.from_user.first_name else 'N/A'

    if user_id not in users_db:
        referred_by_id = None
        if len(message.text.split()) > 1:
            try:
                potential_referrer_id = message.text.split()[1]
                if potential_referrer_id in users_db and potential_referrer_id != user_id:
                    referred_by_id = potential_referrer_id
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    users_db[potential_referrer_id]['referrals_count'] = users_db[potential_referrer_id].get('referrals_count', 0) + 1
                    users_db[potential_referrer_id]['balance'] = users_db[potential_referrer_id].get('balance', 0) + REFERRAL_BONUS_REFERRER
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    if users_db[potential_referrer_id].get('subscription_end'):
                        current_end = datetime.datetime.strptime(users_db[potential_referrer_id]['subscription_end'], '%Y-%m-%d %H:%M:%S')
                        new_end = current_end + datetime.timedelta(days=REFERRAL_BONUS_DAYS)
                        users_db[potential_referrer_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                        bot.send_message(potential_referrer_id, 
                                         f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                                         f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")
                    else:
                        bot.send_message(potential_referrer_id, 
                                         f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                                         f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.")

                    save_data('users.json', users_db)
            except ValueError:
                pass # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

        users_db[user_id] = {
            'balance': REFERRAL_BONUS_NEW_USER,  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 50 —Ä—É–±
            'subscription_end': None,
            'referred_by': referred_by_id,
            'username': username,
            'first_name': first_name,
            'referrals_count': 0,
            'used_configs': []
        }
        save_data('users.json', users_db)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–Ω—É—Å–æ–º
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!\n\nüéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: {REFERRAL_BONUS_NEW_USER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!"
        if referred_by_id:
            welcome_text += f"\nü§ù –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
        
        bot.send_message(message.chat.id, welcome_text,
                         reply_markup=main_menu_keyboard(message.from_user.id))
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ VPN Bot!",
                         reply_markup=main_menu_keyboard(message.from_user.id))

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK-–ö–ù–û–ü–û–ö ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    if call.data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))
    
    # --- –ü–û–ö–£–ü–ö–ê VPN ---
    elif call.data == "buy_vpn":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=buy_vpn_keyboard())
    
    elif call.data.startswith("choose_period_"):
        period_data = call.data.replace("choose_period_", "") # 1_month, 2_months, 3_months
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        user_balance = users_db.get(user_id, {}).get('balance', 0)
        days_left = get_subscription_days_left(user_id)
        
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}.\n"
        message_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
        message_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
        
        if user_balance > 0:
            needed = amount - user_balance
            if needed > 0:
                message_text += f"üí∏ –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ: {user_balance} ‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞ + {needed} ‚ÇΩ –¥–æ–ø–ª–∞—Ç–∞\n"
            else:
                message_text += f"‚úÖ –•–≤–∞—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞!\n"
        
        if days_left > 0:
            message_text += f"üìÖ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ: {days_left} –¥–Ω–µ–π\n"
        
        message_text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        bot.edit_message_text(message_text, 
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id,
                              reply_markup=payment_methods_keyboard(period_data, amount, user_balance, user_id))

    elif call.data.startswith("pay_balance_"):
        period_data = call.data.replace("pay_balance_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        user_info = users_db.get(user_id, {})
        user_balance = user_info.get('balance', 0)
        
        if user_balance >= amount:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
            users_db[user_id]['balance'] = user_balance - amount
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            current_end = user_info.get('subscription_end')
            if current_end:
                current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
            else:
                current_end = datetime.datetime.now()

            add_days = 0
            if period_data == '1_month': add_days = 30
            elif period_data == '2_months': add_days = 60
            elif period_data == '3_months': add_days = 90
            
            new_end = current_end + datetime.timedelta(days=add_days)
            users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            save_data('users.json', users_db)

            # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            success, result = send_config_to_user(user_id, period_data, 
                                                user_info.get('username', 'user'), 
                                                user_info.get('first_name', 'User'))
            
            if success:
                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                      f"üí≥ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {amount} ‚ÇΩ\n"
                                      f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user_balance - amount} ‚ÇΩ\n"
                                      f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                      f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                      chat_id=call.message.chat.id, 
                                      message_id=call.message.message_id,
                                      reply_markup=main_menu_keyboard(user_id))
            else:
                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                      f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Gl1ch555",
                                      chat_id=call.message.chat.id, 
                                      message_id=call.message.message_id,
                                      reply_markup=main_menu_keyboard(user_id))
        else:
            bot.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                                  f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
                                  f"üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} ‚ÇΩ\n"
                                  f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {amount - user_balance} ‚ÇΩ",
                                  chat_id=call.message.chat.id, 
                                  message_id=call.message.message_id)

    elif call.data.startswith("pay_partial_"):
        period_data = call.data.replace("pay_partial_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        user_balance = users_db.get(user_id, {}).get('balance', 0)
        needed_amount = amount - user_balance
        
        message_text = f"üí≥ **–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        message_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
        message_text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {amount} ‚ÇΩ\n"
        message_text += f"üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ\n"
        message_text += f"üî∂ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å: {needed_amount} ‚ÇΩ\n\n"
        message_text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–ø–ª–∞—Ç—ã:"
        
        bot.edit_message_text(message_text,
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=partial_payment_keyboard(period_data, user_balance, amount))

    elif call.data.startswith("pay_card_partial_"):
        period_data = call.data.replace("pay_card_partial_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        user_balance = users_db.get(user_id, {}).get('balance', 0)
        needed_amount = amount - user_balance
        
        payment_id = generate_payment_id()
        payments_db[payment_id] = {
            'user_id': user_id,
            'amount': needed_amount,
            'status': 'pending',
            'screenshot_id': None,
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'period': period_data,
            'method': 'card_partial',
            'user_balance_used': user_balance
        }
        save_data('payments.json', payments_db)

        bot.edit_message_text(f"üí≥ **–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π**\n\n"
                              f"–î–ª—è –¥–æ–ø–ª–∞—Ç—ã {needed_amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}:\n\n"
                              f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {needed_amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`\n"
                              f"–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n\n"
                              f"2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
                              f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:\n"
                              f"‚Ä¢ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è {user_balance} ‚ÇΩ\n"
                              f"‚Ä¢ –ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n"
                              f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥\n\n"
                              f"**–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.**",
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id,
                              parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —á–∞—Å—Ç–∏—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        bot.send_message(ADMIN_ID, 
                         f"üîî –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {needed_amount} ‚ÇΩ –æ—Ç @{call.from_user.username} (ID: {user_id})\n"
                         f"–ü–µ—Ä–∏–æ–¥: {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                         f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_balance} ‚ÇΩ\n"
                         f"–û–∂–∏–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç.", 
                         reply_markup=main_menu_keyboard(ADMIN_ID))

    elif call.data.startswith("pay_stars_partial_"):
        period_data = call.data.replace("pay_stars_partial_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        user_balance = users_db.get(user_id, {}).get('balance', 0)
        needed_amount = amount - user_balance
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Stars (1 –∑–≤–µ–∑–¥–∞ = 1.5 —Ä—É–±–ª—è)
        stars_amount = int(needed_amount / STARS_TO_RUB)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
        try:
            prices = [types.LabeledPrice(label=f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ VPN –ø–æ–¥–ø–∏—Å–∫—É", amount=stars_amount)]  # –í –∑–≤–µ–∑–¥–∞—Ö
            
            bot.send_invoice(
                chat_id=call.message.chat.id,
                title=f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ VPN –ø–æ–¥–ø–∏—Å–∫—É",
                description=f"–î–æ–ø–ª–∞—Ç–∞ {needed_amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ')}",
                provider_token='',  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
                currency='XTR',  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                prices=prices,
                start_parameter=f'vpn_partial_{period_data}',
                invoice_payload=f'vpn_partial_{period_data}_{user_id}_{user_balance}'
            )
        except Exception as e:
            bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data.startswith("pay_card_"):
        period_data = call.data.replace("pay_card_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        payment_id = generate_payment_id()
        payments_db[payment_id] = {
            'user_id': user_id,
            'amount': amount,
            'status': 'pending',
            'screenshot_id': None,
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'period': period_data,
            'method': 'card'
        }
        save_data('payments.json', payments_db)

        bot.edit_message_text(f"–î–ª—è –æ–ø–ª–∞—Ç—ã {amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}:"
                              f"\n\n1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`"
                              f"\n–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`"
                              f"\n\n2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
                              f"\n\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É."
                              f"\n**–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.**",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        bot.send_message(ADMIN_ID, 
                         f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} ‚ÇΩ –æ—Ç @{call.from_user.username} (ID: {user_id}) –∑–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}. "
                         f"–û–∂–∏–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç.", 
                         reply_markup=main_menu_keyboard(ADMIN_ID))

    elif call.data.startswith("pay_stars_"):
        period_data = call.data.replace("pay_stars_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Stars (1 –∑–≤–µ–∑–¥–∞ = 1.5 —Ä—É–±–ª—è)
        stars_amount = int(amount / STARS_TO_RUB)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
        try:
            prices = [types.LabeledPrice(label=f"VPN –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ')}", amount=stars_amount)]  # –í –∑–≤–µ–∑–¥–∞—Ö
            
            bot.send_invoice(
                chat_id=call.message.chat.id,
                title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ')}",
                description=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}",
                provider_token='',  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
                currency='XTR',  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                prices=prices,
                start_parameter=f'vpn_subscription_{period_data}',
                invoice_payload=f'vpn_subscription_{period_data}_{user_id}'
            )
        except Exception as e:
            bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)

    # --- –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ---
    elif call.data == "my_account":
        user_info = users_db.get(user_id, {})
        subscription_end = user_info.get('subscription_end')
        balance = user_info.get('balance', 0)
        days_left = get_subscription_days_left(user_id)

        status_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        if days_left > 0:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π (–¥–æ {end_date.strftime('%d.%m.%Y')})"

        bot.edit_message_text(f"üë§ **–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
                              f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** {status_text}\n"
                              f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} ‚ÇΩ\n"
                              f"üë® **–í–∞—à–µ –∏–º—è:** {user_info.get('first_name', 'N/A')}\n"
                              f"üì± **Username:** @{user_info.get('username', 'N/A')}\n"
                              f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** {user_info.get('referrals_count', 0)}\n\n",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown',
                              reply_markup=my_account_keyboard())

    elif call.data == "my_configs":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=my_configs_keyboard(user_id))

    elif call.data.startswith("get_config_"):
        period_data = call.data.replace("get_config_", "")
        user_info = users_db.get(user_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        days_left = get_subscription_days_left(user_id)
        if days_left <= 0:
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            return
        
        # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        success, result = send_config_to_user(user_id, period_data, 
                                            user_info.get('username', 'user'), 
                                            user_info.get('first_name', 'User'))
        
        if success:
            bot.send_message(call.message.chat.id, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.")
        else:
            bot.send_message(call.message.chat.id, f"‚ùå {result}")

    # --- –ü–û–î–î–ï–†–ñ–ö–ê ---
    elif call.data == "support":
        bot.edit_message_text(f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ @Gl1ch555.\n"
                              f"–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))

    # --- –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ---
    elif call.data == "referral_system":
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        user_info = users_db.get(user_id, {})
        referrals_count = user_info.get('referrals_count', 0)
        balance = user_info.get('balance', 0)

        bot.edit_message_text(f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
                              f"üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                              f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                              f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏\n"
                              f"‚Ä¢ –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:\n"
                              f"  üéÅ **–ù–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é** –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_NEW_USER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üí∞ **–í–∞–º** –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_REFERRER} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üìÖ **–í–∞–º** –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                              f"üí∞ **–í–∞—à–∏ –±–æ–Ω—É—Å—ã:**\n"
                              f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals_count}\n"
                              f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referrals_count * REFERRAL_BONUS_REFERRER} ‚ÇΩ\n"
                              f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n\n"
                              f"üìé **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
                              f"`{referral_link}`\n\n"
                              f"üí∏ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏!",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown', reply_markup=main_menu_keyboard(user_id))

    # --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
    elif call.data == "admin_panel":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=main_menu_keyboard(user_id))

    elif call.data == "admin_clear_all_configs":
        if str(user_id) == str(ADMIN_ID):
            reset_configs()
            bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –æ—á–∏—â–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
                           reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_manage_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_show_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n\n"
            for period, configs_list in configs_db.items():
                message_text += f"**{period.replace('_', ' ').capitalize()}:**\n"
                if configs_list:
                    available_count = sum(1 for config in configs_list if not config.get('used', False))
                    message_text += f"  –í—Å–µ–≥–æ: {len(configs_list)}, –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
                    for i, config in enumerate(configs_list):
                        status = "‚úÖ" if not config.get('used', False) else "‚ùå"
                        message_text += f"  {i+1}. {status} {config['name']} - `{config['link']}`\n"
                else:
                    message_text += "  (–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤)\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_reset_configs":
        if str(user_id) == str(ADMIN_ID):
            reset_count = 0
            for period in configs_db:
                for config in configs_db[period]:
                    if config.get('used', False):
                        config['used'] = False
                        reset_count += 1
            save_data('configs.json', configs_db)
            bot.send_message(call.message.chat.id, f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {reset_count} –∫–æ–Ω—Ñ–∏–≥–æ–≤.",
                           reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_add_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞:", 
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=choose_period_keyboard("add_config"))
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("add_config_"):
        if str(user_id) == str(ADMIN_ID):
            period = call.data.replace("add_config_", "")
            bot.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {period.replace('_', ' ')}\n\n"
                                 f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
                                 f"–ò–º–µ–Ω–∞ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_add_configs_bulk, period)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_delete_config":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ ID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 0` –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ 1 –º–µ—Å—è—Ü).")
            bot.register_next_step_handler(call.message, process_delete_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_confirm_payments":
        if str(user_id) == str(ADMIN_ID):
            pending_payments = {pid: p_data for pid, p_data in payments_db.items() if p_data['status'] == 'pending' and p_data['screenshot_id']}
            if not pending_payments:
                bot.edit_message_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=admin_keyboard())
                return
            
            for payment_id, p_data in pending_payments.items():
                user_payment = users_db.get(p_data['user_id'])
                if user_payment:
                    payment_type = "üí≥ –û–±—ã—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
                    if p_data['method'] == 'card_partial':
                        payment_type = "üî∂ –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
                        payment_type += f" (–±–∞–ª–∞–Ω—Å: {p_data.get('user_balance_used', 0)} ‚ÇΩ)"
                    
                    bot.send_photo(ADMIN_ID, p_data['screenshot_id'], 
                                   caption=f"{payment_type}\n"
                                           f"ID: {payment_id}\n"
                                           f"–û—Ç: @{user_payment.get('username', 'N/A')} (ID: {p_data['user_id']})\n"
                                           f"–°—É–º–º–∞: {p_data['amount']} ‚ÇΩ\n"
                                           f"–ü–µ—Ä–∏–æ–¥: {p_data['period'].replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                                           f"–í—Ä–µ–º—è: {p_data['timestamp']}",
                                   reply_markup=confirm_payments_keyboard(payment_id))
            bot.send_message(ADMIN_ID, "üëÜ –≠—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_confirm_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_confirm_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'confirmed'
                
                target_user_id = payments_db[payment_id]['user_id']
                period_data = payments_db[payment_id]['period']
                payment_method = payments_db[payment_id]['method']
                
                # –î–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                if payment_method == 'card_partial':
                    user_balance_used = payments_db[payment_id].get('user_balance_used', 0)
                    if target_user_id in users_db and user_balance_used > 0:
                        users_db[target_user_id]['balance'] = max(0, users_db[target_user_id].get('balance', 0) - user_balance_used)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if target_user_id in users_db:
                    current_end = users_db[target_user_id].get('subscription_end')
                    if current_end:
                        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                    else:
                        current_end = datetime.datetime.now()

                    add_days = 0
                    if period_data == '1_month': add_days = 30
                    elif period_data == '2_months': add_days = 60
                    elif period_data == '3_months': add_days = 90
                    
                    new_end = current_end + datetime.timedelta(days=add_days)
                    users_db[target_user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                    save_data('users.json', users_db)

                    # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                    user_info = users_db[target_user_id]
                    success, result = send_config_to_user(target_user_id, period_data, 
                                                        user_info.get('username', 'user'), 
                                                        user_info.get('first_name', 'User'))
                    
                    if success:
                        if payment_method == 'card_partial':
                            user_balance_used = payments_db[payment_id].get('user_balance_used', 0)
                            bot.send_message(target_user_id, 
                                             f"‚úÖ –í–∞—à —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                             f"üí≥ –î–æ–ø–ª–∞—á–µ–Ω–æ –∫–∞—Ä—Ç–æ–π: {payments_db[payment_id]['amount']} ‚ÇΩ\n"
                                             f"üí∞ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {user_balance_used} ‚ÇΩ\n"
                                             f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                             f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                             reply_markup=main_menu_keyboard(target_user_id))
                        else:
                            bot.send_message(target_user_id, 
                                             f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                             f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                             f"–ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                             reply_markup=main_menu_keyboard(target_user_id))
                    else:
                        bot.send_message(target_user_id, 
                                         f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                         f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Gl1ch555")
                
                save_data('payments.json', payments_db)
                bot.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_reject_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_reject_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'rejected'
                save_data('payments.json', payments_db)
                
                target_user_id = payments_db[payment_id]['user_id']
                bot.send_message(target_user_id, 
                                 f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ (ID: {payment_id}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (@Gl1ch555) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
                                 reply_markup=main_menu_keyboard(target_user_id))
                
                bot.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏ ...

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ï–î–û–ü–õ–ê–¢–´ (Telegram Stars) ---
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    user_id = str(message.from_user.id)
    payment_info = message.successful_payment
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π Stars
    if 'partial' in payment_info.invoice_payload:
        payload_parts = payment_info.invoice_payload.split('_')
        if len(payload_parts) >= 5:
            period_data = payload_parts[2] + '_' + payload_parts[3]
            user_balance_used = int(payload_parts[4])
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_id = generate_payment_id()
            payments_db[payment_id] = {
                'user_id': user_id,
                'amount': payment_info.total_amount * STARS_TO_RUB,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä—É–±–ª–∏
                'status': 'confirmed',
                'screenshot_id': None,
                'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'period': period_data,
                'method': 'stars_partial',
                'user_balance_used': user_balance_used
            }
            save_data('payments.json', payments_db)
            
            # –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            if user_id in users_db:
                users_db[user_id]['balance'] = max(0, users_db[user_id].get('balance', 0) - user_balance_used)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in users_db:
                current_end = users_db[user_id].get('subscription_end')
                if current_end:
                    current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                else:
                    current_end = datetime.datetime.now()

                add_days = 0
                if period_data == '1_month': add_days = 30
                elif period_data == '2_months': add_days = 60
                elif period_data == '3_months': add_days = 90
                
                new_end = current_end + datetime.timedelta(days=add_days)
                users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                save_data('users.json', users_db)

                # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
                user_info = users_db[user_id]
                success, result = send_config_to_user(user_id, period_data, 
                                                    user_info.get('username', 'user'), 
                                                    user_info.get('first_name', 'User'))
                
                if success:
                    bot.send_message(user_id, 
                                     f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                     f"‚≠ê –î–æ–ø–ª–∞—á–µ–Ω–æ Stars: {payment_info.total_amount}\n"
                                     f"üí∞ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {user_balance_used} ‚ÇΩ\n"
                                     f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                     f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                     reply_markup=main_menu_keyboard(user_id))
                else:
                    bot.send_message(user_id, 
                                     f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                     f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Gl1ch555")
    else:
        # –û–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ Stars
        payload_parts = payment_info.invoice_payload.split('_')
        if len(payload_parts) >= 4:
            period_data = payload_parts[2] + '_' + payload_parts[3]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_id = generate_payment_id()
            payments_db[payment_id] = {
                'user_id': user_id,
                'amount': payment_info.total_amount * STARS_TO_RUB,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä—É–±–ª–∏
                'status': 'confirmed',
                'screenshot_id': None,
                'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'period': period_data,
                'method': 'stars'
            }
            save_data('payments.json', payments_db)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in users_db:
                current_end = users_db[user_id].get('subscription_end')
                if current_end:
                    current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                else:
                    current_end = datetime.datetime.now()

                add_days = 0
                if period_data == '1_month': add_days = 30
                elif period_data == '2_months': add_days = 60
                elif period_data == '3_months': add_days = 90
                
                new_end = current_end + datetime.timedelta(days=add_days)
                users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                save_data('users.json', users_db)

                # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
                user_info = users_db[user_id]
                success, result = send_config_to_user(user_id, period_data, 
                                                    user_info.get('username', 'user'), 
                                                    user_info.get('first_name', 'User'))
                
                if success:
                    bot.send_message(user_id, 
                                     f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                     f"‚≠ê –û–ø–ª–∞—á–µ–Ω–æ: {payment_info.total_amount} Stars\n"
                                     f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                     f"üîê –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                                     reply_markup=main_menu_keyboard(user_id))
                else:
                    bot.send_message(user_id, 
                                     f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                                     f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Gl1ch555")

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ò ---
def signal_handler(signum, frame):
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    bot.stop_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
signal.signal(signal.SIGTERM, signal_handler) # systemctl stop

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –æ—á–∏—â–µ–Ω—ã! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
    try:
        bot.polling(none_stop=True, interval=0, timeout=60)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemd.")
