--- START OF FILE ai_studio_code (3).py ---

import telebot
from telebot import types
import json
import time
import datetime
import threading
import os
import subprocess
import signal
import sys

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
TOKEN = '8338675458:AAG2jYEwJjcmWZAcwSpF1QJWPsqV-h2MnKY'
ADMIN_USERNAME = '@Gl1ch555'
ADMIN_ID = 8320218178 # –í–∞—à ID, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏
CARD_NUMBER = '2204320690808227'
CARD_HOLDER = 'Makarov Pavel Alexandrovich (Ozon Bank)'

PRICE_MONTH = 50
PRICE_2_MONTHS = 90 # –°–æ —Å–∫–∏–¥–∫–æ–π
PRICE_3_MONTHS = 120 # –°–æ —Å–∫–∏–¥–∫–æ–π

REFERRAL_BONUS_INVITER_RUB = 25 # –ë–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–Ω–∞ –±–∞–ª–∞–Ω—Å)
REFERRAL_BONUS_INVITER_DAYS = 7 # –ë–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
REFERRAL_BONUS_NEW_USER_RUB = 50 # –ë–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ

# –ö—É—Ä—Å Stars (1 –∑–≤–µ–∑–¥–∞ = 1.5 —Ä—É–±–ª—è)
STARS_TO_RUB = 1.5

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = telebot.TeleBot(TOKEN)

# --- –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ü–†–û–°–¢–û–ô JSON) ---
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
# users_db: { user_id: { 'balance': 0, 'subscription_end': None, 'referred_by': None, 'username': '...', 'first_name': '...', 'referrals_count': 0, 'used_configs': [], 'first_purchase_made': False } }
# configs_db: { '1_month': [ { 'name': 'Germany 1', 'image': 'url_to_image', 'code': 'config_code', 'link': 'link_to_config', 'added_by': 'admin_username', 'is_used': False }, ... ], '2_months': [], '3_months': [] }
# payments_db: { payment_id: { 'user_id': ..., 'amount': ..., 'status': 'pending/confirmed/rejected', 'screenshot_id': ..., 'timestamp': ..., 'period': ..., 'method': 'card/stars', 'balance_used': 0 } }

# --- –ì–ï–ù–ï–†–ê–¢–û–† –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û ID –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ---
def generate_payment_id():
    return str(int(time.time() * 100000))

# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É ---
def get_price_for_period(period):
    if period == "1_month":
        return PRICE_MONTH
    elif period == "2_months":
        return PRICE_2_MONTHS
    elif period == "3_months":
        return PRICE_3_MONTHS
    return 0

# --- –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò ---
def admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_manage_configs"),
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_confirm_payments"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_manage_user_configs"),
        types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_delete_all_configs"), # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    )
    return markup

def manage_configs_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_add_config"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete_config"),
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_configs"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def choose_period_keyboard(action):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"{action}_1_month"),
        types.InlineKeyboardButton("2 –º–µ—Å—è—Ü–∞", callback_data=f"{action}_2_months"),
        types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data=f"{action}_3_months"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_manage_configs")
    )
    return markup

def confirm_payments_keyboard(payment_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
    )
    return markup

def user_configs_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_user_configs"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user_config"),
        types.InlineKeyboardButton("–ü–µ—Ä–µ–≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_reissue_config"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def users_management_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_active_users"),
        types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users"),
        types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_edit_user"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def user_action_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{user_id}"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{user_id}"),
        types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data=f"admin_view_user_configs_{user_id}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_manage_users")
    )
    return markup

# --- –§–£–ù–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def main_menu_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN üöÄ", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="my_account"),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª", callback_data="support"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ü§ù", callback_data="referral_system")
    )
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†Ô∏è", callback_data="admin_panel"))
    return markup

def buy_vpn_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"1 –º–µ—Å—è—Ü ({PRICE_MONTH} ‚ÇΩ)", callback_data="choose_period_1_month"),
        types.InlineKeyboardButton(f"2 –º–µ—Å—è—Ü–∞ ({PRICE_2_MONTHS} ‚ÇΩ)", callback_data="choose_period_2_months"),
        types.InlineKeyboardButton(f"3 –º–µ—Å—è—Ü–∞ ({PRICE_3_MONTHS} ‚ÇΩ)", callback_data="choose_period_3_months"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def payment_options_keyboard(period_data, amount_to_pay, user_balance):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    if user_balance >= amount_to_pay:
        markup.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ ({amount_to_pay} ‚ÇΩ)", callback_data=f"pay_balance_{period_data}_{amount_to_pay}"))
    else:
        # –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ + –¥–æ–ø–ª–∞—Ç–∞
        remaining_amount = amount_to_pay - user_balance
        if user_balance > 0:
            markup.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ ({user_balance} ‚ÇΩ) + –î–æ–ø–ª–∞—Ç–∞ ({remaining_amount} ‚ÇΩ)", callback_data=f"confirm_partial_payment_{period_data}_{amount_to_pay}"))
        else:
            # –û–ø–ª–∞—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            markup.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({amount_to_pay} ‚ÇΩ)", callback_data=f"pay_card_{period_data}_{amount_to_pay}"))
            
            stars_amount = int(amount_to_pay / STARS_TO_RUB)
            if stars_amount > 0:
                markup.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∞ Telegram Stars ({stars_amount} Stars)", callback_data=f"pay_stars_{period_data}_{amount_to_pay}"))
    
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="buy_vpn"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–ø–ª–∞—Ç—ã
def surcharge_methods_keyboard(period_data, total_amount, balance_used):
    markup = types.InlineKeyboardMarkup(row_width=1)
    remaining_amount = total_amount - balance_used
    
    markup.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({remaining_amount} ‚ÇΩ)", callback_data=f"pay_card_{period_data}_{total_amount}_{balance_used}"))
    
    stars_amount = int(remaining_amount / STARS_TO_RUB)
    if stars_amount > 0:
        markup.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∞ Telegram Stars ({stars_amount} Stars)", callback_data=f"pay_stars_{period_data}_{total_amount}_{balance_used}"))
    
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"choose_period_{period_data}")) # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
    return markup


def my_account_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="my_configs"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def my_configs_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = users_db.get(str(user_id), {})
    subscription_end = user_info.get('subscription_end')
    
    if subscription_end:
        end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        if end_date > datetime.datetime.now():
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
            for period_key in ['1_month', '2_months', '3_months']:
                if any(cfg['period'] == period_key for cfg in user_info.get('used_configs', [])):
                     markup.add(types.InlineKeyboardButton(f"–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ {period_key.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}", callback_data=f"show_my_config_{period_key}"))
    
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_account"))
    return markup

# --- –§–£–ù–ö–¶–ò–Ø –í–´–î–ê–ß–ò/–ü–û–ö–ê–ó–ê –ö–û–ù–§–ò–ì–ê ---
def get_or_send_config_to_user(user_id, period, username, first_name):
    """
    –í—ã–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ –∏ –ø–æ–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.
    """
    user_info = users_db[str(user_id)]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    for used_config in user_info.get('used_configs', []):
        if used_config['period'] == period:
            return True, used_config # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥

    # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤ –±–∞–∑–µ
    available_configs = [cfg for cfg in configs_db.get(period, []) if not cfg.get('is_used', False)]
    
    if not available_configs:
        return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    config = available_configs[0]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞
    config_name_for_user = f"{first_name} ({username}) - {period.replace('_', ' ')}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ñ–∏–≥–µ –≤ used_configs –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'used_configs' not in user_info:
        user_info['used_configs'] = []
    
    used_config_entry = {
        'config_name': config['name'], # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –±–∞–∑—ã
        'config_link': config['link'],
        'config_code': config['code'],
        'period': period,
        'issue_date': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'user_name': f"{first_name} (@{username})",
        'is_active': True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–µ–Ω
    }
    
    user_info['used_configs'].append(used_config_entry)
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤ –æ–±—â–µ–π –±–∞–∑–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤
    for cfg in configs_db[period]:
        if cfg['code'] == config['code']:
            cfg['is_used'] = True
            break
            
    save_data('users.json', users_db)
    save_data('configs.json', configs_db)
    
    return True, used_config_entry


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username if message.from_user.username else 'N/A'
    first_name = message.from_user.first_name if message.from_user.first_name else 'N/A'

    if user_id not in users_db:
        referred_by_id = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if len(message.text.split()) > 1:
            try:
                potential_referrer_id = message.text.split()[1]
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if potential_referrer_id in users_db and potential_referrer_id != user_id:
                    referred_by_id = potential_referrer_id
            except ValueError:
                pass # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

        users_db[user_id] = {
            'balance': REFERRAL_BONUS_NEW_USER_RUB if referred_by_id else 0, # –ë–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            'subscription_end': None,
            'referred_by': referred_by_id,
            'username': username,
            'first_name': first_name,
            'referrals_count': 0,
            'used_configs': [],
            'first_purchase_made': False # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        }
        save_data('users.json', users_db)

        if referred_by_id:
            bot.send_message(user_id, f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ {REFERRAL_BONUS_NEW_USER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!")

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!",
                     reply_markup=main_menu_keyboard(message.from_user.id))

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK-–ö–ù–û–ü–û–ö ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    user_info = users_db.get(user_id, {})
    
    if call.data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))
    
    # --- –ü–û–ö–£–ü–ö–ê VPN ---
    elif call.data == "buy_vpn":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=buy_vpn_keyboard())
    
    elif call.data.startswith("choose_period_"):
        period_data = call.data.replace("choose_period_", "") # 1_month, 2_months, 3_months
        amount_to_pay = get_price_for_period(period_data)
        
        current_balance = user_info.get('balance', 0)
        
        message_text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}. "
                        f"–ö –æ–ø–ª–∞—Ç–µ: {amount_to_pay} ‚ÇΩ.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} ‚ÇΩ.\n\n")
        
        if current_balance >= amount_to_pay:
            message_text += "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –±–∞–ª–∞–Ω—Å–∞."
        elif current_balance > 0:
            remaining_amount = amount_to_pay - current_balance
            message_text += f"–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å {current_balance} ‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–ø–ª–∞—Ç–∏—Ç—å {remaining_amount} ‚ÇΩ."
        else:
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."

        bot.edit_message_text(message_text,
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=payment_options_keyboard(period_data, amount_to_pay, current_balance))

    # --- –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –±–∞–ª–∞–Ω—Å–∞ ---
    elif call.data.startswith("pay_balance_"):
        parts = call.data.split('_')
        period_data = f"{parts[2]}_{parts[3]}"
        amount_str = parts[4]
        total_amount = int(amount_str)
        
        current_balance = user_info.get('balance', 0)
        
        if current_balance >= total_amount:
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
            users_db[user_id]['balance'] -= total_amount
            save_data('users.json', users_db)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            update_user_subscription(user_id, period_data)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            payment_id = generate_payment_id()
            payments_db[payment_id] = {
                'user_id': user_id,
                'amount': total_amount,
                'status': 'confirmed',
                'screenshot_id': None,
                'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'period': period_data,
                'method': 'balance',
                'balance_used': total_amount
            }
            save_data('payments.json', payments_db)
            
            # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            issue_config_and_notify_user(user_id, period_data)
            
            bot.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞! "
                                  f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_db[user_id]['balance']} ‚ÇΩ.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=main_menu_keyboard(user_id))
            notify_admin_of_successful_payment(user_id, total_amount, period_data, 'balance', total_amount)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.edit_message_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=buy_vpn_keyboard())

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã ---
    elif call.data.startswith("confirm_partial_payment_"):
        parts = call.data.split('_')
        period_data = f"{parts[3]}_{parts[4]}"
        total_amount = int(parts[5])
        
        balance_used = min(user_info.get('balance', 0), total_amount)
        remaining_amount = total_amount - balance_used

        bot.edit_message_text(f"–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ {balance_used} ‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞.\n"
                              f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å {remaining_amount} ‚ÇΩ.\n"
                              f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–ø–ª–∞—Ç—ã:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=surcharge_methods_keyboard(period_data, total_amount, balance_used))

    # --- –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–ø–æ–ª–Ω–∞—è –∏–ª–∏ –¥–æ–ø–ª–∞—Ç–∞) ---
    elif call.data.startswith("pay_card_"):
        parts = call.data.split('_')
        period_data = f"{parts[2]}_{parts[3]}"
        total_amount = int(parts[4])
        balance_used = int(parts[5]) if len(parts) > 5 else 0 # –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞
        
        amount_to_transfer = total_amount - balance_used
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        if balance_used > 0:
            users_db[user_id]['balance'] -= balance_used
            save_data('users.json', users_db)

        payment_id = generate_payment_id()
        payments_db[payment_id] = {
            'user_id': user_id,
            'amount': total_amount, # –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
            'amount_to_transfer': amount_to_transfer, # –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–∞—Ä—Ç–µ
            'status': 'pending',
            'screenshot_id': None,
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'period': period_data,
            'method': 'card',
            'balance_used': balance_used
        }
        save_data('payments.json', payments_db)

        bot.edit_message_text(f"–î–ª—è –æ–ø–ª–∞—Ç—ã {amount_to_transfer} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}:"
                              f"\n\n1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount_to_transfer} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`"
                              f"\n–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`"
                              f"\n\n2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
                              f"\n\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É."
                              f"\n**–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.**",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        bot.send_message(ADMIN_ID, 
                         f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount_to_transfer} ‚ÇΩ (–æ–±—â–∞—è —Å—É–º–º–∞ {total_amount} ‚ÇΩ, —Å –±–∞–ª–∞–Ω—Å–∞ {balance_used} ‚ÇΩ) "
                         f"–æ—Ç @{call.from_user.username} (ID: {user_id}) –∑–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}. "
                         f"–û–∂–∏–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç.", 
                         reply_markup=main_menu_keyboard(ADMIN_ID))

    # --- –û–ø–ª–∞—Ç–∞ Telegram Stars (–ø–æ–ª–Ω–∞—è –∏–ª–∏ –¥–æ–ø–ª–∞—Ç–∞) ---
    elif call.data.startswith("pay_stars_"):
        parts = call.data.split('_')
        period_data = f"{parts[2]}_{parts[3]}"
        total_amount = int(parts[4])
        balance_used = int(parts[5]) if len(parts) > 5 else 0 # –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞
        
        amount_to_pay_stars = total_amount - balance_used
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        if balance_used > 0:
            users_db[user_id]['balance'] -= balance_used
            save_data('users.json', users_db)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Stars (1 –∑–≤–µ–∑–¥–∞ = 1.5 —Ä—É–±–ª—è)
        stars_amount = int(amount_to_pay_stars / STARS_TO_RUB)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
        try:
            prices = [types.LabeledPrice(label=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ')}", amount=stars_amount)]  # –í –∑–≤–µ–∑–¥–∞—Ö
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ Stars (pending) –¥–æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            payment_id = generate_payment_id()
            payments_db[payment_id] = {
                'user_id': user_id,
                'amount': total_amount,
                'status': 'pending_stars', # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Stars
                'screenshot_id': None,
                'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'period': period_data,
                'method': 'stars',
                'balance_used': balance_used,
                'stars_payload': f'vpn_subscription_{period_data}_{user_id}_{payment_id}' # –î–æ–±–∞–≤–ª—è–µ–º payment_id –≤ payload
            }
            save_data('payments.json', payments_db)

            bot.send_invoice(
                chat_id=call.message.chat.id,
                title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ')}",
                description=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}",
                provider_token='',  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
                currency='XTR',  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                prices=prices,
                start_parameter=f'vpn_subscription_{period_data}',
                invoice_payload=payments_db[payment_id]['stars_payload']
            )
        except Exception as e:
            bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)

    # --- –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ---
    elif call.data == "my_account":
        user_info = users_db.get(user_id, {})
        subscription_end = user_info.get('subscription_end')
        balance = user_info.get('balance', 0)

        status_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        remaining_days = 0
        if subscription_end:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            if end_date > datetime.datetime.now():
                delta = end_date - datetime.datetime.now()
                remaining_days = delta.days
                status_text = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')} (–û—Å—Ç–∞–ª–æ—Å—å: {remaining_days} –¥–Ω.)"
            else:
                status_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
                users_db[user_id]['subscription_end'] = None # –û–±–Ω—É–ª—è–µ–º, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
                for cfg in users_db[user_id].get('used_configs', []):
                    cfg['is_active'] = False
                save_data('users.json', users_db)

        bot.edit_message_text(f"üë§ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n"
                              f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}\n"
                              f"–ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
                              f"–í–∞—à–µ –∏–º—è: {user_info.get('first_name', 'N/A')}\n"
                              f"–í–∞—à username: @{user_info.get('username', 'N/A')}\n\n",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=my_account_keyboard())

    elif call.data == "my_configs":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=my_configs_keyboard(user_id))

    elif call.data.startswith("show_my_config_"):
        period_data = call.data.replace("show_my_config_", "")
        user_info = users_db.get(user_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_end = user_info.get('subscription_end')
        if not subscription_end:
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        
        end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        if end_date <= datetime.datetime.now():
            bot.send_message(call.message.chat.id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            return
        
        # –ò—â–µ–º —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        found_config = None
        for cfg in user_info.get('used_configs', []):
            if cfg['period'] == period_data and cfg.get('is_active', True):
                found_config = cfg
                break
        
        if found_config:
            bot.send_message(user_id, f"üîê **–í–∞—à VPN –∫–æ–Ω—Ñ–∏–≥**\n\n"
                                     f"üë§ **–ò–º—è:** {found_config['config_name']}\n"
                                     f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {found_config['period'].replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                                     f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥:** {found_config['config_link']}\n\n"
                                     f"üíæ _–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_",
                             parse_mode='Markdown')
            bot.answer_callback_query(call.id, "–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # --- –ü–û–î–î–ï–†–ñ–ö–ê ---
    elif call.data == "support":
        bot.edit_message_text(f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME}.\n"
                              f"–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))

    # --- –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ---
    elif call.data == "referral_system":
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        user_info = users_db.get(user_id, {})
        referrals_count = user_info.get('referrals_count', 0)
        balance = user_info.get('balance', 0)

        bot.edit_message_text(f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
                              f"üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                              f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                              f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏\n"
                              f"‚Ä¢ –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:\n"
                              f"  üîπ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç {REFERRAL_BONUS_NEW_USER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
                              f"‚Ä¢ –ö–æ–≥–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∞–µ—Ç **–ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É** –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                              f"  üîπ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_BONUS_INVITER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
                              f"  üîπ –ò {REFERRAL_BONUS_INVITER_DAYS} –¥–Ω–µ–π –∫ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                              f"üí∞ **–í–∞—à–∏ –±–æ–Ω—É—Å—ã:**\n"
                              f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ (—Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π): {referrals_count}\n"
                              f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n\n"
                              f"üìé **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
                              f"`{referral_link}`\n\n"
                              f"üí∏ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏!",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown', reply_markup=main_menu_keyboard(user_id))

    # --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
    elif call.data == "admin_panel":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=main_menu_keyboard(user_id))

    elif call.data == "admin_manage_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_show_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n\n"
            for period, configs_list in configs_db.items():
                message_text += f"**{period.replace('_', ' ').capitalize()}:**\n"
                if configs_list:
                    for i, config in enumerate(configs_list):
                        status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if not config.get('is_used', False) else "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
                        message_text += f"  {i+1}. –ò–º—è: {config['name']}, –ö–æ–¥: `{config['code']}`, –°—Ç–∞—Ç—É—Å: {status} (ID: {i})\n"
                else:
                    message_text += "  (–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤)\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_add_config":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞:", 
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=choose_period_keyboard("add_config"))
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("add_config_"):
        if str(user_id) == str(ADMIN_ID):
            period = call.data.replace("add_config_", "")
            bot.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {period.replace('_', ' ')}\n\n"
                                 f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, process_add_configs_bulk, period)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_delete_config":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ ID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 0` –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ 1 –º–µ—Å—è—Ü).")
            bot.register_next_step_handler(call.message, process_delete_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_delete_all_configs": # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
        if str(user_id) == str(ADMIN_ID):
            confirm_markup = types.InlineKeyboardMarkup(row_width=2)
            confirm_markup.add(
                types.InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="admin_confirm_delete_all_configs"),
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_configs")
            )
            bot.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –í–°–ï–• –ø–µ—Ä–∏–æ–¥–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=confirm_markup)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_confirm_delete_all_configs":
        if str(user_id) == str(ADMIN_ID):
            global configs_db
            configs_db = {'1_month': [], '2_months': [], '3_months': []}
            save_data('configs.json', configs_db)
            
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–º–µ—á–∞–µ–º –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
            for uid in users_db:
                users_db[uid]['used_configs'] = []
                # users_db[uid]['subscription_end'] = None # –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥–∏
            save_data('users.json', users_db)

            bot.edit_message_text("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏ —Å–≤–µ–¥–µ–Ω–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


    elif call.data == "admin_confirm_payments":
        if str(user_id) == str(ADMIN_ID):
            pending_payments = {pid: p_data for pid, p_data in payments_db.items() if p_data['status'] == 'pending' and p_data['screenshot_id']}
            if not pending_payments:
                bot.edit_message_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=admin_keyboard())
                return
            
            for payment_id, p_data in pending_payments.items():
                user_payment_info = users_db.get(p_data['user_id'])
                if user_payment_info:
                    amount_to_transfer = p_data.get('amount_to_transfer', p_data['amount'])
                    balance_used_info = f" (—Å –±–∞–ª–∞–Ω—Å–∞ {p_data.get('balance_used', 0)} ‚ÇΩ)" if p_data.get('balance_used', 0) > 0 else ""
                    
                    bot.send_photo(ADMIN_ID, p_data['screenshot_id'], 
                                   caption=f"–ü–ª–∞—Ç–µ–∂ ID: {payment_id}\n"
                                           f"–û—Ç: @{user_payment_info.get('username', 'N/A')} (ID: {p_data['user_id']})\n"
                                           f"–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount_to_transfer} ‚ÇΩ\n"
                                           f"–û–±—â–∞—è —Å—É–º–º–∞: {p_data['amount']} ‚ÇΩ{balance_used_info}\n"
                                           f"–ü–µ—Ä–∏–æ–¥: {p_data['period'].replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                                           f"–í—Ä–µ–º—è: {p_data['timestamp']}",
                                   reply_markup=confirm_payments_keyboard(payment_id))
            bot.send_message(ADMIN_ID, "üëÜ –≠—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_confirm_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_confirm_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'confirmed'
                
                target_user_id = payments_db[payment_id]['user_id']
                period_data = payments_db[payment_id]['period']
                balance_used_for_payment = payments_db[payment_id].get('balance_used', 0)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_user_subscription(target_user_id, period_data)

                # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                if not users_db[target_user_id].get('first_purchase_made', False):
                    users_db[target_user_id]['first_purchase_made'] = True
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    referrer_id = users_db[target_user_id].get('referred_by')
                    if referrer_id and referrer_id in users_db:
                        users_db[referrer_id]['referrals_count'] = users_db[referrer_id].get('referrals_count', 0) + 1
                        users_db[referrer_id]['balance'] = users_db[referrer_id].get('balance', 0) + REFERRAL_BONUS_INVITER_RUB
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                        if users_db[referrer_id].get('subscription_end'):
                            current_end_ref = datetime.datetime.strptime(users_db[referrer_id]['subscription_end'], '%Y-%m-%d %H:%M:%S')
                            new_end_ref = current_end_ref + datetime.timedelta(days=REFERRAL_BONUS_INVITER_DAYS)
                            users_db[referrer_id]['subscription_end'] = new_end_ref.strftime('%Y-%m-%d %H:%M:%S')
                            bot.send_message(referrer_id, 
                                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{users_db[target_user_id].get('username', 'N/A')} —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É! "
                                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_INVITER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_INVITER_DAYS} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")
                        else:
                            bot.send_message(referrer_id, 
                                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{users_db[target_user_id].get('username', 'N/A')} —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É! "
                                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_INVITER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.")
                save_data('users.json', users_db)

                # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                issue_config_and_notify_user(target_user_id, period_data)
                
                save_data('payments.json', payments_db)
                bot.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_reject_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_reject_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω
                balance_returned = payments_db[payment_id].get('balance_used', 0)
                if balance_returned > 0:
                    users_db[payments_db[payment_id]['user_id']]['balance'] += balance_returned
                    save_data('users.json', users_db)
                    bot.send_message(payments_db[payment_id]['user_id'], f"üí∞ {balance_returned} ‚ÇΩ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

                payments_db[payment_id]['status'] = 'rejected'
                save_data('payments.json', payments_db)
                
                target_user_id = payments_db[payment_id]['user_id']
                bot.send_message(target_user_id, 
                                 f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ (ID: {payment_id}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ({ADMIN_USERNAME}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
                                 reply_markup=main_menu_keyboard(target_user_id))
                
                bot.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_users_list":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
            for uid, u_data in users_db.items():
                sub_end_str = "–ù–µ—Ç"
                remaining_days = "N/A"
                if u_data.get('subscription_end'):
                    sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                    if sub_end > datetime.datetime.now():
                        delta = sub_end - datetime.datetime.now()
                        remaining_days = delta.days
                        sub_end_str = sub_end.strftime('%d.%m.%Y %H:%M') + f" ({remaining_days} –¥–Ω.)"
                    else:
                        sub_end_str = "–ò—Å—Ç–µ–∫–ª–∞"
                
                message_text += f"ID: {uid}\n" \
                                f"  –ò–º—è: {u_data.get('first_name', 'N/A')} (@{u_data.get('username', 'N/A')})\n" \
                                f"  –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end_str}\n" \
                                f"  –ë–∞–ª–∞–Ω—Å: {u_data.get('balance', 0)} ‚ÇΩ\n" \
                                f"  –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {u_data.get('referrals_count', 0)}\n\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_manage_users":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", 
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=users_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_active_users":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π):**\n\n"
            active_count = 0
            
            for uid, u_data in users_db.items():
                if u_data.get('subscription_end'):
                    sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                    if sub_end > datetime.datetime.now():
                        active_count += 1
                        referred_by = "–ù–µ—Ç"
                        if u_data.get('referred_by'):
                            referrer = users_db.get(u_data['referred_by'], {})
                            referred_by = f"@{referrer.get('username', 'N/A')} (ID: {u_data['referred_by']})"
                        
                        delta = sub_end - datetime.datetime.now()
                        remaining_days = delta.days

                        message_text += f"üë§ **{u_data.get('first_name', 'N/A')}** (@{u_data.get('username', 'N/A')})\n"
                        message_text += f"üÜî ID: `{uid}`\n"
                        message_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {u_data.get('balance', 0)} ‚ÇΩ\n"
                        message_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end.strftime('%d.%m.%Y %H:%M')} ({remaining_days} –¥–Ω.)\n"
                        message_text += f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {u_data.get('referrals_count', 0)}\n"
                        message_text += f"üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referred_by}\n"
                        message_text += f"‚ö° –î–µ–π—Å—Ç–≤–∏—è: /manage_{uid}\n\n"
            
            if active_count == 0:
                message_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            
            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_all_users":
        if str(user_id) == str(ADMIN_ID):
            message_text = f"**–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users_db)}):**\n\n"
            
            for i, (uid, u_data) in enumerate(users_db.items(), 1):
                sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                if u_data.get('subscription_end'):
                    sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                    if sub_end > datetime.datetime.now():
                        delta = sub_end - datetime.datetime.now()
                        sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y')} ({delta.days} –¥–Ω.)"
                    else:
                        sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
                
                message_text += f"{i}. **{u_data.get('first_name', 'N/A')}** (@{u_data.get('username', 'N/A')})\n"
                message_text += f"   üÜî: `{uid}` | {sub_status}\n"
                message_text += f"   üí∞: {u_data.get('balance', 0)} ‚ÇΩ | ü§ù: {u_data.get('referrals_count', 0)}\n"
                message_text += f"   ‚ö° /manage_{uid}\n\n"
            
            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_search_user":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            bot.register_next_step_handler(call.message, process_search_user)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_edit_user":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
            bot.register_next_step_handler(call.message, process_edit_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_edit_balance_"):
        if str(user_id) == str(ADMIN_ID):
            target_user_id = call.data.replace("admin_edit_balance_", "")
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:")
            bot.register_next_step_handler(call.message, process_edit_balance, target_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_edit_subscription_"):
        if str(user_id) == str(ADMIN_ID):
            target_user_id = call.data.replace("admin_edit_subscription_", "")
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):")
            bot.register_next_step_handler(call.message, process_edit_subscription, target_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_view_user_configs_"):
        if str(user_id) == str(ADMIN_ID):
            target_user_id = call.data.replace("admin_view_user_configs_", "")
            user_info = users_db.get(target_user_id, {})
            used_configs = user_info.get('used_configs', [])
            
            if used_configs:
                message_text = f"**–ö–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.get('first_name', 'N/A')} (@{user_info.get('username', 'N/A')}):**\n\n"
                for i, config in enumerate(used_configs, 1):
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if config.get('is_active', True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    message_text += f"{i}. **{config['config_name']}** ({status})\n"
                    message_text += f"   –ü–µ—Ä–∏–æ–¥: {config['period']}\n"
                    message_text += f"   –í—ã–¥–∞–Ω: {config['issue_date']}\n"
                    message_text += f"   –°—Å—ã–ª–∫–∞: {config['config_link']}\n\n"
            else:
                message_text = "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤."
            
            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_manage_user_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                                 chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 reply_markup=user_configs_management_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_show_user_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–í—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n\n"
            config_count = 0
            
            for uid, user_data in users_db.items():
                used_configs = user_data.get('used_configs', [])
                if used_configs:
                    message_text += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_data.get('first_name', 'N/A')} (@{user_data.get('username', 'N/A')}) ID: {uid}\n"
                    for i, config in enumerate(used_configs):
                        config_count += 1
                        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if config.get('is_active', True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                        message_text += f"  {i+1}. {config['config_name']} ({config['period']}) - {status}\n"
                        message_text += f"     –°—Å—ã–ª–∫–∞: {config['config_link']}\n"
                        message_text += f"     –í—ã–¥–∞–Ω: {config['issue_date']}\n\n"
            
            if config_count == 0:
                message_text = "‚ùå –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤."
            
            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_delete_user_config":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123456789 1`):")
            bot.register_next_step_handler(call.message, process_delete_user_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_reissue_config":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞:")
            bot.register_next_step_handler(call.message, process_reissue_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_broadcast":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
            bot.register_next_step_handler(call.message, process_broadcast_message)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞ ---
def update_user_subscription(user_id, period_data):
    if user_id in users_db:
        current_end = users_db[user_id].get('subscription_end')
        if current_end:
            current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
        else:
            current_end = datetime.datetime.now()

        add_days = 0
        if period_data == '1_month': add_days = 30
        elif period_data == '2_months': add_days = 60
        elif period_data == '3_months': add_days = 90
        
        new_end = current_end + datetime.timedelta(days=add_days)
        users_db[user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã)
        for cfg in users_db[user_id].get('used_configs', []):
            cfg['is_active'] = True
        save_data('users.json', users_db)
        return new_end
    return None

def issue_config_and_notify_user(user_id, period_data):
    user_info = users_db[user_id]
    new_end_date = datetime.datetime.strptime(user_info['subscription_end'], '%Y-%m-%d %H:%M:%S')

    success, result = get_or_send_config_to_user(user_id, period_data, 
                                                user_info.get('username', 'user'), 
                                                user_info.get('first_name', 'User'))
    
    if success:
        bot.send_message(user_id, 
                         f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                         f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end_date.strftime('%d.%m.%Y %H:%M')}\n"
                         f"–ö–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤—ã–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.",
                         reply_markup=main_menu_keyboard(user_id))
    else:
        bot.send_message(user_id, 
                         f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {result}\n"
                         f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ADMIN_USERNAME}")

def notify_admin_of_successful_payment(user_id, total_amount, period_data, method, balance_used=0):
    user_info = users_db[user_id]
    balance_used_info = f" (—Å –±–∞–ª–∞–Ω—Å–∞ {balance_used} ‚ÇΩ)" if balance_used > 0 else ""
    bot.send_message(ADMIN_ID, 
                     f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ {method} –Ω–∞ {total_amount} ‚ÇΩ{balance_used_info}\n"
                     f"–û—Ç: @{user_info.get('username', 'N/A')} (ID: {user_id})\n"
                     f"–ü–µ—Ä–∏–æ–¥: {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î ---
@bot.message_handler(commands=['manage'])
def handle_manage_command(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        user_id = message.text.split('_')[1]
        if user_id in users_db:
            user_info = users_db[user_id]
            sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            if user_info.get('subscription_end'):
                sub_end = datetime.datetime.strptime(user_info['subscription_end'], '%Y-%m-%d %H:%M:%S')
                if sub_end > datetime.datetime.now():
                    delta = sub_end - datetime.datetime.now()
                    sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')} ({delta.days} –¥–Ω.)"
                else:
                    sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            
            message_text = f"üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:**\n\n"
            message_text += f"**–ò–º—è:** {user_info.get('first_name', 'N/A')}\n"
            message_text += f"**Username:** @{user_info.get('username', 'N/A')}\n"
            message_text += f"**ID:** `{user_id}`\n"
            message_text += f"**–ë–∞–ª–∞–Ω—Å:** {user_info.get('balance', 0)} ‚ÇΩ\n"
            message_text += f"**–ü–æ–¥–ø–∏—Å–∫–∞:** {sub_status}\n"
            message_text += f"**–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:** {user_info.get('referrals_count', 0)}\n"
            message_text += f"**–ö–æ–Ω—Ñ–∏–≥–æ–≤ –≤—ã–¥–∞–Ω–æ:** {len(user_info.get('used_configs', []))}\n"
            
            bot.send_message(message.chat.id, message_text, 
                           reply_markup=user_action_keyboard(user_id),
                           parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /manage_USER_ID")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ï–î–û–ü–õ–ê–¢–´ (Telegram Stars) ---
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(pre_checkout_query):
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending_stars'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º invoice_payload –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    payload_parts = pre_checkout_query.invoice_payload.split('_')
    if len(payload_parts) >= 5: # vpn_subscription_{period_data}_{user_id}_{payment_id}
        payment_id_from_payload = payload_parts[4]
        if payment_id_from_payload in payments_db and payments_db[payment_id_from_payload]['status'] == 'pending_stars':
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
            return
    
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message="–ü–ª–∞—Ç–µ–∂ Stars –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    user_id = str(message.from_user.id)
    payment_info = message.successful_payment
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ invoice_payload
    payload_parts = payment_info.invoice_payload.split('_')
    if len(payload_parts) >= 5: # vpn_subscription_{period_data}_{user_id}_{payment_id}
        payment_id_from_payload = payload_parts[4]
        
        if payment_id_from_payload in payments_db and payments_db[payment_id_from_payload]['status'] == 'pending_stars':
            payment_record = payments_db[payment_id_from_payload]
            payment_record['status'] = 'confirmed'
            # Stars amount from Telegram is in smallest units, so amount is already correct.
            # Convert back to rubles for internal tracking if needed, or keep in Stars for clarity.
            # We store 'amount' as total rubles, 'balance_used' as rubles, so 'amount_to_transfer' is the Stars equivalent in rubles.
            payment_record['amount_to_transfer'] = payment_info.total_amount * STARS_TO_RUB # –°—É–º–º–∞, –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è Stars, –≤ —Ä—É–±–ª—è—Ö
            
            period_data = payment_record['period']
            total_amount = payment_record['amount']
            balance_used = payment_record['balance_used']

            save_data('payments.json', payments_db)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_subscription(user_id, period_data)

            # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if not users_db[user_id].get('first_purchase_made', False):
                users_db[user_id]['first_purchase_made'] = True
                referrer_id = users_db[user_id].get('referred_by')
                if referrer_id and referrer_id in users_db:
                    users_db[referrer_id]['referrals_count'] = users_db[referrer_id].get('referrals_count', 0) + 1
                    users_db[referrer_id]['balance'] = users_db[referrer_id].get('balance', 0) + REFERRAL_BONUS_INVITER_RUB
                    if users_db[referrer_id].get('subscription_end'):
                        current_end_ref = datetime.datetime.strptime(users_db[referrer_id]['subscription_end'], '%Y-%m-%d %H:%M:%S')
                        new_end_ref = current_end_ref + datetime.timedelta(days=REFERRAL_BONUS_INVITER_DAYS)
                        users_db[referrer_id]['subscription_end'] = new_end_ref.strftime('%Y-%m-%d %H:%M:%S')
                        bot.send_message(referrer_id, 
                                        f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{message.from_user.username} —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É! "
                                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_INVITER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_INVITER_DAYS} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")
                    else:
                        bot.send_message(referrer_id, 
                                        f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{message.from_user.username} —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É! "
                                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_INVITER_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.")
            save_data('users.json', users_db)

            # –í—ã–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            issue_config_and_notify_user(user_id, period_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            notify_admin_of_successful_payment(user_id, total_amount, period_data, 'Telegram Stars', balance_used)
        else:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ Stars. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.from_user.id)
    # –ò—â–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pending_payment = None
    for payment_id, p_data in payments_db.items():
        if p_data['user_id'] == user_id and p_data['status'] == 'pending' and p_data['screenshot_id'] is None:
            pending_payment = payment_id
            break
    
    if pending_payment:
        payments_db[pending_payment]['screenshot_id'] = message.photo[-1].file_id
        save_data('payments.json', payments_db)
        
        bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
                                         "–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        amount_to_transfer = payments_db[pending_payment].get('amount_to_transfer', payments_db[pending_payment]['amount'])
        balance_used_info = f" (—Å –±–∞–ª–∞–Ω—Å–∞ {payments_db[pending_payment].get('balance_used', 0)} ‚ÇΩ)" if payments_db[pending_payment].get('balance_used', 0) > 0 else ""

        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, 
                       caption=f"‚ùóÔ∏è –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ ID: {pending_payment}\n"
                               f"–û—Ç: @{message.from_user.username} (ID: {user_id})\n"
                               f"–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount_to_transfer} ‚ÇΩ\n"
                               f"–û–±—â–∞—è —Å—É–º–º–∞: {payments_db[pending_payment]['amount']} ‚ÇΩ{balance_used_info}\n"
                               f"–ü–µ—Ä–∏–æ–¥: {payments_db[pending_payment]['period'].replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}",
                       reply_markup=confirm_payments_keyboard(pending_payment))

# --- –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ) ---
def process_add_configs_bulk(message, period):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    if period not in configs_db:
        configs_db[period] = []
    
    links = message.text.strip().split('\n')
    added_count = 0
    
    for link in links:
        link = link.strip()
        if link and link.startswith(('http://', 'https://')):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            username = message.from_user.username if message.from_user.username else 'admin'
            config_name = f"Config_{period}_{len(configs_db[period]) + 1}"
            
            config_data = {
                'name': config_name,
                'image': None,
                'code': f"{period}_{len(configs_db[period]) + 1}_{datetime.datetime.now().strftime('%H%M%S')}",
                'link': link,
                'added_by': username,
                'is_used': False # –ù–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            }
            
            configs_db[period].append(config_data)
            added_count += 1
    
    save_data('configs.json', configs_db)
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {period.replace('_', ' ')}.", 
                     reply_markup=manage_configs_keyboard())

def process_delete_config(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        parts = message.text.strip().split()
        period = parts[0]
        config_id = int(parts[1])
        
        if period in configs_db and 0 <= config_id < len(configs_db[period]):
            deleted_config = configs_db[period].pop(config_id)
            save_data('configs.json', configs_db)
            bot.send_message(message.chat.id, f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ '{deleted_config['name']}' —É–¥–∞–ª–µ–Ω –∏–∑ –ø–µ—Ä–∏–æ–¥–∞ {period}.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ ID –∫–æ–Ω—Ñ–∏–≥–∞.")
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ø–µ—Ä–∏–æ–¥ ID` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 0`)", parse_mode='Markdown')

def process_search_user(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    search_term = message.text.strip()
    found_users = []
    
    # –ü–æ–∏—Å–∫ –ø–æ username (–±–µ–∑ @)
    if search_term.startswith('@'):
        search_term = search_term[1:]
    
    for uid, user_data in users_db.items():
        if (search_term.lower() in user_data.get('username', '').lower() or 
            search_term == uid or
            search_term.lower() in user_data.get('first_name', '').lower()):
            found_users.append((uid, user_data))
    
    if found_users:
        message_text = f"**–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_users)}**\n\n"
        for uid, user_data in found_users:
            sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            if user_data.get('subscription_end'):
                sub_end = datetime.datetime.strptime(user_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                if sub_end > datetime.datetime.now():
                    delta = sub_end - datetime.datetime.now()
                    sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y')} ({delta.days} –¥–Ω.)"
                else:
                    sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            
            message_text += f"üë§ **{user_data.get('first_name', 'N/A')}** (@{user_data.get('username', 'N/A')})\n"
            message_text += f"üÜî ID: `{uid}`\n"
            message_text += f"üìä {sub_status} | üí∞ {user_data.get('balance', 0)} ‚ÇΩ\n"
            message_text += f"‚ö° /manage_{uid}\n\n"
        
        bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def process_edit_user_id(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    target_user_id = message.text.strip()
    if target_user_id in users_db:
        user_info = users_db[target_user_id]
        sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
        if user_info.get('subscription_end'):
            sub_end = datetime.datetime.strptime(user_info['subscription_end'], '%Y-%m-%d %H:%M:%S')
            if sub_end > datetime.datetime.now():
                delta = sub_end - datetime.datetime.now()
                sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d.%m.%Y %H:%M')} ({delta.days} –¥–Ω.)"
            else:
                sub_status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
        
        message_text = f"üë§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
        message_text += f"**–ò–º—è:** {user_info.get('first_name', 'N/A')}\n"
        message_text += f"**Username:** @{user_info.get('username', 'N/A')}\n"
        message_text += f"**ID:** `{target_user_id}`\n"
        message_text += f"**–ë–∞–ª–∞–Ω—Å:** {user_info.get('balance', 0)} ‚ÇΩ\n"
        message_text += f"**–ü–æ–¥–ø–∏—Å–∫–∞:** {sub_status}\n"
        
        bot.send_message(message.chat.id, message_text, 
                       reply_markup=user_action_keyboard(target_user_id),
                       parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def process_edit_balance(message, target_user_id):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        new_balance = int(message.text.strip())
        old_balance = users_db[target_user_id].get('balance', 0)
        users_db[target_user_id]['balance'] = new_balance
        save_data('users.json', users_db)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑–º–µ–Ω–µ–Ω:\n"
                        f"–° {old_balance} ‚ÇΩ –Ω–∞ {new_balance} ‚ÇΩ")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(target_user_id, 
                        f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚ÇΩ")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def process_edit_subscription(message, target_user_id):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    new_subscription = message.text.strip()
    if new_subscription.lower() == '–Ω–µ—Ç':
        old_subscription = users_db[target_user_id].get('subscription_end')
        users_db[target_user_id]['subscription_end'] = None
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for cfg in users_db[target_user_id].get('used_configs', []):
            cfg['is_active'] = False
        save_data('users.json', users_db)
        
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–¥–∞–ª–µ–Ω–∞.")
        bot.send_message(target_user_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        try:
            new_end = datetime.datetime.strptime(new_subscription, '%d.%m.%Y %H:%M')
            users_db[target_user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã)
            for cfg in users_db[target_user_id].get('used_configs', []):
                cfg['is_active'] = True
            save_data('users.json', users_db)
            
            bot.send_message(message.chat.id, 
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}.")
            bot.send_message(target_user_id, 
                            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.strftime('%d.%m.%Y %H:%M')}")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

def process_delete_user_config(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        parts = message.text.strip().split()
        user_id = parts[0]
        config_index = int(parts[1]) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞—á–∏–Ω–∞—è —Å 1
        
        if user_id in users_db:
            used_configs = users_db[user_id].get('used_configs', [])
            if 0 <= config_index < len(used_configs):
                deleted_config = used_configs.pop(config_index)
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤ –æ–±—â–µ–π –±–∞–∑–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Ç–∞–º
                for period_key in configs_db:
                    for cfg in configs_db[period_key]:
                        if cfg['code'] == deleted_config['config_code']:
                            cfg['is_used'] = False
                            break
                
                users_db[user_id]['used_configs'] = used_configs
                save_data('users.json', users_db)
                save_data('configs.json', configs_db) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥–∞
                
                bot.send_message(message.chat.id, 
                                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω:\n"
                                f"–ò–º—è: {deleted_config['config_name']}\n"
                                f"–ü–µ—Ä–∏–æ–¥: {deleted_config['period']}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(user_id, 
                                f"‚ùå –í–∞—à –∫–æ–Ω—Ñ–∏–≥ '{deleted_config['config_name']}' –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä_–∫–æ–Ω—Ñ–∏–≥–∞`")

def process_reissue_config(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    try:
        user_id = message.text.strip()
        if user_id in users_db:
            user_info = users_db[user_id]
            bot.send_message(message.chat.id, 
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('first_name', 'N/A')} (@{user_info.get('username', 'N/A')})\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (1_month, 2_months, 3_months):")
            bot.register_next_step_handler(message, process_reissue_period, user_id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def process_reissue_period(message, user_id):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    period = message.text.strip()
    if period in ['1_month', '2_months', '3_months']:
        user_info = users_db[user_id]
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_db[user_id]['used_configs'] = [
            cfg for cfg in users_db[user_id].get('used_configs', []) if cfg['period'] != period
        ]
        save_data('users.json', users_db)

        success, result = get_or_send_config_to_user(user_id, period, 
                                                    user_info.get('username', 'user'), 
                                                    user_info.get('first_name', 'User'))
        
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ã–¥–∞–ª –≤–∞–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –ø–µ—Ä–∏–æ–¥ {period.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–¥–∞—á–µ: {result}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1_month, 2_months, 3_months")

def process_broadcast_message(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    
    broadcast_text = message.text
    sent_count
