import telebot
from telebot import types
import json
import time
import datetime
import threading

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
TOKEN = '8217097426:AAEXU3BJ55Bkx-cfOEtRTxkPaOYC1zvRfO8'
ADMIN_USERNAME = '@Gl1ch555'
ADMIN_ID = 8320218178 # –í–∞—à ID, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏
CARD_NUMBER = '2204320690808227'
CARD_HOLDER = 'Makarov Pavel Alexandrovich (Ozon Bank)'

PRICE_MONTH = 50
PRICE_2_MONTHS = 90 # –°–æ —Å–∫–∏–¥–∫–æ–π
PRICE_3_MONTHS = 120 # –°–æ —Å–∫–∏–¥–∫–æ–π

REFERRAL_BONUS_RUB = 25
REFERRAL_BONUS_DAYS = 7 # –î–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = telebot.TeleBot(TOKEN)

# --- –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ü–†–û–°–¢–û–ô JSON) ---
# –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–£–ë–î (PostgreSQL, SQLite)
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

users_db = load_data('users.json')
configs_db = load_data('configs.json')
payments_db = load_data('payments.json')

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
# users_db: { user_id: { 'balance': 0, 'subscription_end': None, 'referred_by': None, 'username': '...', 'first_name': '...', 'referrals_count': 0 } }
# configs_db: { '1_month': [ { 'name': 'Germany 1', 'image': 'url_to_image', 'code': 'config_code', 'link': 'link_to_config' }, ... ], '2_months': [], '3_months': [] }
# payments_db: { payment_id: { 'user_id': ..., 'amount': ..., 'status': 'pending/confirmed/rejected', 'screenshot_id': ..., 'timestamp': ..., 'period': ... } }

# --- –ì–ï–ù–ï–†–ê–¢–û–† –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û ID –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ---
def generate_payment_id():
    return str(int(time.time() * 100000))

# --- –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò ---
def admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="admin_manage_configs"),
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_confirm_payments"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_edit_user"),
        types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    )
    return markup

def manage_configs_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_add_config"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete_config"),
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_show_configs"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
    )
    return markup

def confirm_payments_keyboard(payment_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}"),
        types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")
    )
    return markup

# --- –§–£–ù–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def main_menu_keyboard(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN üöÄ", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§", callback_data="my_account"),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª", callback_data="support"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ü§ù", callback_data="referral_system")
    )
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†Ô∏è", callback_data="admin_panel"))
    return markup

def buy_vpn_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"1 –º–µ—Å—è—Ü ({PRICE_MONTH} ‚ÇΩ)", callback_data="choose_period_1_month"),
        types.InlineKeyboardButton(f"2 –º–µ—Å—è—Ü–∞ ({PRICE_2_MONTHS} ‚ÇΩ)", callback_data="choose_period_2_months"),
        types.InlineKeyboardButton(f"3 –º–µ—Å—è—Ü–∞ ({PRICE_3_MONTHS} ‚ÇΩ)", callback_data="choose_period_3_months"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def payment_methods_keyboard(period_callback_data, amount):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({amount} ‚ÇΩ)", callback_data=f"pay_card_{period_callback_data}"),
        types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∞ Telegram Stars ({amount} Stars)", callback_data=f"pay_stars_{period_callback_data}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="buy_vpn")
    )
    return markup

def my_account_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="request_config"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_vpn"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username if message.from_user.username else 'N/A'
    first_name = message.from_user.first_name if message.from_user.first_name else 'N/A'

    if user_id not in users_db:
        referred_by_id = None
        if len(message.text.split()) > 1:
            try:
                potential_referrer_id = message.text.split()[1]
                if potential_referrer_id in users_db and potential_referrer_id != user_id:
                    referred_by_id = potential_referrer_id
                    users_db[potential_referrer_id]['referrals_count'] = users_db[potential_referrer_id].get('referrals_count', 0) + 1
                    users_db[potential_referrer_id]['balance'] = users_db[potential_referrer_id].get('balance', 0) + REFERRAL_BONUS_RUB
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    if users_db[potential_referrer_id].get('subscription_end'):
                        current_end = datetime.datetime.strptime(users_db[potential_referrer_id]['subscription_end'], '%Y-%m-%d %H:%M:%S')
                        new_end = current_end + datetime.timedelta(days=REFERRAL_BONUS_DAYS)
                        users_db[potential_referrer_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                        bot.send_message(potential_referrer_id, 
                                         f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                                         f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")
                    else:
                        bot.send_message(potential_referrer_id, 
                                         f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                                         f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.")

                    save_data('users.json', users_db)
            except ValueError:
                pass # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

        users_db[user_id] = {
            'balance': 0,
            'subscription_end': None,
            'referred_by': referred_by_id,
            'username': username,
            'first_name': first_name,
            'referrals_count': 0
        }
        save_data('users.json', users_db)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot!",
                     reply_markup=main_menu_keyboard(message.from_user.id))

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK-–ö–ù–û–ü–û–ö ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    if call.data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))
    
    # --- –ü–û–ö–£–ü–ö–ê VPN ---
    elif call.data == "buy_vpn":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=buy_vpn_keyboard())
    
    elif call.data.startswith("choose_period_"):
        period_data = call.data.replace("choose_period_", "") # 1_month, 2_months, 3_months
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}. "
                              f"–ö –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=payment_methods_keyboard(period_data, amount))

    elif call.data.startswith("pay_card_"):
        period_data = call.data.replace("pay_card_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        payment_id = generate_payment_id()
        payments_db[payment_id] = {
            'user_id': user_id,
            'amount': amount,
            'status': 'pending',
            'screenshot_id': None,
            'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'period': period_data,
            'method': 'card'
        }
        save_data('payments.json', payments_db)

        bot.edit_message_text(f"–î–ª—è –æ–ø–ª–∞—Ç—ã {amount} ‚ÇΩ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}:"
                              f"\n\n1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: `{CARD_NUMBER}`"
                              f"\n–î–µ—Ä–∂–∞—Ç–µ–ª—å: `{CARD_HOLDER}`"
                              f"\n\n2. **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
                              f"\n\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É."
                              f"\n**–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.**",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        bot.send_message(ADMIN_ID, 
                         f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} ‚ÇΩ –æ—Ç @{call.from_user.username} (ID: {user_id}) –∑–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}. "
                         f"–û–∂–∏–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç.", 
                         reply_markup=main_menu_keyboard(ADMIN_ID)) # –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    elif call.data.startswith("pay_stars_"):
        period_data = call.data.replace("pay_stars_", "")
        amount = 0
        if period_data == "1_month":
            amount = PRICE_MONTH
        elif period_data == "2_months":
            amount = PRICE_2_MONTHS
        elif period_data == "3_months":
            amount = PRICE_3_MONTHS
        
        # –î–ª—è –æ–ø–ª–∞—Ç—ã Stars –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ Telegram Payments.
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å invoices.
        bot.edit_message_text(f"–û–ø–ª–∞—Ç–∞ Telegram Stars –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! "
                              f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.\n\n"
                              f"–ö –æ–ø–ª–∞—Ç–µ: {amount} Stars.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=buy_vpn_keyboard())

    # --- –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ---
    elif call.data == "my_account":
        user_info = users_db.get(user_id, {})
        subscription_end = user_info.get('subscription_end')
        balance = user_info.get('balance', 0)

        status_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        if subscription_end:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            if end_date > datetime.datetime.now():
                status_text = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}"
            else:
                status_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
                users_db[user_id]['subscription_end'] = None # –û–±–Ω—É–ª—è–µ–º, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞
                save_data('users.json', users_db)

        bot.edit_message_text(f"üë§ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n"
                              f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status_text}\n"
                              f"–ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
                              f"–í–∞—à–µ –∏–º—è: {user_info.get('first_name', 'N/A')}\n"
                              f"–í–∞—à username: @{user_info.get('username', 'N/A')}\n\n",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=my_account_keyboard())

    elif call.data == "request_config":
        user_info = users_db.get(user_id, {})
        subscription_end = user_info.get('subscription_end')

        if subscription_end:
            end_date = datetime.datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
            if end_date > datetime.datetime.now():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥–∏
                available_configs = []
                for period, configs_list in configs_db.items():
                    available_configs.extend(configs_list)

                if available_configs:
                    # –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è –∫–æ–Ω—Ñ–∏–≥, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                    config = available_configs[0]
                    bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à VPN –∫–æ–Ω—Ñ–∏–≥:")
                    if config.get('image'):
                        bot.send_photo(call.message.chat.id, config['image'])
                    bot.send_message(call.message.chat.id, 
                                     f"**–ò–º—è:** {config['name']}\n"
                                     f"**–ö–æ–¥:** `{config['code']}`\n"
                                     f"**–°—Å—ã–ª–∫–∞:** {config['link']}",
                                     parse_mode='Markdown')
                else:
                    bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN-–∫–æ–Ω—Ñ–∏–≥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else:
                bot.send_message(call.message.chat.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ.")
        else:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.")
        
        bot.send_message(call.message.chat.id, "–ß—Ç–æ –µ—â–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu_keyboard(user_id))

    # --- –ü–û–î–î–ï–†–ñ–ö–ê ---
    elif call.data == "support":
        bot.edit_message_text(f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ @Gl1ch555.\n"
                              f"–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=main_menu_keyboard(user_id))

    # --- –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ---
    elif call.data == "referral_system":
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        user_info = users_db.get(user_id, {})
        referrals_count = user_info.get('referrals_count', 0)
        balance = user_info.get('balance', 0)

        bot.edit_message_text(f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
                              f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
                              f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, "
                              f"–≤—ã –ø–æ–ª—É—á–∏—Ç–µ {REFERRAL_BONUS_RUB} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ {REFERRAL_BONUS_DAYS} –¥–Ω–µ–π –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
                              f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: `{referral_link}`\n\n"
                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
                              f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown', reply_markup=main_menu_keyboard(user_id))

    # --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
    elif call.data == "admin_panel":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=main_menu_keyboard(user_id))

    elif call.data == "admin_manage_configs":
        if str(user_id) == str(ADMIN_ID):
            bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_show_configs":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏:**\n\n"
            for period, configs_list in configs_db.items():
                message_text += f"**{period.replace('_', ' ').capitalize()}:**\n"
                if configs_list:
                    for i, config in enumerate(configs_list):
                        message_text += f"  {i+1}. –ò–º—è: {config['name']}, –ö–æ–¥: `{config['code']}` (ID: {i})\n"
                else:
                    message_text += "  (–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤)\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=manage_configs_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_add_config":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                                  "`–ø–µ—Ä–∏–æ–¥_–ø–æ–¥–ø–∏—Å–∫–∏|–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–Ω—Ñ–∏–≥–∞|url_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è|–∫–æ–¥_–∫–æ–Ω—Ñ–∏–≥–∞|—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–æ–Ω—Ñ–∏–≥`\n"
                                                  "–ü—Ä–∏–º–µ—Ä: `1_month|Germany 1|https://example.com/image.png|config_code_here|https://example.com/config.ovpn`\n"
                                                  "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã: `1_month`, `2_months`, `3_months`\n"
                                                  "–ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `none` –≤–º–µ—Å—Ç–æ url.")
            bot.register_next_step_handler(call.message, process_add_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_delete_config":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ ID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1_month 0` –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ 1 –º–µ—Å—è—Ü).")
            bot.register_next_step_handler(call.message, process_delete_config)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_confirm_payments":
        if str(user_id) == str(ADMIN_ID):
            pending_payments = {pid: p_data for pid, p_data in payments_db.items() if p_data['status'] == 'pending' and p_data['screenshot_id']}
            if not pending_payments:
                bot.edit_message_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=admin_keyboard())
                return
            
            for payment_id, p_data in pending_payments.items():
                user_payment = users_db.get(p_data['user_id'])
                if user_payment:
                    bot.send_photo(ADMIN_ID, p_data['screenshot_id'], 
                                   caption=f"–ü–ª–∞—Ç–µ–∂ ID: {payment_id}\n"
                                           f"–û—Ç: @{user_payment.get('username', 'N/A')} (ID: {p_data['user_id']})\n"
                                           f"–°—É–º–º–∞: {p_data['amount']} ‚ÇΩ\n"
                                           f"–ü–µ—Ä–∏–æ–¥: {p_data['period'].replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                                           f"–í—Ä–µ–º—è: {p_data['timestamp']}",
                                   reply_markup=confirm_payments_keyboard(payment_id))
            bot.send_message(ADMIN_ID, "üëÜ –≠—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_confirm_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_confirm_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'confirmed'
                
                target_user_id = payments_db[payment_id]['user_id']
                period_data = payments_db[payment_id]['period']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if target_user_id in users_db:
                    current_end = users_db[target_user_id].get('subscription_end')
                    if current_end:
                        current_end = datetime.datetime.strptime(current_end, '%Y-%m-%d %H:%M:%S')
                    else:
                        current_end = datetime.datetime.now()

                    add_days = 0
                    if period_data == '1_month': add_days = 30
                    elif period_data == '2_months': add_days = 60
                    elif period_data == '3_months': add_days = 90
                    
                    new_end = current_end + datetime.timedelta(days=add_days)
                    users_db[target_user_id]['subscription_end'] = new_end.strftime('%Y-%m-%d %H:%M:%S')
                    save_data('users.json', users_db)

                    bot.send_message(target_user_id, 
                                     f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_data.replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                                     f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                                     f"–ú–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
                                     reply_markup=main_menu_keyboard(target_user_id))
                
                save_data('payments.json', payments_db)
                bot.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data.startswith("admin_reject_"):
        if str(user_id) == str(ADMIN_ID):
            payment_id = call.data.replace("admin_reject_", "")
            if payment_id in payments_db and payments_db[payment_id]['status'] == 'pending':
                payments_db[payment_id]['status'] = 'rejected'
                save_data('payments.json', payments_db)
                
                target_user_id = payments_db[payment_id]['user_id']
                bot.send_message(target_user_id, 
                                 f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ (ID: {payment_id}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (@Gl1ch555) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
                                 reply_markup=main_menu_keyboard(target_user_id))
                
                bot.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            else:
                bot.edit_message_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_users_list":
        if str(user_id) == str(ADMIN_ID):
            message_text = "**–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
            for uid, u_data in users_db.items():
                sub_end_str = "–ù–µ—Ç"
                if u_data.get('subscription_end'):
                    sub_end = datetime.datetime.strptime(u_data['subscription_end'], '%Y-%m-%d %H:%M:%S')
                    if sub_end > datetime.datetime.now():
                        sub_end_str = sub_end.strftime('%d.%m.%Y %H:%M')
                    else:
                        sub_end_str = "–ò—Å—Ç–µ–∫–ª–∞"
                
                message_text += f"ID: {uid}\n" \
                                f"  –ò–º—è: {u_data.get('first_name', 'N/A')} (@{u_data.get('username', 'N/A')})\n" \
                                f"  –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end_str}\n" \
                                f"  –ë–∞–ª–∞–Ω—Å: {u_data.get('balance', 0)} ‚ÇΩ\n" \
                                f"  –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {u_data.get('referrals_count', 0)}\n\n"
            
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  parse_mode='Markdown', reply_markup=admin_keyboard())
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif call.data == "admin_edit_user":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.")
            bot.register_next_step_handler(call.message, process_edit_user_id)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "admin_broadcast":
        if str(user_id) == str(ADMIN_ID):
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            bot.register_next_step_handler(call.message, process_broadcast_message)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.from_user.id)
    # –ò—â–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pending_payment = None
    for payment_id, p_data in payments_db.items():
        if p_data['user_id'] == user_id and p_data['status'] == 'pending' and p_data['screenshot_id'] is None:
            pending_payment = payment_id
            break
    
    if pending_payment:
        payments_db[pending_payment]['screenshot_id'] = message.photo[-1].file_id
        save_data('payments.json', payments_db)
        
        bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
                                         "–í–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, 
                       caption=f"‚ùóÔ∏è –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ ID: {pending_payment}\n"
                               f"–û—Ç: @{message.from_user.username} (ID: {user_id})\n"
                               f"–°—É–º–º–∞: {payments_db[pending_payment]['amount']} ‚ÇΩ\n"
                               f"–ü–µ—Ä–∏–æ–¥: {payments_db[pending_payment]['period'].replace('_', ' ').replace('month', '–º–µ—Å—è—Ü').replace('s', '–∞')}\n"
                               f"–í—Ä–µ–º—è: {payments_db[pending_payment]['timestamp']}",
                       reply_markup=confirm_payments_keyboard(pending_payment))
    else:
        bot.send_message(message.chat.id, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. "
                                         "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –ø–ª–∞—Ç–µ–∂. "
                                         "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (@Gl1ch555).")

# --- –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –ê–î–ú–ò–ù–ö–ò ---
def process_add_config(message):
    user_id = str(message.from_user.id)
    if user_id != str(ADMIN_ID): return

    try:
        parts = message.text.split('|')
        if len(parts) != 5:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ø–µ—Ä–∏–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ|url_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è|–∫–æ–¥|—Å—Å—ã–ª–∫–∞`")
        
        period, name, image_url, code, link = [p.strip() for p in parts]
        if period not in ['1_month', '2_months', '3_months']:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.")
        
        new_config = {
            'name': name,
            'image': image_url if image_url.lower() != 'none' else None,
            'code': code,
            'link': link
        }
        
        if period not in configs_db:
            configs_db[period] = []
        configs_db[period].append(new_config)
        save_data('configs.json', configs_db)
        
        bot.send_message(user_id, "–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_keyboard())
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admin_keyboard())

def process_delete_config(message):
    user_id = str(message.from_user.id)
    if user_id != str(ADMIN_ID): return

    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ø–µ—Ä–∏–æ–¥_–ø–æ–¥–ø–∏—Å–∫–∏ ID`")
        
        period, config_id_str = parts
        config_id = int(config_id_str)

        if period not in configs_db:
            raise ValueError(f"–ü–µ—Ä–∏–æ–¥ '{period}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        if not (0 <= config_id < len(configs_db[period])):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
        
        deleted_config = configs_db[period].pop(config_id)
        save_data('configs.json', configs_db)
        
        bot.send_message(user_id, f"–ö–æ–Ω—Ñ–∏–≥ '{deleted_config['name']}' ({period}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=admin_keyboard())
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admin_keyboard())

def process_edit_user_id(message):
    user_id = str(message.from_user.id)
    if user_id != str(ADMIN_ID): return

    target_user_id = message.text.strip()
    if target_user_id not in users_db:
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_keyboard())
        return

    bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} (@{users_db[target_user_id].get('username', 'N/A')}).\n"
                               "–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n"
                               "`balance <–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ>` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `balance 100`)\n"
                               "`sub_end <–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°>` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `sub_end 2024-12-31 23:59:59` –∏–ª–∏ `sub_end none` –¥–ª—è —Å–±—Ä–æ—Å–∞)\n"
                               "–ò–ª–∏ `cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    bot.register_next_step_handler(message, process_edit_user_data, target_user_id)

def process_edit_user_data(message, target_user_id):
    user_id = str(message.from_user.id)
    if user_id != str(ADMIN_ID): return

    command = message.text.strip().lower()

    if command == 'cancel':
        bot.send_message(user_id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard())
        return

    try:
        parts = command.split(' ', 1)
        action = parts[0]
        value = parts[1] if len(parts) > 1 else None

        if action == 'balance' and value:
            new_balance = int(value)
            users_db[target_user_id]['balance'] = new_balance
            bot.send_message(user_id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance} ‚ÇΩ.", reply_markup=admin_keyboard())
            bot.send_message(target_user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚ÇΩ.")
        elif action == 'sub_end' and value:
            if value.lower() == 'none':
                users_db[target_user_id]['subscription_end'] = None
                bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=admin_keyboard())
                bot.send_message(target_user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—Å–∏–ª –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.")
            else:
                new_sub_end = datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
                users_db[target_user_id]['subscription_end'] = new_sub_end.strftime('%Y-%m-%d %H:%M:%S')
                bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_sub_end.strftime('%d.%m.%Y %H:%M')}.", reply_markup=admin_keyboard())
                bot.send_message(target_user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_sub_end.strftime('%d.%m.%Y %H:%M')}.")
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        
        save_data('users.json', users_db)

    except ValueError as ve:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {ve}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ `cancel`.", reply_markup=admin_keyboard())
        bot.register_next_step_handler(message, process_edit_user_data, target_user_id)
    except Exception as e:
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ `cancel`.", reply_markup=admin_keyboard())
        bot.register_next_step_handler(message, process_edit_user_data, target_user_id)

def process_broadcast_message(message):
    user_id = str(message.from_user.id)
    if user_id != str(ADMIN_ID): return

    broadcast_text = message.text
    sent_count = 0
    failed_count = 0

    bot.send_message(user_id, "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    for uid in users_db.keys():
        try:
            bot.send_message(uid, f"**–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{broadcast_text}", parse_mode='Markdown')
            sent_count += 1
            time.sleep(0.1) # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API Telegram
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            failed_count += 1
    
    bot.send_message(user_id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {failed_count}.", reply_markup=admin_keyboard())

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
