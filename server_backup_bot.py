#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import shutil
import zipfile
import datetime
import subprocess
import logging
from pathlib import Path
import telebot
from telebot import types
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('server_backup_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8468632199:AAFieDkPdx7gg4V4ILDKDhTfjkf778BPwZ0"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CONFIG = {
    "admin_users": [],  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    "backup_paths": [
        "/opt/vpn_bot",
        "/opt/vpn_bot/bot.py",
        "/opt/vpn_bot/users.json",
        "/opt/vpn_bot/configs.json", 
        "/opt/vpn_bot/payments.json",
        "/opt/vpn_bot/vpn_bot_env",
        "/etc/systemd/system/vpn_tg_bot.service",
        "/etc/systemd/system/backup_tg_bot.service",
        "/opt/backup_bot",
        "/var/log/syslog",
        "/var/log/auth.log",
        "/home"
    ],
    "max_backup_size": 200 * 1024 * 1024,  # 200MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
    "backup_dir": "/tmp/server_backups"
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "backup_bot_config.json"

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    global CONFIG
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                saved_config = json.load(f)
                CONFIG.update(saved_config)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def save_config():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(CONFIG, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in CONFIG["admin_users"]

def add_admin(user_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id not in CONFIG["admin_users"]:
        CONFIG["admin_users"].append(user_id)
        save_config()
        return True
    return False

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        info = {
            "hostname": subprocess.getoutput("hostname"),
            "uptime": subprocess.getoutput("uptime"),
            "disk_usage": subprocess.getoutput("df -h"),
            "memory_usage": subprocess.getoutput("free -h"),
            "cpu_info": subprocess.getoutput("lscpu | head -10"),
            "running_services": subprocess.getoutput("systemctl list-units --type=service --state=running | head -20"),
            "vpn_bot_status": check_vpn_bot_status()
        }
        return info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        return {"error": str(e)}

def check_vpn_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ–∞–π–ª–æ–≤"""
    try:
        status_info = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã VPN –±–æ—Ç–∞
        vpn_service_status = subprocess.getoutput("systemctl is-active vpn_tg_bot.service 2>/dev/null || echo 'inactive'")
        status_info["vpn_service"] = vpn_service_status.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ VPN –±–æ—Ç–∞
        vpn_files = [
            "/opt/vpn_bot/bot.py",
            "/opt/vpn_bot/users.json", 
            "/opt/vpn_bot/configs.json",
            "/opt/vpn_bot/payments.json"
        ]
        
        status_info["vpn_files"] = {}
        for file_path in vpn_files:
            if os.path.exists(file_path):
                file_size = os.path.getsize(file_path)
                status_info["vpn_files"][file_path] = f"‚úÖ {file_size} bytes"
            else:
                status_info["vpn_files"][file_path] = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
        
        return status_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VPN –±–æ—Ç–∞: {e}")
        return {"error": str(e)}

def create_backup(paths, backup_name=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π"""
    try:
        if not backup_name:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"server_backup_{timestamp}"
        
        backup_dir = CONFIG["backup_dir"]
        os.makedirs(backup_dir, exist_ok=True)
        
        backup_path = os.path.join(backup_dir, f"{backup_name}.zip")
        
        with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            total_size = 0
            
            for path in paths:
                if os.path.exists(path):
                    if os.path.isfile(path):
                        zipf.write(path, os.path.basename(path))
                        total_size += os.path.getsize(path)
                    elif os.path.isdir(path):
                        for root, dirs, files in os.walk(path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                if os.path.exists(file_path):
                                    arcname = os.path.relpath(file_path, os.path.dirname(path))
                                    zipf.write(file_path, arcname)
                                    total_size += os.path.getsize(file_path)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                                    if total_size > CONFIG["max_backup_size"]:
                                        raise Exception(f"–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {CONFIG['max_backup_size']} –±–∞–π—Ç")
        
        return backup_path, total_size
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not CONFIG["admin_users"]:
        add_admin(user_id)
        bot.reply_to(message, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.")
    
    if is_admin(user_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", "üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
        markup.row("üìÅ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        markup.row("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        
        bot.reply_to(message, 
                    "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω!\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                    "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
                    "üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n"
                    "üìÅ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–ø–∏–π\n"
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n"
                    "‚ÑπÔ∏è –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
                    reply_markup=markup)
    else:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
def server_status(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    bot.reply_to(message, "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    try:
        info = get_system_info()
        
        if "error" in info:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {info['error']}")
            return
        
        status_text = f"""
üñ•Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ**

**–•–æ—Å—Ç:** `{info['hostname']}`

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
`{info['uptime']}`

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:**
```
{info['disk_usage']}
```

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:**
```
{info['memory_usage']}
```

**–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:**
```
{info['cpu_info']}
```

**VPN –ë–æ—Ç:**
–°–ª—É–∂–±–∞: `{info['vpn_bot_status'].get('vpn_service', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`

**–§–∞–π–ª—ã VPN –±–æ—Ç–∞:**
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö VPN –±–æ—Ç–∞
        if 'vpn_files' in info['vpn_bot_status']:
            for file_path, status in info['vpn_bot_status']['vpn_files'].items():
                file_name = os.path.basename(file_path)
                status_text += f"`{file_name}`: {status}\n"
        
        status_text += f"""
**–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
```
{info['running_services']}
```
        """
        
        bot.reply_to(message, status_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
def create_backup_command(message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    bot.reply_to(message, "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    try:
        backup_path, size = create_backup(CONFIG["backup_paths"])
        size_mb = size / (1024 * 1024)
        
        bot.reply_to(message, f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n"
                             f"üìÅ –§–∞–π–ª: `{os.path.basename(backup_path)}`\n"
                             f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB", parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–¥–æ 50MB –¥–ª—è Telegram)
        if size < 50 * 1024 * 1024:
            with open(backup_path, 'rb') as f:
                bot.send_document(message.chat.id, f, caption="üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üìÅ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤")
def list_backups(message):
    """–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    try:
        backup_dir = CONFIG["backup_dir"]
        if not os.path.exists(backup_dir):
            bot.reply_to(message, "üìÅ –ü–∞–ø–∫–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –ø—É—Å—Ç–∞.")
            return
        
        backups = []
        for file in os.listdir(backup_dir):
            if file.endswith('.zip'):
                file_path = os.path.join(backup_dir, file)
                size = os.path.getsize(file_path)
                mtime = os.path.getmtime(file_path)
                date = datetime.datetime.fromtimestamp(mtime).strftime("%Y-%m-%d %H:%M:%S")
                backups.append((file, size, date))
        
        if not backups:
            bot.reply_to(message, "üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        backups.sort(key=lambda x: x[2], reverse=True)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        
        text = "üìÅ **–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:**\n\n"
        for file, size, date in backups[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            size_mb = size / (1024 * 1024)
            text += f"üì¶ `{file}`\n"
            text += f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB\n"
            text += f"üìÖ –î–∞—Ç–∞: {date}\n\n"
        
        bot.reply_to(message, text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_command(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø - —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
üìÅ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞

**–ß—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è:**
‚Ä¢ /opt/vpn_bot - –ø–∞–ø–∫–∞ —Å VPN –±–æ—Ç–æ–º
‚Ä¢ /etc/systemd/system/vpn_tg_bot.service - —Å–µ—Ä–≤–∏—Å
‚Ä¢ /var/log - –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /home - –¥–æ–º–∞—à–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: 100MB
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram: –¥–æ 50MB

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
    """
    
    bot.reply_to(message, help_text, parse_mode='Markdown')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    os.makedirs(CONFIG["backup_dir"], exist_ok=True)
    
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
